always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( id1 < num1value# -> always (eventually [0:num2temporal#] (fall (id2 == id3))) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always (id1 == num1value# and not rise (id2 == id3))
always [0:num1temporal#] (id1 == id2)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 <= num2value#) -> not (eventually [0:num5temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( eventually [num2temporala#:num2temporalb#] (id1 == num1value#) -> always (not (id2 <= num3value#)) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 <= num1value#) -> rise (id2 < num2value#) or (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 > num1value# or id2 == id3 -> fall ((id4 < num2value#) until [num4temporala#:num4temporalb#] (rise (id5 > num3valuea# and id5 < num3valueb#))) )
always ( id1 >= num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 >= num2value# )
always ( not (id1 < num1value#) -> rise ((not (id2 <= num2value#)) until [0:num3temporal#] (id3 == id4)) )
always ( id1 == id2 and id3 < num1value# -> once [num3temporala#:num3temporalb#] (id4 > num2value#) )
always (id1 == id2 and id3 == id4)
always ( id1 < num1value# and id2 < num2value# -> rise (id3 >= num3value#) and (id4 > num4valuea# and id4 < num4valueb#) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 < num2value#) -> id3 >= num3value# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not ((id2 >= num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (id3 < num3value#)) )
eventually [0:num2temporal#] (rise (id1 >= num1value#) or id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num1temporal#] (not (id1 == id2))
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 < num2value#))
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually (id3 < num3value#) )
eventually (id1 == id2)
always ( fall (historically (id1 <= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise ((id1 >= num1valuea# and id1 <= num1valueb#) since [0:num2temporal#] (not (id2 == id3))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id4 == num3value#)) )
always ( not (id1 < num1value#) or id2 == num2value# -> id3 == num3value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> (not (id2 <= num2value#)) until [0:num3temporal#] (not (id3 == id4)) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#))
always ( rise (id1 <= num1value#) -> id2 == num2value# and rise (id3 == num3value#) )
eventually (rise (id1 > num1value#) or rise (id2 <= num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually (rise (id2 >= num2value#))) )
always ( eventually [num1temporala#:num1temporalb#] (rise (id1 == id2)) -> (id3 >= num2valuea# and id3 <= num2valueb#) until (not (id4 > num3valuea# and id4 < num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (id2 == id3) or id4 < num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( rise (id1 > num1value#) -> (id2 >= num2value#) until (id3 >= num3value#) )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( rise (id1 > num1value#) -> id2 == num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 > num2value#) since [0:num4temporal#] (id3 > num3value#)) )
always ( fall (id1 == id2) -> (id3 == id4) until [num2temporala#:num2temporalb#] (id5 == num1value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( fall (id1 == num1value#) or id2 == num2value# -> historically [0:num4temporal#] (id3 > num3value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == id2) -> id3 > num1value# )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( rise (id1 < num1value#) or (id2 > num2valuea# and id2 <= num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
always [0:num3temporal#] (id1 <= num1value# or id2 == num2value#)
always ( id1 < num1value# -> (id2 > num2valuea# and id2 < num2valueb#) or id3 == num3value# )
always ( rise (id1 >= num1value#) -> eventually (always (not (id2 == num2value#))) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id2 == num2value#))) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 < num2value#) until (not (id3 == num3value#))) )
always ( fall (historically [0:num2temporal#] (id1 > num1value#)) -> not ((id2 == num3value#) until [0:num5temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
eventually (id1 > num1value# or not (id2 == num2value#))
always [0:num3temporal#] (id1 > num1value# or id2 >= num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or not rise (id2 == id3) -> not ((id4 == id5) until [0:num3temporal#] (id6 > num2value#)) )
always [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( id1 < num1value# or rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 > num2value#) )
always ( rise (id1 == num1value#) or rise (id2 > num2value#) -> id3 > num3value# or fall (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 < num1value#) -> id2 == num2value# or id3 == num3value# )
eventually (rise (id1 < num1value#))
always ( rise (id1 < num1value#) and not rise (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value# or id2 == id3)
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 == id2 or id3 == id4 -> not (historically [0:num2temporal#] (not (id5 <= num1value#))) )
eventually (rise (id1 == num1value#) or id2 == id3)
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num3temporal#] (id1 <= num1value# or id2 >= num2value#)
always ( id1 <= num1value# and rise (id2 >= num2value#) -> eventually [0:num3temporal#] (rise (id3 == id4)) )
always ( rise (id1 < num1value#) -> once [0:num3temporal#] (rise (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( (id1 == num1value#) since [0:num3temporal#] (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == id4)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (not (id3 > num1value#))) )
always ( rise (id1 > num1value#) and not (id2 <= num2value#) -> rise (id3 >= num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (rise (id3 == id4)) )
always ( id1 == num1value# -> once [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1value#) -> rise (id2 <= num2value#) )
always ( not (id1 > num1value#) -> (id2 == id3) until [0:num2temporal#] (fall (id4 == id5)) )
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (fall (id2 == num2value#)) -> eventually [num5temporala#:num5temporalb#] (id3 < num4value#) )
always ( rise (id1 > num1value#) -> not fall (id2 == num2value#) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> not fall (eventually [num4temporala#:num4temporalb#] (id2 <= num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 < num3value#) until (not (id3 > num4value#))) )
always [0:num3temporal#] (id1 == num1value# and not rise (id2 > num2value#))
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# -> not ((not (id2 <= num2value#)) until [0:num4temporal#] (id3 == num3value#)) )
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) and id2 == id3 -> id4 > num2valuea# and id4 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (not fall (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always ( rise (id1 < num1value#) and id2 == num2value# -> rise (historically [0:num4temporal#] (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and fall (id3 == num3value#) )
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 > num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (not rise (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num2temporal#] (not rise (id2 == id3)) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 == id2) -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( historically (not (id1 == id2)) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( id1 < num1value# and id2 < num2value# -> id3 == id4 )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( rise (id1 == id2) -> not (id3 > num1valuea# and id3 <= num1valueb#) and rise (id4 <= num2value#) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( fall (id1 == num1value#) -> eventually (always [0:num3temporal#] (not rise (id2 > num2value#))) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 < num2value#))) )
always ( not fall (id1 == num1value#) and rise (id2 < num2value#) -> (not (id3 == id4)) until [num3temporala#:num3temporalb#] (id5 == id6) )
always ( rise (id1 == num1value#) -> not ((id2 >= num2value#) until (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
eventually (id1 == num1value#)
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( not (id1 > num1value#) or id2 == id3 -> not (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
eventually [0:num1temporal#] (rise (id1 == id2))
always (id1 == num1value# and id2 > num2value#)
always ( rise (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) or id4 == num2value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#) or id2 == id3)
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (id2 >= num3value#) )
always [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 < num2value#)
eventually (not (id1 > num1value#))
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 <= num2value#))
always ( id1 == id2 -> id3 == id4 and id5 == num1value# )
always ( id1 >= num1valuea# and id1 < num1valueb# -> id2 >= num2value# )
always ( (not rise (id1 == num1value#)) since [num3temporala#:num3temporalb#] (rise (id2 >= num2value#)) -> always (eventually (id3 <= num4value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (fall (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> rise (id2 == id3) )
always (id1 <= num1value# and id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 == id3) )
always [num2temporala#:num2temporalb#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( not fall (id1 > num1value#) or id2 >= num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always (id1 >= num1value#)
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (not (id4 < num2value#)) )
always (id1 < num1value# or not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (not (id1 == num1value#)) since (id2 == id3) -> always [num3temporala#:num3temporalb#] (not (id4 > num2valuea# and id4 < num2valueb#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( historically [num1temporala#:num1temporalb#] (not (id1 == id2)) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id3 > num2valuea# and id3 < num2valueb#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (historically [0:num3temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 < num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> rise (id4 == num2value#) and (id5 > num3valuea# and id5 < num3valueb#) )
eventually [0:num2temporal#] (id1 == id2 or id3 > num1value#)
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 <= num1value# or rise (id2 < num2value#) -> always (id3 == num3value#) )
eventually [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) -> id2 <= num2value# or rise (id3 > num3valuea# and id3 <= num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always [0:num2temporal#] (id1 <= num1value#)
always ( (not (id1 < num1value#)) since [0:num3temporal#] (not fall (id2 >= num2value#)) -> (id3 == id4) until [0:num5temporal#] (id5 < num4value#) )
always (id1 <= num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value# and not (id2 == id3))
eventually (not (id1 == num1value#))
always ( rise (id1 >= num1value#) and id2 == id3 -> always (eventually [num3temporala#:num3temporalb#] (fall (id4 > num2valuea# and id4 < num2valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until (fall (id3 == num3value#)) )
always ( not ((id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) -> not ((id3 >= num4value#) until [num6temporala#:num6temporalb#] (not (id4 == num5value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (not rise (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) or (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> not ((id3 >= num1value#) until [0:num3temporal#] (rise (id4 < num2value#))) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( (id1 >= num1value#) since (id2 <= num2value#) -> once (id3 > num3value#) )
always ( fall (id1 == id2) -> eventually (always (not (id3 > num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> id3 == id4 )
always ( rise (id1 >= num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 <= num2value#))) )
always ( id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#) -> once (rise (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( once [0:num1temporal#] (rise (id1 == id2)) -> not ((id3 == id4) until [0:num3temporal#] (id5 >= num2valuea# and id5 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 >= num1value#))) )
always (id1 > num1value# or id2 < num2value#)
always (id1 > num1value# and id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not (id1 < num1value#) -> id2 == id3 )
always ( id1 == id2 and id3 == num1value# -> once [num3temporala#:num3temporalb#] (not (id4 >= num2valuea# and id4 <= num2valueb#)) )
always [0:num3temporal#] (not (id1 <= num1value#) and id2 < num2value#)
eventually [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always ( id1 == id2 or rise (id3 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (not (id4 > num2valuea# and id4 < num2valueb#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 >= num1value# and rise (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (not rise (id3 == num3value#)) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# or id2 < num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( id1 == num1value# -> always [num2temporala#:num2temporalb#] (not rise (id2 == id3)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( historically (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (fall (id3 == num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (not (id3 > num3valuea# and id3 < num3valueb#))) )
always ( id1 < num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( not (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> not (always [0:num2temporal#] (not fall (id3 == num1value#))) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> not (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall ((not (id1 <= num1value#)) since [0:num2temporal#] (id2 == id3)) -> rise (once [num4temporala#:num4temporalb#] (id4 >= num3value#)) )
always ( (id1 == id2) until (rise (id3 >= num1value#)) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 <= num2value#)) )
always ( id1 <= num1value# -> eventually (always (id2 == id3)) )
always (id1 == num1value# and not (id2 > num2value#))
eventually (id1 == id2)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
eventually (fall (id1 == num1value#) and id2 > num2value#)
eventually [0:num2temporal#] (id1 == num1value# or id2 == id3)
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 == num1value# or not fall (id2 == id3))
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 < num3value#) )
always (not (id1 < num1value#) or not (id2 < num2value#))
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> not (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 > num1value# and fall (id2 > num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( fall (id1 == id2) -> eventually (always (id3 == num1value#)) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num1temporal#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 == id2 or not rise (id3 >= num1valuea# and id3 <= num1valueb#))
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (id3 > num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) since [0:num4temporal#] (rise (id3 == num3value#)) )
always ( once (id1 == id2) -> (id3 == num1value#) until [0:num2temporal#] (not (id4 == id5)) )
always (id1 > num1value# and id2 == num2value#)
always ( id1 == id2 -> (id3 == id4) since [0:num2temporal#] (rise (id5 <= num1value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise (id2 == id3) )
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 < num1value#) -> not ((id2 < num2value#) until (id3 > num3value#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( id1 == num1value# -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (not fall (id3 == num1value#)) )
eventually [0:num1temporal#] (id1 == id2)
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 == num2value#)
eventually [0:num3temporal#] (id1 < num1value# or id2 < num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 >= num1value# and not (id2 <= num2value#) -> not (eventually [0:num3temporal#] (rise (id3 == id4))) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> not (id4 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( eventually (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( not (once [num2temporala#:num2temporalb#] (not fall (id1 > num1valuea# and id1 < num1valueb#))) -> eventually (rise (id2 >= num3value#)) )
always ( rise (id1 >= num1value#) and rise (id2 > num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 <= num3value#)) )
always ( id1 > num1value# -> not ((id2 >= num2value#) until [num4temporala#:num4temporalb#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 >= num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) and id3 > num3value# )
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
eventually [0:num3temporal#] (rise (id1 > num1value#) or rise (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num3temporal#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> always (id2 == id3) )
always ( fall (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 < num1value#) and id2 > num2value# -> id3 == id4 )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not (id2 >= num2value#))
always ( id1 <= num1value# or id2 >= num2value# -> not (once [0:num4temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> always (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3) -> eventually (always [0:num3temporal#] (id4 == num2value#)) )
always ( id1 <= num1value# -> (id2 == num2value#) since [0:num4temporal#] (rise (id3 < num3value#)) )
always ( fall (id1 == num1value#) -> rise (id2 >= num2value#) )
always ( not (id1 >= num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> (id3 >= num3valuea# and id3 <= num3valueb#) since [0:num5temporal#] (id4 < num4value#) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( (id1 == num1value#) until (id2 <= num2value#) -> always [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always ( rise (id1 < num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until (rise (id3 < num3value#))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 > num3value#) )
eventually [0:num3temporal#] (id1 < num1value# or rise (id2 <= num2value#))
always ( id1 <= num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) since (id3 == id4) )
always ( id1 == id2 -> not fall (id3 == num1value#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( not fall (eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 == num3value#))) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id2 == id3))) )
always ( not rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
always ( id1 == num1value# -> id2 > num2value# and id3 == id4 )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 == num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( id1 == num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (not (id3 > num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always (id1 >= num1value#)
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( id1 <= num1value# or id2 < num2value# -> historically [0:num3temporal#] (not (id3 == id4)) )
always ( fall (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (rise (id4 > num2value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 >= num1value#) and not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( not (once [num1temporala#:num1temporalb#] (not (id1 == id2))) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id3 > num2valuea# and id3 < num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) until [0:num2temporal#] (not (id4 == id5)) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> (not (id2 > num2value#)) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always [0:num3temporal#] (id1 <= num1value# or id2 >= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) or id2 > num2value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (not (id2 < num2value#))) )
eventually (id1 > num1value# or id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) or id2 == num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> id2 == num2value# or rise (id3 <= num3value#) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( not rise (historically [0:num2temporal#] (id1 == num1value#)) -> eventually [0:num4temporal#] (id2 < num3value#) )
always ( not ((id1 == id2) until (id3 >= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 < num2value#))) )
eventually [0:num3temporal#] (id1 < num1value# and id2 <= num2value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always ( id1 > num1valuea# and id1 < num1valueb# -> not (id2 == id3) )
always ( rise (id1 <= num1value#) -> not fall (once [0:num3temporal#] (id2 >= num2value#)) )
always (id1 == num1value#)
always ( not (id1 > num1value#) or id2 == id3 -> not (id4 == num2value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not (id1 == num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> not (eventually [0:num4temporal#] (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( (not (id1 == num1value#)) since [0:num3temporal#] (id2 < num2value#) -> eventually [0:num5temporal#] (always [num6temporala#:num6temporalb#] (not (id3 < num4value#))) )
always ( once [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always (id2 <= num3value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always (id3 <= num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> (id3 >= num1value#) until [num3temporala#:num3temporalb#] (id4 <= num2value#) )
always [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always (not fall (id1 == num1value#))
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( fall (id1 == num1value#) -> always (not fall (id2 >= num2value#)) )
always ( id1 >= num1value# or rise (id2 > num2valuea# and id2 < num2valueb#) -> not (eventually (id3 <= num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always (not fall (id1 == num1value#))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( id1 == id2 or not (id3 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 < num2value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 == num2value#))) )
always ( id1 <= num1value# and id2 >= num2value# -> id3 > num3valuea# and id3 < num3valueb# )
eventually [0:num2temporal#] (not (id1 == num1value#))
always (id1 > num1value#)
always ( rise (id1 >= num1value#) -> always (eventually (id2 == num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == id2) -> eventually (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( id1 == id2 -> id3 >= num1value# )
always ( id1 > num1value# -> fall ((id2 == num2value#) until (rise (id3 == num3value#))) )
always ( rise (id1 >= num1value#) -> historically [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 == num1value#)
always ( not (once [0:num2temporal#] (not rise (id1 > num1value#))) -> eventually [num4temporala#:num4temporalb#] (always (not (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 == id2) -> not (id3 == num1value#) or id4 == num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#) -> always (id2 > num3valuea# and id2 < num3valueb#) )
always ( fall (id1 == num1value#) -> id2 == id3 )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 < num1value#) -> rise (id2 <= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 == id2) -> rise (historically [num2temporala#:num2temporalb#] (id3 < num1value#)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> always [0:num2temporal#] (id2 == id3) )
always ( not ((not fall (id1 > num1valuea# and id1 < num1valueb#)) since (id2 >= num2value#)) -> always [0:num3temporal#] (eventually (id3 == id4)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) or fall (id2 == num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( id1 >= num1value# and id2 == id3 -> always [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id3 == num1value#))) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> not (id3 <= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> not (always (id3 < num3value#)) )
always ( rise (id1 > num1value#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> rise (id4 == num2value#) and not (id5 == id6) )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually (fall (id1 == num1value#) and rise (id2 == num2value#))
eventually [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> (id2 <= num2value#) since [0:num4temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2value#))) )
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( id1 <= num1value# and id2 > num2value# -> once [num4temporala#:num4temporalb#] (rise (id3 <= num3value#)) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always [0:num2temporal#] (id1 <= num1value#)
always ( always [num2temporala#:num2temporalb#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always ( rise (once (id1 == id2)) -> fall (historically (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( not (id1 <= num1value#) -> id2 == num2value# and id3 < num3value# )
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always (id1 == num1value#)
always ( rise (id1 > num1value#) and rise (id2 > num2value#) -> eventually [0:num3temporal#] (rise (id3 == id4)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always (not (id1 > num1value#))
always ( rise (id1 >= num1value#) and rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 >= num3valuea# and id3 < num3valueb#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] (rise (id1 >= num1value#) and fall (id2 == num2value#))
eventually (id1 <= num1value#)
eventually [0:num2temporal#] (id1 < num1value#)
eventually (not (id1 > num1value#) and id2 < num2value#)
always [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (once [num3temporala#:num3temporalb#] (not (id2 > num2value#))) )
always ( id1 < num1value# and id2 == num2value# -> always (id3 >= num3value#) )
always ( id1 >= num1value# or id2 <= num2value# -> id3 >= num3value# and not (id4 > num4value#) )
always [0:num3temporal#] (id1 < num1value# and (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> not ((not (id2 < num2value#)) until [0:num4temporal#] (id3 > num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> eventually (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> not (always (id2 < num2value#)) )
always ( rise (id1 == id2) -> not fall (always [0:num1temporal#] (id3 == id4)) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 >= num3value#) until [0:num4temporal#] (id3 == id4) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 > num1value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( id1 > num1value# -> always (eventually [0:num2temporal#] (rise (id2 == id3))) )
always ( fall (id1 == id2) -> rise (id3 < num1value#) and id4 < num2value# )
always ( rise (id1 == id2) -> not ((id3 > num1valuea# and id3 < num1valueb#) since [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( id1 == id2 -> id3 == num1value# or (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 == id2 -> id3 == num1value# and id4 >= num2value# )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 >= num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( id1 == id2 or id3 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2value#)) )
always ( not fall (id1 == num1value#) and id2 == id3 -> not (always [num3temporala#:num3temporalb#] (id4 < num2value#)) )
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until (rise (id3 < num3value#)) )
always ( rise (id1 <= num1value#) -> rise (id2 < num2value#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 <= num1valueb#) or id2 > num2value#)
always ( fall (id1 == num1value#) -> id2 >= num2value# or rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3value#) until [num5temporala#:num5temporalb#] (id4 > num4valuea# and id4 <= num4valueb#) )
always ( id1 == id2 -> (id3 >= num1value#) until [0:num3temporal#] (id4 > num2value#) )
always ( (not (id1 <= num1value#)) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 < num4value#)) )
always ( rise (id1 >= num1value#) -> id2 < num2value# or id3 >= num3value# )
always ( id1 == id2 and id3 < num1value# -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id4 == id5)) )
always (not (id1 == num1value#))
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> not (eventually (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 < num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( id1 == id2 -> always [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( once [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == id4)) )
always [num1temporala#:num1temporalb#] (id1 == id2 and not rise (id3 == id4))
always [0:num2temporal#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( historically [num2temporala#:num2temporalb#] (not (id1 < num1value#)) -> (id2 == id3) until (id4 < num3value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
eventually [num2temporala#:num2temporalb#] (not (id1 > num1value#))
eventually [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 == num1value#) -> not rise (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 < num1value#) -> id2 == id3 and id4 > num2value# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually (always [num2temporala#:num2temporalb#] (not (id2 == id3))) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id3 == id4))) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (rise (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( once [0:num2temporal#] (rise (id1 >= num1valuea# and id1 < num1valueb#)) -> always (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( always [0:num1temporal#] (id1 == id2) -> (id3 == num2value#) until [num4temporala#:num4temporalb#] (id4 == num3value#) )
always ( rise (id1 < num1value#) or id2 <= num2value# -> id3 < num3value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) and rise (id2 <= num2value#))
always ( once (id1 < num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( rise (id1 <= num1value#) or id2 < num2value# -> id3 >= num3value# or id4 < num4value# )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == num2value#))
always ( id1 < num1value# or rise (id2 > num2valuea# and id2 < num2valueb#) -> fall ((not (id3 > num3value#)) until (id4 == id5)) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 == id2) -> id3 >= num1value# or rise (id4 > num2valuea# and id4 < num2valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> always (id3 <= num3value#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 <= num1value# -> not (id2 < num2value#) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 < num1value#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (id1 == num1value#) or id2 == id3 -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id4 > num2value#))) )
always ( (id1 <= num1value#) since (rise (id2 <= num2value#)) -> (id3 >= num3valuea# and id3 <= num3valueb#) until (id4 >= num4value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 < num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually (id1 == id2 or id3 == num1value#)
always [0:num2temporal#] (id1 <= num1value#)
always ( historically [0:num2temporal#] (id1 > num1value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 < num3value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == id2 -> eventually (always (id3 == num1value#)) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually (id1 <= num1value#)
always [0:num3temporal#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always [0:num1temporal#] (id1 == id2 or id3 == id4)
eventually [0:num3temporal#] (id1 > num1value# and not fall (id2 >= num2value#))
always ( rise (id1 == num1value#) -> not fall (id2 == num2value#) )
eventually [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
always ( id1 == num1value# or id2 == num2value# -> id3 >= num3value# )
eventually (id1 == id2 and rise (id3 == num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 >= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always (id3 == id4) )
always [0:num3temporal#] (not (id1 < num1value#) or id2 == num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 == num2value#) -> always [0:num4temporal#] (eventually (id3 < num3value#)) )
always ( id1 == id2 and id3 < num1value# -> historically [num3temporala#:num3temporalb#] (id4 > num2value#) )
always ( id1 == num1value# -> (id2 >= num2value#) until [0:num4temporal#] (id3 < num3value#) )
eventually [0:num2temporal#] (id1 == id2 or rise (id3 <= num1value#))
always [0:num2temporal#] (id1 <= num1value# or not rise (id2 == id3))
eventually [0:num2temporal#] (not fall (id1 == num1value#))
always ( rise (id1 <= num1value#) -> not (id2 <= num2value#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 <= num2value#))
always (id1 == id2 and id3 == num1value#)
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( id1 == id2 or id3 == id4 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id5 >= num1valuea# and id5 <= num1valueb#)) )
always ( id1 >= num1value# or not fall (id2 > num2value#) -> (not (id3 == num3value#)) until [num4temporala#:num4temporalb#] (id4 == id5) )
always ( once (rise (id1 == num1value#)) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( once (id1 == id2) -> historically [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 < num1value#) and (id2 > num2valuea# and id2 <= num2valueb#) -> (not (id3 < num3value#)) since (id4 < num4value#) )
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num1temporal#] (rise (id1 == id2))
always ( once (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 == id2) -> rise (always [0:num2temporal#] (id3 < num1value#)) )
eventually (rise (id1 == id2))
always ( fall (id1 == num1value#) and not (id2 == num2value#) -> id3 == num3value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 > num1value#) and id2 == id3 -> eventually [0:num2temporal#] (always (id4 == id5)) )
always ( fall ((id1 >= num1value#) since [num3temporala#:num3temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) -> eventually [0:num4temporal#] (id3 == id4) )
always ( not (historically (not (id1 > num1value#))) -> eventually [0:num2temporal#] (not (id2 == id3)) )
eventually [0:num1temporal#] (fall (id1 == id2))
always (id1 >= num1value# or id2 >= num2value#)
eventually (id1 == num1value# and id2 == id3)
always [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 < num1valueb# )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( not (historically (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
eventually [0:num2temporal#] (id1 <= num1value#)
always (id1 == num1value#)
always ( rise (id1 >= num1value#) -> not (id2 == num2value#) )
always ( id1 == num1value# -> rise (id2 < num2value#) and rise (id3 > num3value#) )
always ( rise (id1 == num1value#) -> (id2 == id3) until [num2temporala#:num2temporalb#] (id4 == id5) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> (id2 == id3) until [num2temporala#:num2temporalb#] (id4 == id5) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# or id3 == id4 )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( id1 == id2 and id3 == id4 -> eventually [0:num2temporal#] (always (id5 >= num1value#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
eventually (id1 > num1value# or id2 == num2value#)
always ( rise (id1 == num1value#) -> always (eventually [num2temporala#:num2temporalb#] (rise (id2 == id3))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#) -> rise (id3 > num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 < num1value# and not rise (id2 == id3))
always ( id1 >= num1value# -> (id2 == id3) until [num2temporala#:num2temporalb#] (id4 == id5) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> not (id3 == num3value#) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 and id3 <= num1value# -> (id4 == id5) until (id6 > num2valuea# and id6 < num2valueb#) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 > num2value#)
always ( fall (id1 == id2) -> always (eventually (id3 > num1valuea# and id3 < num1valueb#)) )
always ( once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (rise (id2 > num3valuea# and id2 < num3valueb#))) )
eventually [0:num3temporal#] (id1 > num1value# or not (id2 == num2value#))
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( (id1 == id2) since [num1temporala#:num1temporalb#] (id3 == id4) -> not (eventually [0:num3temporal#] (id5 == num2value#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( rise (id1 < num1value#) -> fall ((not (id2 == num2value#)) until [0:num3temporal#] (fall (id3 == id4))) )
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (rise (id2 == id3)) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> (id3 == num3value#) until [num5temporala#:num5temporalb#] (rise (id4 <= num4value#)) )
always ( historically (not (id1 < num1value#)) -> not ((id2 == id3) until [0:num3temporal#] (not (id4 < num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id4 > num2valuea# and id4 < num2valueb#))) )
always ( fall (id1 == num1value#) -> rise ((id2 <= num2value#) since (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( not (id1 == id2) or not fall (id3 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id4 < num2value#))) )
always ( fall (id1 == id2) -> id3 > num1value# )
always ( fall (id1 == num1value#) -> not (id2 == id3) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 -> id3 == id4 )
always ( not ((id1 == id2) since (id3 == id4)) -> always [0:num2temporal#] (id5 == num1value#) )
eventually (id1 < num1value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> eventually (always [num3temporala#:num3temporalb#] (id5 == num2value#)) )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> (id3 >= num1value#) until [num3temporala#:num3temporalb#] (rise (id4 >= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always (not fall (id1 == num1value#))
always ( id1 == num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( id1 == num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 > num3value#) or not rise (id4 == num4value#) )
always [0:num2temporal#] (not (id1 >= num1value#))
always ( once (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( id1 > num1value# -> not fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( rise (id1 < num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (not fall (id2 >= num2value#))) )
always ( not (id1 < num1value#) or id2 == num2value# -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
eventually [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#))
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always (id3 == id4)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 <= num2value#) -> not fall (id3 > num3valuea# and id3 < num3valueb#) )
eventually (id1 == id2)
eventually [0:num2temporal#] (id1 > num1value#)
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id2 == id3))) )
always ( id1 >= num1value# and id2 > num2value# -> not (always (id3 == id4)) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 >= num1value#)) )
always ( rise (id1 >= num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (fall (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# and not (id3 == id4) )
always ( always (id1 == num1value#) -> not ((not fall (id2 >= num2value#)) since [0:num3temporal#] (rise (id3 == id4))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (id3 > num3valuea# and id3 <= num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> id2 > num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always ( once [0:num2temporal#] (id1 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id2 == id3))) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and rise (id2 > num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (id2 <= num2value#)) )
always ( historically (id1 == id2) -> eventually [0:num2temporal#] (not fall (id3 >= num1valuea# and id3 <= num1valueb#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually (id4 == id5)) )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# -> (id2 == id3) until (id4 == num2value#) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always [0:num2temporal#] (id1 == id2 and not (id3 == num1value#))
eventually [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( id1 == id2 -> id3 == id4 )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == num1value#) -> fall (eventually (fall (id2 == id3))) )
always ( id1 < num1value# -> id2 == num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( not rise (once [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))) -> not (always [num4temporala#:num4temporalb#] (id2 >= num3value#)) )
eventually (id1 == id2 and rise (id3 > num1value#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (id3 == num3value#) )
eventually [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always [0:num1temporal#] (id1 == id2)
always ( not ((id1 == num1value#) since [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) -> eventually [0:num4temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> eventually (rise (id2 == id3)) )
eventually (id1 > num1value# and id2 < num2value#)
always ( id1 == num1value# -> eventually (id2 == num2value#) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 == id2) -> not (id3 == id4) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> once [0:num3temporal#] (id3 == id4) )
always ( id1 == id2 or id3 >= num1value# -> id4 == num2value# )
always ( id1 < num1value# or id2 < num2value# -> always [0:num3temporal#] (not (id3 == id4)) )
always ( rise (id1 == id2) -> always (id3 == num1value#) )
always ( id1 == num1value# -> id2 == num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 >= num1value#) -> not (eventually (rise (id2 < num2value#))) )
always ( not (once [0:num1temporal#] (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id3 == num2value#))) )
eventually [0:num2temporal#] (not (id1 == num1value#))
always ( fall (id1 == num1value#) -> (id2 == num2value#) since [0:num4temporal#] (id3 > num3value#) )
always ( id1 == num1value# and id2 == num2value# -> id3 <= num3value# )
always [0:num2temporal#] (not (id1 < num1value#))
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) until [0:num3temporal#] (id4 > num2value#) )
always (id1 == id2)
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always [0:num3temporal#] (not (id1 < num1value#) or not rise (id2 > num2value#))
always ( rise (id1 == num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 <= num1value#) -> once [num4temporala#:num4temporalb#] (id4 == num3value#) )
always (not (id1 == id2) or id3 == num1value#)
always ( once [0:num2temporal#] (not fall (id1 >= num1value#)) -> always [num4temporala#:num4temporalb#] (eventually (rise (id2 >= num3value#))) )
always ( (id1 == id2) until [0:num2temporal#] (rise (id3 <= num1value#)) -> eventually (id4 == num3value#) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( fall (id1 == num1value#) -> id2 == num2value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( (id1 == id2) since [0:num1temporal#] (rise (id3 == id4)) -> not rise (eventually [num3temporala#:num3temporalb#] (id5 <= num2value#)) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (id3 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( id1 >= num1value# and not rise (id2 == id3) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( not (id1 >= num1value#) or id2 == id3 -> id4 < num2value# )
always ( rise (id1 > num1value#) -> eventually (id2 >= num2value#) )
always ( id1 == id2 -> id3 == num1value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
eventually [0:num3temporal#] (id1 > num1value# and rise (id2 == num2value#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( rise (id1 < num1value#) -> not rise (eventually (rise (id2 == id3))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> not (id2 == id3) )
always ( rise (id1 < num1value#) -> eventually (always (id2 == id3)) )
eventually [0:num2temporal#] (id1 == num1value#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( not (id1 == id2) and id3 == id4 -> always [0:num2temporal#] (id5 == num1value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 and rise (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 == id5 )
always (id1 == num1value#)
eventually (id1 == num1value# and rise (id2 > num2value#))
always ( fall (always (id1 == num1value#)) -> not ((id2 <= num2value#) until [0:num4temporal#] (not (id3 >= num3value#))) )
always ( id1 <= num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( not ((id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 == num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == id4))) )
always ( rise (id1 == id2) -> always (eventually [0:num1temporal#] (rise (id3 == id4))) )
always ( rise (id1 == num1value#) -> id2 >= num2value# or id3 >= num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( historically (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 >= num1value# -> rise (id2 >= num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
eventually [0:num1temporal#] (rise (id1 == id2))
always [0:num2temporal#] (not (id1 < num1value#) and id2 == id3)
always ( id1 == id2 and id3 > num1value# -> not (always [0:num3temporal#] (id4 == num2value#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( not (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> historically [0:num4temporal#] (id3 == num3value#) )
always ( fall (id1 == id2) -> rise (id3 == num1value#) )
always ( once [0:num2temporal#] (id1 == num1value#) -> always (eventually [0:num4temporal#] (rise (id2 >= num3value#))) )
always ( id1 < num1value# -> fall (always [num3temporala#:num3temporalb#] (not (id2 == num2value#))) )
always ( rise (id1 > num1value#) -> eventually (fall (id2 == num2value#)) )
always ( rise (id1 == id2) -> not fall (id3 >= num1value#) or id4 < num2value# )
eventually (id1 == num1value# or (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( once [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == id4)) )
always ( id1 == num1value# and id2 > num2value# -> id3 == num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) and id2 < num2value# -> rise (id3 >= num3value#) )
always [0:num3temporal#] (id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> once [0:num2temporal#] (id3 >= num1value#) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( not (eventually (not (id1 == id2))) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( rise (id1 > num1value#) -> fall (id2 == num2value#) or rise (id3 >= num3value#) )
always ( rise (id1 == num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( eventually [num2temporala#:num2temporalb#] (id1 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 < num3value#))) )
always ( fall ((id1 == id2) since [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 > num3valuea# and id4 < num3valueb#)) )
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) -> eventually (fall (id3 >= num4valuea# and id3 < num4valueb#)) )
always ( not ((not (id1 == id2)) since [num2temporala#:num2temporalb#] (rise (id3 > num1value#))) -> rise ((id4 == num3value#) until [0:num5temporal#] (id5 > num4valuea# and id5 < num4valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == num1value# and id2 == num2value# -> rise (id3 <= num3value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 < num1value#)) )
always ( id1 == id2 -> eventually (always (id3 < num1value#)) )
always (id1 > num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> not (once [0:num4temporal#] (rise (id3 > num3valuea# and id3 <= num3valueb#))) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> not ((id4 <= num2value#) since (id5 >= num3valuea# and id5 <= num3valueb#)) )
always ( eventually (rise (id1 == num1value#)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# and id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (fall (id3 == id4)) )
always ( (id1 == id2) since (id3 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
eventually [0:num3temporal#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always (not (id1 == num1value#) and id2 >= num2value#)
always ( rise (id1 >= num1value#) -> (id2 < num2value#) until (rise (id3 == id4)) )
always ( not (id1 <= num1value#) and id2 == id3 -> eventually [0:num3temporal#] (id4 == num2value#) )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 <= num1valueb#))
eventually [0:num2temporal#] (id1 > num1value# or id2 == id3)
always (id1 == id2 and not (id3 <= num1value#))
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
eventually [0:num2temporal#] (id1 < num1value#)
eventually (id1 == num1value#)
always ( rise (id1 == id2) -> id3 == id4 )
always ( (not (id1 > num1valuea# and id1 <= num1valueb#)) since (id2 >= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id3 == id4))) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) or id2 >= num2value#)
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 > num1value#)
eventually (not (id1 < num1value#) and rise (id2 > num2value#))
always ( once (not fall (id1 >= num1value#)) -> not rise ((id2 == num2value#) since [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( rise (id1 == id2) -> (id3 >= num1value#) until [0:num3temporal#] (id4 == num2value#) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( not (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 <= num2value#))) )
eventually [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 <= num1value#))
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [0:num3temporal#] (not (id1 < num1value#) and id2 == num2value#)
eventually (id1 == id2)
always ( id1 == num1value# and rise (id2 <= num2value#) -> id3 > num3value# )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3value#) )
always ( once [num2temporala#:num2temporalb#] (id1 < num1value#) -> always (eventually [0:num4temporal#] (id2 == num3value#)) )
always [0:num2temporal#] (id1 <= num1value# or id2 == id3)
always (id1 == num1value#)
always ( rise (id1 == num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) since [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( id1 == id2 or id3 > num1value# -> eventually [0:num3temporal#] (not rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( fall ((id1 == id2) since [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) -> not ((id4 <= num3value#) since [0:num4temporal#] (id5 == id6)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> not (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 <= num1value#) -> rise (id2 > num2value#) or rise (id3 <= num3value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually (always [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> (id3 == id4) until [0:num4temporal#] (id5 >= num3value#) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
eventually (id1 == id2 and id3 >= num1value#)
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) until (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 == id2 -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 < num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# or id2 <= num2value# -> not (always (id3 == num3value#)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 == id2) -> id3 == id4 )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> not rise (id2 == id3) or id4 > num2value# )
always ( eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#)) -> historically [0:num3temporal#] (not (id2 == id3)) )
always ( not (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
eventually (id1 <= num1value# and id2 == id3)
always ( (id1 >= num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (id2 == num2value#) -> not (always [0:num5temporal#] (not (id3 < num4value#))) )
always (id1 == id2)
always [0:num2temporal#] (id1 >= num1value#)
always ( (not (id1 <= num1value#)) until [0:num3temporal#] (id2 > num2value#) -> (not (id3 == num4value#)) since [0:num6temporal#] (id4 > num5valuea# and id4 < num5valueb#) )
always ( id1 < num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( always (not (id1 >= num1valuea# and id1 < num1valueb#)) -> eventually (always (id2 >= num2value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 <= num1valueb# )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 == num1value#) -> rise (id2 > num2value#) )
always ( not (id1 <= num1value#) or id2 < num2value# -> id3 == id4 and id5 >= num3value# )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 < num2value#))
eventually (rise (id1 < num1value#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( always [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (always (id3 < num2value#)) )
always ( rise (id1 > num1value#) -> id2 <= num2value# and not (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( id1 == id2 and id3 == id4 -> id5 == id6 )
always ( (id1 >= num1value#) until [num3temporala#:num3temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> always [num5temporala#:num5temporalb#] (id3 == num4value#) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 <= num2value#)) )
always ( id1 <= num1value# or not (id2 < num2value#) -> id3 <= num3value# )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( rise (id1 > num1value#) -> always (id2 <= num2value#) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 > num2value#)
always ( rise (id1 == id2) -> id3 == num1value# and id4 == id5 )
always ( id1 == num1value# and not (id2 == num2value#) -> not (id3 < num3value#) or rise (id4 < num4value#) )
always ( rise (id1 > num1value#) -> not (id2 >= num2value#) and id3 > num3value# )
eventually (id1 < num1value#)
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 < num1value#)) )
always ( rise (id1 == id2) -> (id3 > num1valuea# and id3 <= num1valueb#) until (fall (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( id1 == id2 or id3 > num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id4 >= num2valuea# and id4 <= num2valueb#))) )
always ( not (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( not (id1 > num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 >= num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> not (always [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (not (id2 <= num2value#)) )
eventually (id1 >= num1value# or fall (id2 == num2value#))
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# and id3 == num3value# )
always ( historically [0:num2temporal#] (id1 == num1value#) -> not ((id2 > num3value#) until [num5temporala#:num5temporalb#] (id3 > num4value#)) )
always ( once (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually (rise (id2 < num3value#))) )
always ( rise (id1 >= num1value#) -> always (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> rise (id2 > num2value#) and id3 == num3value# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 < num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 >= num2value#)) )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) and rise (id3 > num3value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( (id1 == num1value#) since (rise (id2 == num2value#)) -> not ((id3 == id4) until (id5 == id6)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value# -> always [num4temporala#:num4temporalb#] (eventually (rise (id3 <= num3value#))) )
always ( not (id1 < num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( once (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always ( rise (id1 >= num1value#) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 > num3value#) )
eventually [0:num2temporal#] (id1 < num1value#)
eventually (rise (id1 > num1value#))
always (id1 > num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] (id1 == num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#))
always (id1 >= num1value# and id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 < num1value#) -> (id2 == id3) since [0:num2temporal#] (id4 == id5) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 < num1value#) or id2 == id3 -> id4 <= num2value# and fall (id5 > num3valuea# and id5 < num3valueb#) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( id1 == num1value# -> id2 > num2value# )
always ( fall (id1 == num1value#) -> (id2 >= num2valuea# and id2 < num2valueb#) or id3 == num3value# )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> always [num3temporala#:num3temporalb#] (eventually (id2 == id3)) )
always [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> not fall (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always (not (id1 == id2) and id3 == id4)
always ( once [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually (id3 > num2valuea# and id3 < num2valueb#)) )
always ( rise (id1 == id2) -> not (id3 == id4) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 <= num1value#) -> always (not (id2 == num2value#)) )
always (id1 >= num1value# and not (id2 == id3))
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
eventually [0:num3temporal#] (not (id1 <= num1value#) or id2 > num2value#)
always ( rise (id1 == num1value#) and id2 <= num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (not fall (id3 == num3value#))) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> not ((id2 > num2value#) until [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually (rise (id2 >= num2value#))) )
eventually [0:num3temporal#] (id1 > num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( not (historically (id1 == id2)) -> eventually (not (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( not (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 <= num2value#))) )
eventually [0:num3temporal#] (id1 <= num1value# or id2 > num2value#)
always ( id1 >= num1value# and id2 == id3 -> id4 < num2value# and (id5 > num3valuea# and id5 < num3valueb#) )
always [0:num2temporal#] (not (id1 <= num1value#))
eventually [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id2 == id3))) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> (id2 <= num3value#) until [0:num5temporal#] (id3 >= num4value#) )
always ( id1 > num1value# or id2 == id3 -> always [0:num2temporal#] (eventually [0:num3temporal#] (id4 == id5)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 > num3value#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 < num1value#) or id2 >= num2value# -> id3 <= num3value# )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( once (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 >= num1value#) -> always (id2 == num2value#) )
always ( once [0:num2temporal#] (id1 > num1value#) -> not (always (id2 > num3value#)) )
always [num1temporala#:num1temporalb#] (not (id1 == id2))
eventually [0:num1temporal#] (not (id1 == id2))
always ( once [0:num1temporal#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (rise (id3 == num2value#)) )
always ( fall (id1 == id2) -> always (id3 <= num1value#) )
always ( id1 > num1value# -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 >= num2value#) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 > num1value# -> (id2 == num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 < num2value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( id1 < num1value# and id2 < num2value# -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( id1 <= num1value# -> eventually (always (id2 > num2value#)) )
always ( id1 == id2 or id3 == num1value# -> historically [num3temporala#:num3temporalb#] (not (id4 == num2value#)) )
always (not (id1 > num1value#))
always ( historically (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 > num2value#) until [num3temporala#:num3temporalb#] (id3 == id4)) )
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> (not (id2 >= num2value#)) until [0:num4temporal#] (id3 >= num3value#) )
eventually [num1temporala#:num1temporalb#] (not (id1 == id2))
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 > num1value# -> always (eventually (fall (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> id2 >= num2value# and id3 > num3value# )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( id1 == id2 or id3 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( not rise (eventually [num1temporala#:num1temporalb#] (id1 == id2)) -> always (id3 > num2value#) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 == id3))
always [0:num2temporal#] (not (id1 == num1value#))
eventually [0:num2temporal#] (not (id1 == num1value#) or not (id2 == id3))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( historically (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 >= num1value#) and id2 == num2value# -> not rise (id3 == num3value#) )
always ( rise (eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))) -> always [0:num4temporal#] (id2 >= num3value#) )
always ( fall (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always ( id1 == num1value# -> id2 < num2value# )
always ( not ((id1 > num1value#) since [0:num3temporal#] (id2 == num2value#)) -> always [num5temporala#:num5temporalb#] (id3 > num4valuea# and id3 < num4valueb#) )
always ( rise (id1 < num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always [0:num3temporal#] (id1 > num1value# or not fall (id2 == num2value#))
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#))
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 == num1value#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( id1 == id2 or id3 == num1value# -> always [num2temporala#:num2temporalb#] (eventually (rise (id4 == id5))) )
eventually [0:num3temporal#] (id1 <= num1value# or id2 < num2value#)
always ( id1 == num1value# and id2 > num2value# -> fall (id3 == num3value#) and (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( id1 <= num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 == num3value#) and id4 == num4value# )
eventually (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == id3) )
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# and id3 == id4 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 > num1value#) -> id2 < num2value# and id3 < num3value# )
always [0:num2temporal#] (not (id1 >= num1value#))
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [num1temporala#:num1temporalb#] (not fall (id1 == id2))
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 > num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (not fall (id2 == num2value#)) )
always [0:num3temporal#] (id1 <= num1value# and id2 > num2value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 == id2) -> (id3 == num1value#) until (id4 >= num2value#) )
always [0:num2temporal#] (id1 > num1value#)
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually (id1 == num1value# and id2 > num2value#)
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually (fall (id3 == id4))) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
always ( not (once (not (id1 > num1valuea# and id1 <= num1valueb#))) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 == num1value# and rise (id2 < num2value#) -> always [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 < num1value#) or rise (id2 >= num2value#) -> not ((id3 < num3value#) until [num5temporala#:num5temporalb#] (rise (id4 == num4value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num2temporal#] (fall (id2 == id3)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id4 == num3value#)) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( id1 == num1value# and fall (id2 == num2value#) -> id3 == id4 or rise (id5 == num3value#) )
always ( id1 >= num1value# and id2 == id3 -> always [0:num3temporal#] (id4 > num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( id1 > num1value# and id2 == num2value# -> id3 == id4 and (id5 >= num3valuea# and id5 <= num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always (id1 >= num1value#)
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> always (eventually [0:num2temporal#] (rise (id4 == id5))) )
always ( id1 == num1value# or id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 <= num3value#))) )
always ( id1 == num1value# and id2 <= num2value# -> id3 > num3valuea# and id3 <= num3valueb# )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num3temporal#] (id3 == id4) )
always ( (not (id1 > num1value#)) since [0:num3temporal#] (not fall (id2 == num2value#)) -> historically [0:num5temporal#] (id3 < num4value#) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> (id2 >= num3value#) until [num4temporala#:num4temporalb#] (id3 == id4) )
always ( id1 >= num1value# or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always (not (id3 == num1value#))) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (not fall (id3 == num3value#)) )
always ( id1 == id2 or id3 == num1value# -> id4 < num2value# )
eventually (not (id1 <= num1value#))
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually (always (not (id2 <= num3value#))) )
always ( id1 == id2 or rise (id3 >= num1value#) -> eventually (always [0:num3temporal#] (id4 > num2valuea# and id4 <= num2valueb#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 > num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
eventually [0:num2temporal#] (id1 >= num1value# or id2 == id3)
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until (id3 <= num3value#) )
always (id1 <= num1value#)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num3temporal#] (not (id1 <= num1value#) or id2 == num2value#)
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 < num1value#) -> rise (once [0:num3temporal#] (id2 <= num2value#)) )
always (id1 > num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#) -> (id3 < num3value#) until (fall (id4 == num4value#)) )
always ( rise (once (id1 < num1value#)) -> (id2 == id3) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( not (historically [0:num2temporal#] (not fall (id1 == num1value#))) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (not (id2 < num2value#)) -> (id3 < num4value#) until [num5temporala#:num5temporalb#] (rise (id4 == id5)) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
eventually (not (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 > num2value#))
eventually (id1 <= num1value#)
eventually [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( rise (id1 == num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> eventually (rise (id3 < num3value#)) )
always (id1 == id2)
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 >= num1value#) -> always (eventually [num2temporala#:num2temporalb#] (rise (id2 == id3))) )
eventually [0:num3temporal#] (id1 >= num1value# and not (id2 == num2value#))
always ( id1 == num1value# -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 >= num1value# -> always [num3temporala#:num3temporalb#] (eventually (not (id2 <= num2value#))) )
always ( not (once [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))) -> always (eventually (rise (id2 < num3value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> eventually (not (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 <= num2value#) )
eventually (id1 > num1value# and id2 == num2value#)
always [0:num3temporal#] (id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 and rise (id3 >= num1valuea# and id3 < num1valueb#) -> once [num3temporala#:num3temporalb#] (id4 >= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( not (id1 < num1value#) and rise (id2 <= num2value#) -> id3 >= num3value# and id4 <= num4value# )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( fall (eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)) -> not ((id2 >= num3value#) until [0:num5temporal#] (not (id3 == num4value#))) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> not (id2 >= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always (id1 > num1value#)
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (fall (id2 == id3))) )
always ( not (historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> always (eventually [num4temporala#:num4temporalb#] (fall (id2 > num3valuea# and id2 <= num3valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num3temporal#] (fall (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value#)
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always [0:num2temporal#] (not (id1 <= num1value#))
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value#)
always ( rise (id1 < num1value#) -> eventually (not (id2 < num2value#)) )
always ( once [0:num2temporal#] (id1 >= num1value#) -> not ((id2 > num3value#) until [0:num4temporal#] (id3 == id4)) )
eventually (not (id1 == num1value#) and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (historically [num2temporala#:num2temporalb#] (not (id1 >= num1value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always [num3temporala#:num3temporalb#] (not (id1 == num1value#) or id2 <= num2value#)
always ( rise (id1 > num1value#) or id2 <= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( id1 >= num1value# and id2 >= num2value# -> id3 == num3value# )
always [0:num1temporal#] (id1 == id2)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id2 >= num2value#))) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( once [0:num2temporal#] (rise (id1 < num1value#)) -> eventually [num4temporala#:num4temporalb#] (always (not (id2 < num3value#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#) and id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 == num2value#) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 >= num3value#)) )
eventually [0:num3temporal#] (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 or id3 >= num1value# -> (id4 <= num2value#) until [0:num4temporal#] (rise (id5 <= num3value#)) )
always [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 < num1value#) -> not fall (id2 == id3) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always (not fall (id1 == num1value#))
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> id3 == id4 )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num5temporal#] (id3 == num4value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 < num1value#) -> id2 == id3 )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (always [0:num2temporal#] (id1 < num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not rise (id2 == id3))) )
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 <= num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( not (once (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num3temporal#] (id2 <= num2value#) )
eventually (not rise (id1 == id2))
always ( eventually [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually (rise (id3 > num2valuea# and id3 < num2valueb#))) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 > num2value#)
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
eventually [0:num2temporal#] (id1 == id2 and not rise (id3 > num1valuea# and id3 < num1valueb#))
eventually [0:num1temporal#] (not (id1 == id2))
eventually [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> eventually (id2 > num2value#) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( id1 <= num1value# and id2 > num2value# -> id3 < num3value# )
always (id1 == id2 or id3 == num1value#)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num4temporal#] (id2 == num3value#) )
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 <= num1value#) -> not (eventually (not (id2 > num2value#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 < num1value# and not (id2 > num2valuea# and id2 <= num2valueb#) -> once [0:num3temporal#] (id3 == id4) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> always [num3temporala#:num3temporalb#] (eventually (id5 < num2value#)) )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( id1 == num1value# or id2 >= num2value# -> (not fall (id3 == num3value#)) until (id4 > num4valuea# and id4 < num4valueb#) )
always ( not (once [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 == num3value#))) )
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and not (id2 < num2value#))
always ( id1 == id2 or id3 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 == num2value#))) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( id1 == num1value# and fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( fall (id1 == num1value#) and id2 <= num2value# -> not (id3 >= num3value#) )
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) and id3 <= num3value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( not rise ((id1 >= num1valuea# and id1 <= num1valueb#) since (fall (id2 == id3))) -> always (id4 <= num2value#) )
always ( rise (id1 == num1value#) -> rise (once (rise (id2 > num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 == id2) -> id3 < num1value# and not fall (id4 >= num2value#) )
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 <= num1value#) and id2 >= num2value# -> rise (id3 == num3value#) )
always ( id1 == num1value# or id2 > num2value# -> rise (always [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( once [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually (rise (id1 < num1value#) or rise (id2 == num2value#))
eventually [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> (not (id3 <= num1value#)) until [num3temporala#:num3temporalb#] (not fall (id4 >= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( eventually (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 or not (id3 == num1value#) -> rise (id4 > num2value#) or id5 == num3value# )
always ( id1 == num1value# and id2 >= num2value# -> id3 == id4 )
always [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (id1 >= num1value#)
always ( not (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> always [0:num4temporal#] (id2 == num3value#) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (rise (id3 >= num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (historically [0:num2temporal#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( rise (id1 == num1value#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 > num3value#) )
always ( (not (id1 >= num1valuea# and id1 < num1valueb#)) until [0:num3temporal#] (id2 >= num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 < num4value#))) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 < num1value# or id2 < num2value# -> not (id3 <= num3value#) )
always ( rise (id1 < num1value#) or id2 > num2value# -> id3 == id4 )
always ( (id1 > num1value#) since (id2 < num2value#) -> eventually (always (id3 == num3value#)) )
always ( rise (id1 == id2) -> eventually (always [0:num1temporal#] (not rise (id3 == id4))) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( fall (id1 == id2) -> eventually (always (id3 >= num1valuea# and id3 <= num1valueb#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) since [0:num4temporal#] (id3 <= num3value#) )
always [0:num2temporal#] (id1 < num1value# and not (id2 == id3))
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == num1value#) -> always (eventually (rise (id2 >= num2value#))) )
always ( id1 == id2 -> id3 == num1value# )
always ( historically [0:num2temporal#] (not fall (id1 > num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 < num3value#))) )
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
eventually [0:num1temporal#] (rise (id1 == id2))
always ( id1 == id2 or fall (id3 == num1value#) -> always [0:num3temporal#] (id4 < num2value#) )
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 == num3value#) )
always ( rise (id1 < num1value#) -> always (eventually [0:num2temporal#] (rise (id2 == id3))) )
always (id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 < num1value# and id2 >= num2value# -> always [0:num3temporal#] (not (id3 == id4)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (not (id3 == id4))) )
eventually [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == num1value# -> id2 < num2value# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always [0:num1temporal#] (id1 == id2)
always ( once [0:num2temporal#] (id1 > num1value#) -> eventually (always [0:num4temporal#] (id2 <= num3value#)) )
always ( id1 < num1value# -> (id2 <= num2value#) until [0:num4temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 == num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (rise (id3 == num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually (id1 == id2 or id3 <= num1value#)
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (not (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> once [num3temporala#:num3temporalb#] (id2 < num2value#) )
always [num1temporala#:num1temporalb#] (not (id1 == id2))
always [0:num2temporal#] (id1 == num1value#)
always ( not (id1 > num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> (not (id3 > num3value#)) since [num5temporala#:num5temporalb#] (rise (id4 >= num4value#)) )
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (not fall (id2 == id3)) )
always ( rise (id1 == num1value#) -> not ((id2 >= num2value#) until (id3 == num3value#)) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 == num2value#)
always [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( id1 < num1value# -> rise (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 == num1value#) -> always (not (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 <= num2value#)) until [0:num4temporal#] (rise (id3 < num3value#)) )
always [0:num3temporal#] (id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( (not (id1 <= num1value#)) until [num3temporala#:num3temporalb#] (not (id2 >= num2value#)) -> eventually [0:num5temporal#] (fall (id3 == num4value#)) )
always ( rise (id1 > num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( rise (id1 == id2) -> always (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 >= num1value#) -> not (id2 == num2value#) )
eventually (id1 == id2 and id3 > num1value#)
always ( not ((id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 > num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 == num4value#)) )
always (not rise (id1 == id2) and id3 <= num1value#)
always ( id1 > num1value# and rise (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not (id1 == id2) and id3 == num1value# -> id4 == id5 and id6 < num2value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (id2 <= num2value#)) )
always ( fall (id1 == id2) -> id3 == num1value# and rise (id4 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (fall (id2 == id3))) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
eventually (id1 < num1value# or id2 < num2value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( not fall (always (id1 <= num1value#)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == id2 -> rise (id3 > num1value#) )
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num4temporala#:num4temporalb#] (id3 > num3value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 > num2value#)
always ( id1 == id2 or rise (id3 <= num1value#) -> id4 == num2value# and id5 >= num3value# )
always (id1 == num1value# or id2 < num2value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( id1 > num1value# and id2 >= num2value# -> (id3 > num3value#) until [0:num4temporal#] (rise (id4 == id5)) )
always ( fall (id1 == num1value#) -> fall (id2 >= num2valuea# and id2 < num2valueb#) or rise (id3 > num3value#) )
always ( rise (id1 <= num1value#) and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (id4 == num2value#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 == id2) -> (id3 == id4) until [num2temporala#:num2temporalb#] (id5 == num1value#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> not ((id3 <= num3value#) since (id4 == num4value#)) )
always ( id1 > num1value# and rise (id2 <= num2value#) -> id3 >= num3value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value# and id2 == id3)
always ( id1 < num1value# or rise (id2 > num2value#) -> always [0:num4temporal#] (id3 > num3value#) )
always ( fall (id1 == num1value#) -> (id2 <= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 < num1value# )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [0:num3temporal#] (id1 > num1value# and not (id2 >= num2value#))
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 >= num2value#)
always ( rise (id1 > num1value#) -> historically (id2 < num2value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 > num1value# or id2 >= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually (id3 == num1value#)) )
always ( rise (id1 > num1value#) -> not (id2 < num2value#) )
always [0:num1temporal#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#)) )
always ( id1 == id2 or rise (id3 <= num1value#) -> eventually [0:num3temporal#] (id4 == num2value#) )
always ( fall (id1 == id2) -> not fall ((not (id3 < num1value#)) until [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( rise (id1 > num1value#) -> rise ((id2 > num2valuea# and id2 < num2valueb#) until (not (id3 > num3value#))) )
always ( not (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (not (id4 > num2valuea# and id4 < num2valueb#)) )
always ( id1 >= num1value# -> eventually [0:num2temporal#] (rise (id2 == id3)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 > num2value#))
always ( rise (id1 <= num1value#) -> not (once [0:num3temporal#] (id2 > num2value#)) )
always [0:num1temporal#] (id1 == id2)
eventually [0:num3temporal#] (id1 <= num1value# and id2 < num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
always ( (id1 < num1value#) since (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( id1 >= num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3value#) )
always ( fall (id1 == id2) -> once (id3 == num1value#) )
always ( rise (id1 > num1value#) -> (not (id2 >= num2value#)) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 < num1valueb#))
always ( id1 == num1value# and id2 == num2value# -> not rise (id3 > num3value#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 or not fall (id5 >= num3valuea# and id5 <= num3valueb#) )
always ( id1 == id2 and rise (id3 == num1value#) -> always (not (id4 == num2value#)) )
eventually (id1 > num1value# and id2 <= num2value#)
always [0:num3temporal#] (not (id1 == num1value#) and id2 >= num2value#)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( not rise (id1 > num1value#) -> not (id2 == id3) )
always ( rise (id1 == num1value#) -> rise ((id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == num3value#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually (not (id1 <= num1value#))
always ( id1 == num1value# and id2 == id3 -> (id4 >= num2valuea# and id4 <= num2valueb#) and fall (id5 == num3value#) )
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> (id2 < num2value#) until [0:num4temporal#] (not rise (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> once [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 < num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 < num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
eventually (fall (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num3temporal#] (id1 >= num1value# or rise (id2 == num2value#))
always ( historically [0:num1temporal#] (id1 == id2) -> always (eventually (fall (id3 == num2value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == id2 or rise (id3 <= num1value#) -> (not (id4 > num2value#)) since [0:num4temporal#] (id5 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#) -> eventually [0:num4temporal#] (always (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> not rise (eventually (id2 <= num2value#)) )
eventually [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( not (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( not rise (once [0:num2temporal#] (not (id1 == num1value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 > num1value#) -> (not (id2 <= num2value#)) since [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( (id1 == id2) since [0:num2temporal#] (id3 >= num1value#) -> (not rise (id4 == id5)) until [0:num4temporal#] (not (id6 < num3value#)) )
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id4 < num2value#)) )
always ( always [0:num2temporal#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 < num3value#)) )
always ( id1 < num1value# or id2 == id3 -> eventually [0:num3temporal#] (id4 > num2value#) )
always ( historically (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1value# and rise (id2 > num2valuea# and id2 <= num2valueb#) -> not (id3 < num3value#) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 < num2value# -> once (id3 == id4) )
always ( rise (id1 > num1value#) or id2 == num2value# -> id3 == id4 )
always ( not rise (id1 > num1value#) or id2 >= num2value# -> always (eventually [num4temporala#:num4temporalb#] (rise (id3 == num3value#))) )
always ( id1 == id2 or id3 == id4 -> fall (id5 == num1value#) )
always (not fall (id1 >= num1value#) or id2 == num2value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> (id2 < num3value#) until [num4temporala#:num4temporalb#] (not fall (id3 == id4)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( not (id1 >= num1value#) and id2 > num2value# -> id3 == num3value# or rise (id4 > num4value#) )
always ( rise (id1 > num1value#) and id2 >= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
eventually (id1 <= num1value# and id2 <= num2value#)
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 <= num1value# and fall (id2 > num2valuea# and id2 <= num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( fall (id1 == num1value#) or fall (id2 == num2value#) -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
eventually (id1 == id2)
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 < num1value#) -> (id2 < num2value#) since [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) until [num3temporala#:num3temporalb#] (id2 >= num2value#)) -> (not rise (id3 == id4)) until [num5temporala#:num5temporalb#] (id5 == num4value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3value#) until (id4 < num4value#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
eventually (id1 >= num1value# and id2 == id3)
always ( id1 > num1value# or not fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually (id3 <= num3value#) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually (id3 == num3value#) )
always ( fall (id1 == num1value#) -> eventually (rise (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3 -> id4 >= num2value# )
always ( once (id1 >= num1value#) -> always (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num1temporal#] (id1 == id2)
always (not (id1 >= num1value#) and not (id2 >= num2value#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( id1 <= num1value# or id2 == num2value# -> always [0:num4temporal#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( once [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( id1 <= num1value# or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2value#)) )
eventually [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
always ( fall (id1 == num1value#) -> id2 > num2value# and id3 == num3value# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( fall (id1 == num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always (not (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (fall (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually (id2 > num3valuea# and id2 < num3valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 == num1value#) -> once [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 <= num1value#) -> rise (id2 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( rise (id1 >= num1value#) -> eventually (id2 >= num2value#) )
always [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always (id1 > num1value#)
always ( id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always (eventually [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> not (id3 <= num1value#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> rise (id2 < num2value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> always (eventually [num5temporala#:num5temporalb#] (id3 > num4value#)) )
eventually [0:num1temporal#] (fall (id1 == id2))
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( id1 >= num1value# or fall (id2 == num2value#) -> not (id3 >= num3value#) or id4 == id5 )
always ( not (always [num2temporala#:num2temporalb#] (id1 > num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
always ( fall (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (id4 >= num2value#) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
eventually [0:num2temporal#] (not fall (id1 >= num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> id3 == num3value# or id4 < num4value# )
always ( id1 == num1value# and not rise (id2 > num2valuea# and id2 < num2valueb#) -> not (always (id3 < num3value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( (id1 > num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> not fall (id3 == num1value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
always [0:num3temporal#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 <= num1value#)
always ( historically (not (id1 >= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually (fall (id1 > num1valuea# and id1 < num1valueb#))
eventually (id1 > num1value# and id2 < num2value#)
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (not (id2 > num2value#))) )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 == num1value#) )
always ( id1 == num1value# and not fall (id2 >= num2value#) -> historically [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [0:num1temporal#] (rise (id1 == id2))
always (id1 <= num1value# or id2 == num2value#)
always ( id1 == num1value# or id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#))
always ( id1 > num1value# or id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
always ( id1 >= num1value# -> not rise (always [0:num2temporal#] (id2 == id3)) )
always ( id1 < num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 > num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( rise (id1 >= num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 )
eventually (not (id1 < num1value#) and not rise (id2 == id3))
always ( id1 == id2 -> (not (id3 >= num1valuea# and id3 <= num1valueb#)) until [num3temporala#:num3temporalb#] (fall (id4 == num2value#)) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( id1 > num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> id4 == num2value# and id5 <= num3value# )
always (not fall (id1 == num1value#) and id2 < num2value#)
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( historically (id1 >= num1value#) -> (id2 > num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3value#) )
always (id1 == id2)
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == id2 -> not (eventually [0:num2temporal#] (rise (id3 > num1value#))) )
always ( id1 <= num1value# and rise (id2 < num2value#) -> fall (id3 == num3value#) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> fall ((id2 >= num2valuea# and id2 <= num2valueb#) until (not rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( id1 == num1value# -> (not fall (id2 > num2valuea# and id2 < num2valueb#)) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always ( not (once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( id1 == num1value# and id2 == num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 >= num1value# and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) or not (id2 == id3))
always ( id1 <= num1value# -> id2 >= num2value# )
always ( id1 == num1value# and id2 == id3 -> id4 == id5 )
always ( once (id1 == num1value#) -> (id2 <= num2value#) until (fall (id3 == id4)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 < num1value#))) )
always ( fall (id1 == num1value#) -> id2 == num2value# and not fall (id3 == num3value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> not (historically [num4temporala#:num4temporalb#] (id3 == num3value#)) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2value#))) )
always ( rise (id1 < num1value#) -> eventually [num2temporala#:num2temporalb#] (always (not (id2 == id3))) )
always [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (rise (id3 > num3value#)) )
always ( id1 <= num1value# -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 or id3 == id4 -> once [0:num2temporal#] (id5 >= num1valuea# and id5 <= num1valueb#) )
always (id1 == id2)
always ( rise (id1 == id2) -> not (id3 < num1value#) and rise (id4 >= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#) )
always [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( not (id1 >= num1value#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
always ( id1 == id2 -> id3 < num1value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> not (id2 == id3) )
always ( rise (id1 == id2) -> id3 == num1value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# and id3 == num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not rise (id2 > num2value#) -> always [0:num3temporal#] (id3 == id4) )
always ( fall (id1 == id2) -> not ((id3 <= num1value#) since [num2temporala#:num2temporalb#] (id4 == id5)) )
always ( rise (id1 <= num1value#) -> not (id2 < num2value#) )
always ( id1 >= num1value# and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) until [0:num3temporal#] (id2 > num2value#) -> always [num5temporala#:num5temporalb#] (eventually [0:num6temporal#] (id3 == num4value#)) )
always ( id1 <= num1value# and not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always (id3 < num3value#)) )
always [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num2temporal#] (rise (id1 > num1value#) or id2 == id3)
always ( id1 <= num1value# and rise (id2 == num2value#) -> id3 == id4 )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually (rise (id1 == num1value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) since [0:num3temporal#] (not (id3 == id4)) )
always ( not (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 < num2valueb#) or id3 == id4 )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 < num1value#) )
always ( fall (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( always [0:num2temporal#] (id1 >= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and not (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( fall (id1 == id2) -> historically (id3 >= num1valuea# and id3 <= num1valueb#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == num1value# or id2 <= num2value# -> always (eventually [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 > num2valuea# and id2 < num2valueb#)) until (not (id3 >= num3value#)) )
always ( rise (historically [0:num2temporal#] (id1 == num1value#)) -> eventually (rise (id2 < num3value#)) )
always ( fall (id1 == num1value#) -> eventually (id2 == num2value#) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) or id2 == id3 -> always (eventually (rise (id4 < num2value#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and id2 == id3 -> id4 == num2value# )
always ( rise (id1 == id2) -> eventually (id3 > num1valuea# and id3 < num1valueb#) )
always ( fall (id1 == id2) -> not (always [0:num2temporal#] (id3 >= num1value#)) )
always ( not fall (eventually [num1temporala#:num1temporalb#] (id1 == id2)) -> (id3 < num2value#) until (id4 > num3value#) )
always ( id1 == id2 or not (id3 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 >= num2value#)) )
always ( id1 >= num1value# and id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 < num2value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( fall (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
eventually (id1 > num1value#)
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until (id3 == id4) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually (id2 <= num2value#)) )
always [num3temporala#:num3temporalb#] (not (id1 == num1value#) and not rise (id2 >= num2value#))
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( (id1 >= num1value#) since [0:num2temporal#] (fall (id2 == id3)) -> always (not (id4 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall ((id2 == id3) until (rise (id4 > num2valuea# and id4 < num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == id2) -> id3 <= num1value# or not (id4 > num2value#) )
always ( not (once [0:num2temporal#] (id1 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3value#)) )
always ( fall (id1 == id2) -> not (id3 == id4) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( not (id1 < num1value#) or id2 == id3 -> not fall (always (id4 > num2value#)) )
always ( id1 == num1value# -> id2 == num2value# )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1value# -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( id1 == id2 -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( fall (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( once [0:num2temporal#] (id1 > num1value#) -> eventually (id2 > num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 == num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually (id1 == id2)
always ( eventually [num2temporala#:num2temporalb#] (id1 >= num1value#) -> (id2 == id3) until [0:num4temporal#] (id4 >= num3value#) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always (not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == id2) -> id3 >= num1value# )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) -> eventually (id2 > num2value#) )
always (id1 >= num1value# and id2 < num2value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 == num1value#)
always (not (id1 == id2))
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 < num1valueb#) )
always ( (id1 <= num1value#) until [0:num2temporal#] (not (id2 == id3)) -> not rise ((id4 == num3value#) until [num5temporala#:num5temporalb#] (id5 <= num4value#)) )
always ( rise (id1 > num1value#) or id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id2 == num2value#))) )
always ( id1 <= num1value# or rise (id2 >= num2value#) -> id3 <= num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 >= num1value# or id2 < num2value# -> id3 == num3value# )
always ( id1 == id2 and id3 > num1value# -> id4 > num2value# )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always (id1 <= num1value# and id2 == id3)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( id1 == id2 and rise (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 == id5 )
always (id1 == num1value# and id2 == id3)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (id2 < num3value#) )
always ( id1 == id2 or id3 > num1value# -> id4 > num2value# )
always ( rise (id1 <= num1value#) -> id2 == id3 )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 == id3)) until (not (id4 < num2value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
always [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( (id1 >= num1value#) since (not (id2 == num2value#)) -> (id3 >= num3value#) until (id4 == id5) )
always ( id1 == num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 >= num2value#))) )
always ( rise (id1 < num1value#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 > num1value#) -> (id2 == id3) until (id4 == num2value#) )
always ( (id1 >= num1value#) since (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 < num1value#) -> (id2 == id3) until [0:num2temporal#] (id4 == id5) )
always ( (not (id1 == id2)) until (id3 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 >= num2valuea# and id4 < num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 < num2value#)
always ( id1 == num1value# -> not (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( id1 > num1value# and id2 == num2value# -> eventually [0:num4temporal#] (id3 < num3value#) )
eventually [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( id1 == id2 or id3 > num1value# -> fall ((id4 == id5) since [0:num3temporal#] (not (id6 < num2value#))) )
always ( id1 >= num1value# or not (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( fall (id1 == num1value#) -> id2 == num2value# and not (id3 <= num3value#) )
always ( rise (id1 >= num1value#) -> not (id2 <= num2value#) )
always ( not ((id1 == num1value#) since [0:num3temporal#] (id2 > num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always ( not (id1 == num1value#) -> id2 == id3 and id4 == id5 )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( (id1 >= num1value#) until (id2 == num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) since (id4 < num4value#) )
always ( not fall (id1 > num1value#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
eventually (rise (id1 < num1value#))
always [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always ( rise (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == num1value# -> not fall ((id2 <= num2value#) until (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> not rise ((id3 >= num1value#) until [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 <= num2value# or not fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( (id1 >= num1value#) until (id2 == num2value#) -> eventually (always (id3 < num3value#)) )
always (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> (id2 > num2value#) until [0:num4temporal#] (not (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( rise (id1 == id2) -> not ((id3 > num1value#) until (id4 == num2value#)) )
always ( rise (id1 == id2) -> always (not (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( (id1 == num1value#) until [0:num3temporal#] (rise (id2 <= num2value#)) -> not (eventually [0:num4temporal#] (not rise (id3 == id4))) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id4 >= num2value#))) )
always ( rise (id1 < num1value#) -> id2 > num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> not (eventually [num4temporala#:num4temporalb#] (id2 > num3value#)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 >= num2value#)
always ( id1 < num1value# -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> id3 <= num1value# or id4 == id5 )
eventually [0:num3temporal#] (not (id1 <= num1value#) or not (id2 < num2value#))
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
eventually (rise (id1 > num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise ((not fall (id1 == num1value#)) since [0:num2temporal#] (id2 == id3)) -> not rise (eventually [num4temporala#:num4temporalb#] (rise (id4 >= num3value#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 >= num1value# and rise (id2 < num2value#) -> not (eventually [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num1temporal#] (rise (id1 == id2))
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 < num1value# and id2 >= num2value# -> always (eventually [0:num4temporal#] (id3 < num3value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
eventually [0:num3temporal#] (fall (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> always (eventually (rise (id2 <= num2value#))) )
always ( not rise (historically [0:num2temporal#] (id1 <= num1value#)) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == id3)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( not (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#) -> eventually (always (not (id3 <= num3value#))) )
always ( rise (id1 > num1value#) -> not ((not (id2 <= num2value#)) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> always (id3 > num3value#) )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> not (historically (id2 == id3)) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (rise (id1 >= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) -> historically [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or not (id2 < num2value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 >= num3value#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( not (historically [0:num1temporal#] (id1 == id2)) -> not (eventually [0:num3temporal#] (rise (id3 < num2value#))) )
always ( id1 < num1value# or rise (id2 < num2value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 <= num3value#))) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == id3 -> historically [0:num2temporal#] (not (id4 == id5)) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1value#) -> not ((not (id2 >= num2valuea# and id2 <= num2valueb#)) until [0:num3temporal#] (fall (id3 == id4))) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and id2 == num2value#)
always ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (rise (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 and id4 <= num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( (id1 == id2) until (rise (id3 == num1value#)) -> (id4 == id5) since [0:num3temporal#] (id6 > num2valuea# and id6 < num2valueb#) )
always [num2temporala#:num2temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always [0:num3temporal#] (not (id1 == num1value#) or id2 <= num2value#)
always ( rise (id1 <= num1value#) -> (not (id2 == num2value#)) until (id3 == num3value#) )
always ( id1 == id2 -> not (historically [0:num2temporal#] (id3 >= num1value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 > num2value#) or id3 >= num3value# )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id2 <= num3value#))) )
always [0:num1temporal#] (not (id1 == id2))
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (fall (id2 == id3))) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (fall (id3 == num1value#))) )
always ( rise (id1 >= num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always ( not ((not fall (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) -> historically (id3 >= num4value#) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always (id1 > num1value#)
always [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
eventually [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( historically (id1 == num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (once (not fall (id1 == num1value#))) -> always (id2 >= num2value#) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 > num1value# or not fall (id2 == id3) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id4 == id5)) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num3temporal#] (rise (id1 > num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always ( not fall (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 > num2value#))) )
always ( id1 == id2 -> id3 >= num1value# )
always ( eventually [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 >= num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always (not rise (id1 == id2) and id3 >= num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 == num1value# -> rise (id2 < num2value#) )
always ( (id1 == id2) since [0:num2temporal#] (id3 < num1value#) -> once [0:num4temporal#] (id4 > num3valuea# and id4 < num3valueb#) )
eventually [0:num3temporal#] (id1 <= num1value# or id2 < num2value#)
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) or rise (id2 >= num2value#))
always ( rise (id1 < num1value#) -> once [0:num2temporal#] (not (id2 == id3)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 < num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
eventually [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( not fall (id1 > num1value#) and id2 == id3 -> id4 <= num2value# )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 == id2) -> (id3 == id4) until [0:num2temporal#] (id5 > num1valuea# and id5 < num1valueb#) )
always ( rise (id1 == id2) -> rise (id3 == num1value#) )
always ( id1 <= num1value# -> id2 >= num2value# )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always (id1 == num1value# and id2 <= num2value#)
always ( historically [0:num1temporal#] (id1 == id2) -> rise (always [0:num3temporal#] (not (id3 > num2valuea# and id3 <= num2valueb#))) )
eventually [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always [0:num3temporal#] (id1 <= num1value# and id2 <= num2value#)
always ( not (id1 < num1value#) and id2 == id3 -> always [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always (id1 == id2 or not (id3 == num1value#))
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 >= num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( not ((id1 == id2) since [0:num2temporal#] (fall (id3 == num1value#))) -> rise (always [num4temporala#:num4temporalb#] (id4 > num3valuea# and id4 <= num3valueb#)) )
always (not (id1 == num1value#) and not rise (id2 == num2value#))
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
eventually (id1 == id2 or rise (id3 > num1valuea# and id3 < num1valueb#))
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 < num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (id3 > num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> id3 > num3value# )
always ( id1 == id2 or id3 >= num1value# -> eventually (id4 <= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) and not fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# and id4 == num4value# )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( id1 == num1value# or not fall (id2 == id3) -> id4 > num2valuea# and id4 < num2valueb# )
always ( fall (id1 == id2) -> (id3 >= num1value#) until (rise (id4 == num2value#)) )
always ( id1 > num1value# and id2 > num2value# -> always (id3 == num3value#) )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always [0:num2temporal#] (not fall (id1 > num1value#))
always ( rise (id1 == num1value#) -> not fall (always [0:num3temporal#] (id2 < num2value#)) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 <= num2value#)
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 > num1value#) or rise (id2 == num2value#) -> id3 <= num3value# )
always ( rise (id1 > num1value#) -> not (id2 == num2value#) )
always ( fall (id1 == id2) -> not (always [num2temporala#:num2temporalb#] (id3 == num1value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( not (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num3temporal#] (fall (id3 == id4)) )
always ( rise (id1 >= num1value#) and id2 <= num2value# -> always [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 <= num2value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num3temporal#] (rise (id1 >= num1value#) and not (id2 > num2value#))
always ( id1 == num1value# and not (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( id1 == id2 -> id3 == id4 )
always ( id1 == num1value# or id2 >= num2value# -> always (id3 == num3value#) )
always ( rise (id1 >= num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (not (id1 < num1value#) and id2 <= num2value#)
always ( not (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (id2 == num3value#) )
always ( id1 == id2 and not (id3 == num1value#) -> id4 <= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
eventually (id1 == id2)
always ( id1 == id2 -> (id3 >= num1value#) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always (id1 < num1value# and id2 == num2value#)
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 < num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 <= num2value#)) since (rise (id3 == id4)) )
always ( id1 >= num1value# or id2 <= num2value# -> once [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always ( always (id1 == num1value#) -> once [0:num3temporal#] (id2 < num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> id2 <= num2value# and fall (id3 == num3value#) )
always ( not (id1 == num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 == num3value#) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (not rise (id2 == num2value#)) )
always [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 > num1value#) )
always ( historically [0:num2temporal#] (not fall (id1 >= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( not (once [num2temporala#:num2temporalb#] (id1 == num1value#)) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( not (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# -> id2 <= num2value# )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> not (id3 == id4) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually (id1 > num1value# or id2 < num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num2temporal#] (id2 == id3) )
eventually (not fall (id1 > num1value#) and id2 >= num2value#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id3 == num3value#))) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> rise ((not rise (id2 > num2value#)) until [0:num4temporal#] (id3 <= num3value#)) )
always ( id1 <= num1value# or id2 <= num2value# -> id3 < num3value# and (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( id1 <= num1value# -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (rise (id1 > num1value#) and id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) and id2 < num2value# -> id3 < num3value# and id4 == num4value# )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> rise (id2 == num2value#) and id3 > num3value# )
eventually [num3temporala#:num3temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2 and not (id3 == id4))
always ( id1 > num1value# and id2 > num2value# -> id3 == id4 )
always ( rise (id1 <= num1value#) -> id2 >= num2value# and fall (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 > num3value#)) )
always [0:num1temporal#] (not (id1 == id2) and id3 == id4)
always ( id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
eventually (id1 == num1value#)
always ( id1 == id2 and not (id3 == num1value#) -> id4 == id5 )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 == id2) -> id3 <= num1value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (not (id1 <= num1value#)) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num5temporal#] (id3 >= num4valuea# and id3 <= num4valueb#) )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually (id3 >= num1value#)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 > num1value# and rise (id2 > num2value#) -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
always ( fall (id1 == id2) -> not (eventually [0:num1temporal#] (id3 == id4)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) and not (id2 > num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# or not (id3 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> (id2 > num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#) -> eventually [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( id1 == num1value# -> always (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> rise (eventually [num3temporala#:num3temporalb#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> (id2 == id3) until [0:num3temporal#] (rise (id4 > num2valuea# and id4 < num2valueb#)) )
always ( (id1 > num1value#) since [0:num2temporal#] (id2 == id3) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 == num3value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
eventually (not (id1 == num1value#) or id2 <= num2value#)
eventually (id1 < num1value# and rise (id2 < num2value#))
always ( rise (id1 <= num1value#) or id2 == num2value# -> rise (id3 < num3value#) )
always ( id1 == num1value# or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( not fall (id1 >= num1value#) and not (id2 > num2value#) -> (id3 > num3valuea# and id3 < num3valueb#) until [num5temporala#:num5temporalb#] (id4 < num4value#) )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> (not (id2 <= num2value#)) until (id3 <= num3value#) )
always ( (id1 > num1value#) until [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 < num2valueb#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 == num4value#)) )
always ( rise (id1 > num1value#) -> not (eventually (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not fall ((id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == id4)) )
always ( id1 == id2 and (id3 >= num1valuea# and id3 < num1valueb#) -> eventually [0:num3temporal#] (id4 < num2value#) )
always ( not ((id1 >= num1value#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) -> not ((id3 <= num4value#) until [0:num6temporal#] (id4 >= num5valuea# and id4 <= num5valueb#)) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( not (historically [0:num2temporal#] (id1 == num1value#)) -> always [0:num4temporal#] (id2 >= num3value#) )
always (not (id1 > num1value#) or id2 > num2value#)
always ( id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> fall ((id3 > num3value#) since [num5temporala#:num5temporalb#] (id4 > num4valuea# and id4 < num4valueb#)) )
always ( once (rise (id1 <= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 < num1value# and id2 <= num2value# -> always (id3 == num3value#) )
always ( not (id1 < num1value#) and rise (id2 >= num2value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [num2temporala#:num2temporalb#] (not fall (id3 == id4))) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always ( id1 == id2 or id3 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id4 < num2value#))) )
always (id1 == num1value# or id2 == id3)
always ((id1 > num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( (id1 < num1value#) since [0:num2temporal#] (id2 == id3) -> (id4 == num3value#) since (id5 == num4value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 >= num2value#) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( (id1 == num1value#) until (id2 >= num2valuea# and id2 <= num2valueb#) -> fall ((id3 == num3value#) until (id4 == id5)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and (id3 > num1valuea# and id3 <= num1valueb#))
always ( rise (id1 > num1value#) -> id2 > num2value# or (id3 > num3valuea# and id3 < num3valueb#) )
always (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) and id3 < num3value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 == num1value#)) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) and not rise (id2 == num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 >= num3value#)) )
always ( not (once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 <= num3value#)) )
always [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#))
always ( id1 <= num1value# and rise (id2 == num2value#) -> (id3 > num3value#) until [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 <= num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 == id2) -> id3 == num1value# and fall (id4 == num2value#) )
always (not (id1 < num1value#) or id2 == id3)
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# -> fall (id2 == num2value#) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num2temporala#:num2temporalb#] (fall (id2 == id3))) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 < num1value# and rise (id2 < num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (not (id3 > num3valuea# and id3 < num3valueb#))) )
eventually [0:num2temporal#] (id1 == id2 or id3 < num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 <= num1valueb#))
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( once [0:num2temporal#] (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == id3) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( id1 > num1value# -> id2 == num2value# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> eventually (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( id1 <= num1value# or rise (id2 > num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( eventually [num2temporala#:num2temporalb#] (id1 == num1value#) -> not (always (id2 == num3value#)) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> not (historically (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( rise (id1 <= num1value#) -> not (id2 == id3) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> (id2 == id3) since [0:num3temporal#] (rise (id4 >= num2value#)) )
always ( rise (id1 < num1value#) -> eventually (always (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == num1value#) -> eventually (id2 == num2value#) )
eventually (rise (id1 == id2))
always ( rise (historically (id1 >= num1valuea# and id1 <= num1valueb#)) -> (not (id2 < num2value#)) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num2temporal#] (id1 == id2 or not (id3 > num1valuea# and id3 < num1valueb#))
always ( id1 >= num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> (not (id3 <= num1value#)) until [num3temporala#:num3temporalb#] (rise (id4 == num2value#)) )
always (id1 == num1value# or id2 == id3)
always ( rise (id1 > num1value#) -> id2 < num2value# or id3 == id4 )
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> eventually (always (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 -> not (historically (id3 > num1value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# or rise (id3 == num3value#) )
eventually (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
eventually [0:num1temporal#] (rise (id1 == id2))
always ( fall (once (rise (id1 >= num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num3temporal#] (id1 <= num1value# and not (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# and id2 > num2value# -> not (always (id3 == id4)) )
eventually (rise (id1 < num1value#) and id2 > num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (eventually (rise (id2 == id3))) )
always ( rise (id1 >= num1value#) -> rise ((id2 == num2value#) until (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 < num2value#))) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) and id2 == num2value#)
always ( (not fall (id1 > num1value#)) since [num3temporala#:num3temporalb#] (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 == id4)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 == id2 and rise (id3 >= num1valuea# and id3 <= num1valueb#) -> not (id4 == num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> id2 <= num2value# or id3 == num3value# )
always ( id1 >= num1value# -> id2 <= num2value# )
always ( fall (id1 == id2) -> eventually (id3 == id4) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 < num2value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value# -> eventually (always [num4temporala#:num4temporalb#] (id3 > num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always (id1 >= num1value#)
eventually (id1 > num1value#)
always ( id1 == num1value# and not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
always (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and id4 <= num2value# )
eventually [0:num1temporal#] (id1 == id2)
always ( historically (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num1temporal#] (not (id1 == id2))
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> not ((id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always ( id1 == id2 or id3 == id4 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id5 > num1valuea# and id5 < num1valueb#))) )
always ( historically [num2temporala#:num2temporalb#] (not rise (id1 >= num1value#)) -> historically [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> not (historically [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3value#) since (id4 <= num4value#) )
always ( rise (id1 == num1value#) -> not rise (id2 == id3) and rise (id4 == num2value#) )
always ( id1 < num1value# -> not (id2 == num2value#) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
eventually [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until (fall (id3 == id4)) )
always ( rise (id1 >= num1value#) -> (id2 < num2value#) until (rise (id3 == num3value#)) )
always (id1 == id2)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 >= num2value#) -> always [0:num5temporal#] (id3 > num4value#) )
always ( (id1 == num1value#) until (rise (id2 > num2value#)) -> always [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always (id1 < num1value#)
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( historically [0:num1temporal#] (not fall (id1 == id2)) -> always (id3 > num2valuea# and id3 < num2valueb#) )
eventually [0:num3temporal#] (id1 > num1value# or id2 > num2value#)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) or id2 > num2value#)
always ( id1 == id2 or id3 <= num1value# -> id4 > num2value# )
always ( rise (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or rise (id2 < num2value#))
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#))
always ( rise (id1 == id2) -> id3 == id4 and id5 <= num1value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 > num1value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (not (id3 <= num1value#))) )
always [0:num3temporal#] (not (id1 > num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> id2 == id3 and rise (id4 < num2value#) )
always [num2temporala#:num2temporalb#] (id1 > num1value# and id2 == id3)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until [0:num3temporal#] (not fall (id2 == num2value#)) -> eventually [num5temporala#:num5temporalb#] (always [num6temporala#:num6temporalb#] (id3 == num4value#)) )
always ( id1 <= num1value# and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( once [0:num2temporal#] (not (id1 <= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3valuea# and id2 < num3valueb#))) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( not (once [0:num2temporal#] (id1 >= num1value#)) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id2 <= num3value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
always ( not (id1 >= num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 == num2value#))) )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> always [0:num3temporal#] (id3 <= num2value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 < num1value# or id2 < num2value# -> id3 == id4 )
always ( rise (id1 >= num1value#) -> id2 == id3 )
eventually [num1temporala#:num1temporalb#] (not fall (id1 == id2))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( id1 == id2 -> id3 == num1value# and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 <= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( not (id1 <= num1value#) and id2 <= num2value# -> not (id3 <= num3value#) )
always ( rise (id1 < num1value#) -> (id2 == num2value#) until [0:num3temporal#] (id3 == id4) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 >= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (not (id3 <= num4value#))) )
always ( rise (id1 == id2) -> not fall (id3 == num1value#) )
always [0:num1temporal#] (id1 == id2)
eventually [0:num1temporal#] (rise (id1 == id2))
always ( fall (id1 == num1value#) -> not ((id2 == id3) since [0:num3temporal#] (rise (id4 == num2value#))) )
always ( rise (id1 == num1value#) -> not (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until [0:num2temporal#] (id2 == id3) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (not (id4 >= num3valuea# and id4 <= num3valueb#))) )
always ( rise (id1 < num1value#) -> (id2 == id3) since (id4 < num2value#) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id2 > num2value#))) )
always ( id1 == num1value# -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 >= num3value#) )
always ( once [0:num2temporal#] (fall (id1 == num1value#)) -> (not fall (id2 > num3valuea# and id2 < num3valueb#)) since [0:num5temporal#] (id3 < num4value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> not ((id3 < num1value#) until (id4 <= num2value#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) until (id4 > num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise ((id1 == num1value#) since [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) -> always [num5temporala#:num5temporalb#] (eventually [0:num6temporal#] (rise (id3 == num4value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( id1 >= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> id2 == num2value# or id3 > num3value# )
always ( rise (id1 >= num1value#) -> eventually (always (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (rise (id2 <= num2value#))) )
always ( id1 == num1value# -> (id2 == id3) until [0:num3temporal#] (rise (id4 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (fall (id2 == num2value#)) )
eventually (rise (id1 <= num1value#) or not (id2 <= num2value#))
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> id3 <= num3value# )
always ( rise (id1 == id2) -> once [0:num1temporal#] (id3 == id4) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 > num2value#)
always ( id1 == id2 and not (id3 == num1value#) -> (id4 >= num2valuea# and id4 <= num2valueb#) since [0:num3temporal#] (id5 == id6) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# -> not ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always (id1 == num1value#)
always ( id1 < num1value# or id2 >= num2value# -> not rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always (id1 >= num1value#)
always ( historically [0:num1temporal#] (id1 == id2) -> not (always (id3 > num2valuea# and id3 < num2valueb#)) )
eventually (id1 == id2)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (not rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( always [0:num1temporal#] (not (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 > num1value#) -> not (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) )
always ( id1 > num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 < num1value# or id2 == id3 -> id4 >= num2value# )
always (not fall (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( id1 == num1value# and rise (id2 == num2value#) -> (not rise (id3 == id4)) until [0:num4temporal#] (id5 > num3valuea# and id5 < num3valueb#) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (not rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> eventually (id3 == id4) )
always ( fall (once [0:num2temporal#] (rise (id1 >= num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( id1 == id2 and id3 >= num1value# -> id4 >= num2value# and id5 == num3value# )
always ( rise (id1 > num1value#) -> id2 > num2value# and (id3 > num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (fall (id2 == id3)) )
always ( id1 > num1value# and id2 == id3 -> rise (always [num3temporala#:num3temporalb#] (id4 <= num2value#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 > num1value# and id2 > num2value# -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 > num3value#))) )
always ( not fall (once [num2temporala#:num2temporalb#] (rise (id1 < num1value#))) -> historically [0:num4temporal#] (id2 == num3value#) )
always ( fall (id1 == num1value#) -> eventually (id2 <= num2value#) )
eventually (id1 == num1value#)
always ( rise (id1 == id2) -> always (eventually [num1temporala#:num1temporalb#] (rise (id3 == id4))) )
always ( fall (id1 == num1value#) -> not (always [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( id1 <= num1value# -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
always ( id1 < num1value# or id2 > num2value# -> always (id3 <= num3value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always (not (id3 >= num3value#))) )
always ( fall (id1 == id2) -> not rise (id3 == num1value#) and not (id4 == id5) )
always ( id1 == id2 -> (id3 == num1value#) until [0:num3temporal#] (rise (id4 == num2value#)) )
always ( id1 < num1value# -> id2 < num2value# )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( not rise (id1 == id2) and rise (id3 > num1value#) -> fall (always [num3temporala#:num3temporalb#] (id4 < num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num2temporala#:num2temporalb#] (rise (id2 == id3)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id4 == num3value#)) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( once [0:num2temporal#] (id1 <= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( fall (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) since [0:num3temporal#] (id4 < num2value#) )
always ( id1 >= num1value# -> id2 > num2value# and not fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> (not rise (id2 > num2valuea# and id2 < num2valueb#)) until [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always ( fall (id1 == num1value#) -> id2 >= num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always ( once (fall (id1 == id2)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 < num1value#) or id2 == num2value# -> always [0:num4temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) or (id2 >= num2valuea# and id2 < num2valueb#) -> id3 >= num3value# and id4 <= num4value# )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> (id3 < num3value#) until [0:num5temporal#] (not (id4 == num4value#)) )
always ( id1 == id2 or id3 == id4 -> id5 < num1value# )
always ( once [num2temporala#:num2temporalb#] (rise (id1 == num1value#)) -> eventually [num4temporala#:num4temporalb#] (always (id2 >= num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# -> (id2 == id3) until [0:num3temporal#] (id4 <= num2value#) )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( id1 == id2 and id3 < num1value# -> eventually (always [0:num3temporal#] (id4 == num2value#)) )
always ( id1 >= num1value# -> id2 < num2value# )
always [num3temporala#:num3temporalb#] (id1 == num1value# or not fall (id2 >= num2value#))
always ( id1 == num1value# and id2 < num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 == id2) -> id3 >= num1value# )
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (id1 <= num1value#)
always ( not rise (id1 == num1value#) -> not ((id2 == id3) since [num2temporala#:num2temporalb#] (id4 == id5)) )
always ( not (eventually [0:num2temporal#] (not fall (id1 == num1value#))) -> eventually [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually (always [0:num3temporal#] (id3 == num2value#)) )
always ( fall (id1 == id2) -> (id3 == id4) until (id5 >= num1value#) )
always [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or not rise (id2 > num2value#))
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [0:num2temporal#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> id4 < num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == id2) -> not fall (eventually (rise (id3 == id4))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( id1 == num1value# and id2 <= num2value# -> id3 >= num3value# )
always (id1 == num1value#)
always ( fall (id1 == num1value#) -> not (id2 >= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 == id3) )
always ( rise (id1 >= num1value#) -> (id2 < num2value#) since [num4temporala#:num4temporalb#] (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( not rise (id1 > num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( fall (id1 == num1value#) and id2 == num2value# -> id3 == num3value# )
always ( id1 == num1value# and id2 >= num2value# -> id3 == num3value# )
eventually (id1 < num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == id3) -> historically (id4 == id5) )
eventually [0:num1temporal#] (rise (id1 == id2))
eventually (id1 <= num1value# and not (id2 <= num2value#))
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) or id4 < num2value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# or id2 >= num2value#)
always ( rise (id1 == id2) -> id3 == num1value# or not (id4 == num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 < num2value#)
always ( eventually [0:num2temporal#] (id1 <= num1value#) -> eventually [num4temporala#:num4temporalb#] (always (id2 >= num3valuea# and id2 < num3valueb#)) )
always ( fall (id1 == num1value#) -> once [num2temporala#:num2temporalb#] (not (id2 == id3)) )
always ( rise (id1 >= num1value#) and rise (id2 == num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always [0:num2temporal#] (not (id1 <= num1value#))
always ( rise (id1 <= num1value#) or rise (id2 > num2value#) -> not fall (id3 == num3value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# or fall (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 < num3value#))) )
eventually [0:num1temporal#] (id1 == id2)
always (not fall (id1 == num1value#) or not (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 < num3value#)) )
always ( eventually [0:num2temporal#] (id1 < num1value#) -> always [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually (id1 == num1value#)
always [0:num2temporal#] (not (id1 <= num1value#))
eventually [num2temporala#:num2temporalb#] (id1 == id2 and not fall (id3 >= num1value#))
always ( fall (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( historically (id1 == id2) -> not (eventually [num2temporala#:num2temporalb#] (rise (id3 <= num1value#))) )
always ( id1 >= num1value# and rise (id2 <= num2value#) -> id3 == id4 and rise (id5 < num3value#) )
eventually (rise (id1 == num1value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( not (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 >= num3value#) )
eventually (rise (id1 > num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always (id4 == num2value#)) )
eventually [0:num3temporal#] (id1 > num1value# and fall (id2 > num2valuea# and id2 < num2valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> not (eventually [0:num4temporal#] (rise (id2 >= num3value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# and id2 == num2value# -> (id3 > num3value#) until [0:num5temporal#] (id4 < num4value#) )
always ( id1 > num1value# or id2 >= num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == num1value#) -> historically (not (id2 == num2value#)) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( not rise (id1 > num1value#) and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (rise (id3 < num3value#)) )
always ( once [0:num1temporal#] (fall (id1 == id2)) -> not (always (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> not (eventually [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) and rise (id2 > num2value#))
always [num2temporala#:num2temporalb#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( rise (id1 <= num1value#) and id2 == id3 -> rise (id4 == num2value#) and id5 > num3value# )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 > num1value#) or rise (id2 <= num2value#) -> always (id3 <= num3value#) )
eventually (id1 == num1value#)
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually (id1 == id2 and id3 == id4)
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> always (eventually (id3 == id4)) )
always ( rise (id1 > num1value#) -> eventually (fall (id2 == num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) until [0:num3temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually [num5temporala#:num5temporalb#] (id3 == num4value#) )
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( id1 > num1value# -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always [num2temporala#:num2temporalb#] (not rise (id1 > num1value#) or id2 == id3)
always ( fall (id1 == num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( historically [0:num2temporal#] (not fall (id1 > num1value#)) -> always (id2 <= num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 == num2value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 < num1value#) since [num2temporala#:num2temporalb#] (fall (id2 == id3)) -> always [0:num4temporal#] (id4 >= num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 >= num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 >= num1value# or id2 == id3 -> id4 == num2value# and id5 == num3value# )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> (id2 >= num3valuea# and id2 <= num3valueb#) until [0:num5temporal#] (rise (id3 > num4valuea# and id3 < num4valueb#)) )
eventually (rise (id1 > num1value#) and id2 <= num2value#)
always (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 >= num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id2 == num2value#))) )
always (id1 <= num1value# or not (id2 == num2value#))
always ( rise (id1 <= num1value#) -> (id2 == id3) until [0:num2temporal#] (id4 == id5) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 < num3value#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( fall (id1 == num1value#) or id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( fall (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == id2) -> not (id3 == num1value#) and id4 < num2value# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( fall (id1 == num1value#) -> rise (id2 > num2value#) )
always [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [0:num2temporal#] (fall (id1 == num1value#) and id2 == id3)
always ( rise (id1 > num1value#) or id2 == id3 -> fall (id4 > num2valuea# and id4 < num2valueb#) and id5 > num3value# )
always ( id1 == num1value# -> id2 > num2value# )
always ( rise (id1 < num1value#) -> always (eventually (fall (id2 == num2value#))) )
always ( not (id1 < num1value#) and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3valuea# and id3 < num3valueb#) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( id1 <= num1value# or not fall (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 >= num3value#)) )
always (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> not (id2 == id3) and id4 == num2value# )
always ( rise (id1 > num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (not (id1 == num1value#) or rise (id2 > num2value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (rise (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( id1 == id2 and not (id3 == id4) -> not rise (id5 > num1value#) )
eventually (not fall (id1 >= num1value#))
always ( not (id1 >= num1value#) or (id2 > num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (not rise (id3 >= num3value#)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( not (id1 == num1value#) or id2 >= num2value# -> always [0:num4temporal#] (eventually (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 > num1value#) -> fall (eventually (not (id2 < num2value#))) )
always ( rise (id1 == id2) -> eventually (always [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> not (id3 <= num1value#) )
always ( rise ((id1 <= num1value#) until [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) -> eventually (always [0:num5temporal#] (id3 == num4value#)) )
always (id1 >= num1value#)
always ( id1 == id2 and id3 == num1value# -> (id4 > num2value#) until [0:num4temporal#] (rise (id5 >= num3value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( rise (id1 == id2) -> (not fall (id3 >= num1valuea# and id3 <= num1valueb#)) since (id4 == id5) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not (eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 == num1value# -> rise (id2 > num2value#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
eventually (id1 == id2 and rise (id3 < num1value#))
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> once [0:num3temporal#] (id3 == num2value#) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == id2) -> always (id3 == num1value#) )
always ( not rise (id1 > num1value#) or rise (id2 == num2value#) -> not fall (id3 > num3valuea# and id3 < num3valueb#) or rise (id4 < num4value#) )
always ( id1 == id2 or id3 == id4 -> id5 >= num1value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( not rise ((id1 == id2) since [0:num2temporal#] (id3 == num1value#)) -> eventually (always [0:num4temporal#] (id4 == num3value#)) )
always ( id1 < num1value# and id2 >= num2value# -> id3 < num3value# or not rise (id4 >= num4value#) )
eventually [0:num3temporal#] (not (id1 == num1value#) and (id2 >= num2valuea# and id2 < num2valueb#))
always ( not (id1 >= num1value#) or id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 >= num3valuea# and id3 <= num3valueb#) and (id4 > num4valuea# and id4 < num4valueb#) )
always ( id1 == id2 or not fall (id3 == num1value#) -> always [0:num3temporal#] (id4 >= num2value#) )
always ( rise (id1 >= num1value#) and not fall (id2 == id3) -> eventually (always [0:num3temporal#] (id4 < num2value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 > num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (not (id4 < num2value#)) )
always ( id1 > num1value# -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> not (once (id2 < num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 == num1value#))) )
always [0:num2temporal#] (id1 > num1value#)
always ( id1 == num1value# and id2 >= num2value# -> id3 > num3value# )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 == num1value#) -> fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> once (id2 == id3) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always (eventually [num3temporala#:num3temporalb#] (not (id2 >= num2value#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( eventually [0:num2temporal#] (id1 < num1value#) -> eventually [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( rise (id1 == num1value#) -> id2 < num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
eventually (id1 >= num1value#)
always ( fall (id1 == id2) -> id3 >= num1value# )
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 <= num2value#) )
always ( id1 == id2 -> id3 == id4 )
always ( historically (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#)) )
always [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (id1 >= num1value# or id2 == id3)
always ( fall (id1 == num1value#) -> not ((id2 > num2value#) until [0:num4temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( not (id1 == num1value#) and id2 >= num2value# -> always [num4temporala#:num4temporalb#] (not (id3 <= num3value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 > num1value#) -> (id2 < num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
eventually (not (id1 >= num1valuea# and id1 < num1valueb#))
always ( (not fall (id1 == id2)) since (id3 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 >= num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 > num2value#) )
always ( id1 < num1value# or id2 == num2value# -> id3 == id4 )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not (id2 < num2value#) -> rise (id3 < num3value#) and not (id4 == num4value#) )
always ( (not (id1 > num1value#)) since [num3temporala#:num3temporalb#] (id2 > num2value#) -> not fall (once (id3 <= num4value#)) )
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == id2) -> id3 == id4 )
always ( rise (id1 >= num1value#) -> eventually (always (id2 > num2value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id2 == num2value#))) )
always (not fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( historically (id1 <= num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) -> (not (id2 <= num2value#)) until (id3 <= num3value#) )
always ( rise (id1 == id2) -> id3 > num1value# and (id4 >= num2valuea# and id4 < num2valueb#) )
always ( once (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( not (id1 == num1value#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num3temporal#] (id1 <= num1value# and not (id2 > num2value#))
eventually [0:num3temporal#] (fall (id1 == num1value#) or id2 > num2value#)
always ( not (id1 > num1value#) -> always (id2 == id3) )
always ( always [0:num2temporal#] (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> (not rise (id3 == id4)) until (id5 <= num1value#) )
always ( rise (id1 == id2) -> always (not (id3 == id4)) )
eventually [0:num2temporal#] (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( rise (id1 > num1value#) -> id2 >= num2value# or fall (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 <= num1value# -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 == num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 > num1value# and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always (not (id3 <= num3value#))) )
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> rise ((not (id2 > num2value#)) since [0:num4temporal#] (rise (id3 > num3value#))) )
always ( rise (id1 <= num1value#) or id2 < num2value# -> id3 == num3value# or fall (id4 >= num4valuea# and id4 < num4valueb#) )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (not (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 <= num1value#) and fall (id2 == num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
eventually [num2temporala#:num2temporalb#] (id1 < num1value# and id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) and rise (id2 < num2value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id3 == id4))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always ( id1 > num1value# -> not (always [0:num2temporal#] (id2 == id3)) )
always ( id1 == id2 -> id3 == num1value# and id4 == num2value# )
always ( fall (id1 == num1value#) -> not (always [0:num2temporal#] (not fall (id2 == id3))) )
always (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 < num1value#) and id2 == id3 -> id4 == id5 )
always ( not (id1 < num1value#) and id2 == id3 -> id4 >= num2value# and id5 > num3value# )
eventually [0:num3temporal#] (not (id1 >= num1value#) and not (id2 >= num2value#))
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> always (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (id1 <= num1value#) and id2 == id3 -> fall (id4 == id5) )
always ( not (id1 == id2) and id3 < num1value# -> eventually (id4 < num2value#) )
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 <= num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 > num4valuea# and id3 < num4valueb#))) )
always ( id1 <= num1value# and not (id2 == num2value#) -> always (id3 < num3value#) )
always ( id1 == id2 and not (id3 == id4) -> id5 > num1value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) or rise (id2 == num2value#))
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( id1 == id2 or id3 < num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == id3) and id4 == id5 )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1value#) -> once [0:num3temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( rise (id1 > num1value#) -> not (historically [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( (id1 <= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2value#) -> eventually (always [0:num5temporal#] (id3 >= num4value#)) )
always ( rise (id1 == num1value#) -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( id1 <= num1value# and id2 == id3 -> not (always [0:num2temporal#] (id4 == id5)) )
always ( not (id1 == id2) -> id3 == num1value# )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 >= num2value#)
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( (id1 > num1value#) since (id2 > num2valuea# and id2 < num2valueb#) -> not (always [0:num4temporal#] (id3 >= num3value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 < num1value#) -> historically [num3temporala#:num3temporalb#] (not rise (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 < num1value# and not (id2 == id3))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 > num1value#) -> id2 >= num2value# or id3 == id4 )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( eventually [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#) -> not (always (not fall (id2 == num3value#))) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (not fall (id3 == num1value#)) )
always (id1 > num1value# or not fall (id2 == num2value#))
always ( (id1 < num1value#) since (id2 >= num2value#) -> always [num4temporala#:num4temporalb#] (eventually (rise (id3 == num3value#))) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) and not (id2 <= num2value#))
always ( historically (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 <= num1value#) and id2 == id3 -> once [0:num3temporal#] (fall (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( id1 == id2 and id3 == num1value# -> id4 == id5 and rise (id6 <= num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) and id2 <= num2value#)
always ( rise (id1 > num1value#) -> eventually (rise (id2 < num2value#)) )
eventually [0:num3temporal#] (rise (id1 > num1value#) or id2 == num2value#)
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always (id2 < num3value#)) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always (not fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 == id2 -> eventually (id3 == id4) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( not (id1 < num1value#) and id2 > num2value# -> id3 > num3value# )
always ( id1 > num1value# -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( fall (id1 == num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
eventually (id1 < num1value# and rise (id2 < num2value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( not ((not (id1 >= num1value#)) since [num2temporala#:num2temporalb#] (rise (id2 == id3))) -> eventually [0:num4temporal#] (id4 <= num3value#) )
always ( rise (id1 <= num1value#) -> historically [0:num3temporal#] (id2 > num2value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 == id2) -> (id3 >= num1value#) until [num3temporala#:num3temporalb#] (not (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 == id4 )
eventually (id1 > num1value# or id2 == id3)
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not rise (id1 == id2) and id3 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) and id2 == id3 -> eventually (always [num3temporala#:num3temporalb#] (id4 <= num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 == id2 -> (id3 == num1value#) until (id4 >= num2value#) )
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) )
always [0:num1temporal#] (not fall (id1 == id2))
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
eventually (fall (id1 == id2))
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> once [0:num3temporal#] (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( fall ((not (id1 > num1valuea# and id1 < num1valueb#)) since [num2temporala#:num2temporalb#] (id2 == id3)) -> (id4 >= num3value#) until [num5temporala#:num5temporalb#] (fall (id5 > num4valuea# and id5 <= num4valueb#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 >= num1value# and id2 == id3 -> always [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id2 <= num3value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 >= num1value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( once [0:num2temporal#] (rise (id1 <= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 <= num3value#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> rise ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( once (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 < num1valueb#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num3temporal#] (not rise (id1 >= num1value#) and id2 >= num2value#)
always ( rise (id1 == num1value#) or fall (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# -> id2 < num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == id2) -> id3 < num1value# and id4 <= num2value# )
always ( id1 > num1value# -> id2 < num2value# )
always ( (id1 <= num1value#) since [num3temporala#:num3temporalb#] (not fall (id2 == num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until (id3 == id4) )
always ( id1 <= num1value# or id2 > num2value# -> id3 == id4 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> always (eventually (id2 == id3)) )
always ( id1 <= num1value# -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> always (id2 == num2value#) )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( id1 < num1value# -> not (id2 == num2value#) and rise (id3 < num3value#) )
always ( not (id1 <= num1value#) and id2 < num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( once (rise (id1 >= num1value#)) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> not (always (not (id3 == id4))) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> rise (id2 == num2value#) and rise (id3 <= num3value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always [0:num1temporal#] (id1 == id2)
always (id1 == num1value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) and rise (id3 <= num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) or id2 == id3 -> not (always (id4 <= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#) -> always [num5temporala#:num5temporalb#] (id3 >= num4value#) )
always ( fall (historically [num1temporala#:num1temporalb#] (id1 == id2)) -> not ((not fall (id3 == id4)) until [num3temporala#:num3temporalb#] (rise (id5 == num2value#))) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# and id3 == num3value# )
always ( id1 == id2 -> id3 == num1value# )
always (id1 == num1value#)
always ( id1 < num1value# -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (id1 == id2) or id3 < num1value# -> (id4 == id5) until (rise (id6 == num2value#)) )
always ( id1 == id2 and not rise (id3 == id4) -> (id5 >= num1value#) until [0:num3temporal#] (rise (id6 == num2value#)) )
eventually (id1 >= num1value# and not (id2 == id3))
always ( id1 > num1valuea# and id1 <= num1valueb# -> id2 == id3 )
always ( rise (id1 < num1value#) and rise (id2 <= num2value#) -> id3 >= num3valuea# and id3 < num3valueb# )
always [0:num1temporal#] (not (id1 == id2))
eventually [num2temporala#:num2temporalb#] (id1 == id2 or rise (id3 >= num1value#))
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 == num2value#))) )
always ( id1 == id2 -> id3 >= num1value# )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always [0:num3temporal#] (not (id1 == num1value#) or id2 < num2value#)
always (id1 == num1value# and id2 > num2value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (not fall (id2 == num2value#)) )
always ( (id1 == id2) until [0:num2temporal#] (id3 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 >= num3valuea# and id4 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> id2 <= num2value# and id3 == id4 )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 == num1value#) -> id2 == id3 or id4 == id5 )
always [0:num3temporal#] (id1 <= num1value# and id2 < num2value#)
always ( (not (id1 <= num1value#)) since [0:num3temporal#] (id2 > num2value#) -> historically [num4temporala#:num4temporalb#] (id3 == id4) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( id1 >= num1value# -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( not ((id1 >= num1value#) since (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually (id3 == id4) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( id1 == id2 -> rise (id3 > num1value#) or id4 == num2value# )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 == id2 and id3 == num1value# -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( id1 == id2 or id3 == id4 -> always [num2temporala#:num2temporalb#] (id5 >= num1value#) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( id1 < num1value# or not fall (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (not fall (id3 > num3value#)) )
always (id1 == num1value# or id2 == num2value#)
always ( rise (id1 < num1value#) -> rise ((id2 == id3) until (id4 == id5)) )
always [0:num2temporal#] (not (id1 == id2) and id3 <= num1value#)
always ( id1 <= num1value# -> not (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> id3 == id4 or id5 <= num1value# )
always [0:num2temporal#] (id1 >= num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == id2) -> id3 > num1value# )
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 <= num3value#)) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [0:num3temporal#] (rise (id1 == num1value#) and rise (id2 <= num2value#))
always ( not (id1 == num1value#) and id2 == num2value# -> id3 > num3value# )
eventually (id1 >= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num3temporal#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 -> eventually [0:num2temporal#] (id3 == num1value#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (id1 == num1value# and id2 >= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#) and id2 == id3)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 == id3) )
always ( rise (id1 == id2) -> rise (id3 <= num1value#) or id4 == id5 )
always [0:num1temporal#] (not (id1 == id2))
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 > num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> always (eventually (rise (id3 < num3value#))) )
eventually (id1 < num1value# or not fall (id2 >= num2value#))
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
eventually [0:num1temporal#] (not rise (id1 == id2))
always ( id1 == num1value# or id2 >= num2value# -> id3 >= num3value# )
always (not (id1 > num1value#) and id2 >= num2value#)
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) and id3 == id4 )
always ( rise (id1 > num1value#) -> id2 <= num2value# or rise (id3 == num3value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> always [0:num3temporal#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always (not (id2 < num2value#))) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> not fall (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 == id2 -> once [0:num2temporal#] (id3 < num1value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == id3) )
always ( id1 == num1value# -> fall (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> (id2 == id3) until (id4 > num2valuea# and id4 < num2valueb#) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) or id2 >= num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
eventually [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or rise (id2 <= num2value#))
always [num3temporala#:num3temporalb#] (id1 > num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always (id1 > num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> not fall (eventually (rise (id3 >= num3value#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 >= num3value#)) )
always ( fall (id1 == num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( rise (id1 == id2) -> fall (id3 >= num1valuea# and id3 <= num1valueb#) and id4 > num2value# )
always ( once [num2temporala#:num2temporalb#] (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == id3))) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually (rise (id2 == num2value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( rise (id1 <= num1value#) and id2 < num2value# -> once [num4temporala#:num4temporalb#] (rise (id3 <= num3value#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> id2 == id3 or not fall (id4 >= num2value#) )
always ( once [0:num2temporal#] (not fall (id1 == num1value#)) -> (id2 > num3value#) until (rise (id3 == num4value#)) )
always [num3temporala#:num3temporalb#] (not (id1 >= num1value#) and not (id2 < num2value#))
always [num1temporala#:num1temporalb#] (id1 == id2 or id3 == id4)
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always [0:num2temporal#] (id1 == num1value#)
always [0:num1temporal#] (id1 == id2)
always ( not (id1 == num1value#) -> once [num3temporala#:num3temporalb#] (id2 < num2value#) )
always (not (id1 == num1value#) and id2 >= num2value#)
always ( rise (id1 < num1value#) and id2 <= num2value# -> always (id3 > num3value#) )
always ( not (id1 >= num1value#) or id2 == num2value# -> not rise (always (id3 == id4)) )
eventually (id1 > num1value#)
always (not fall (id1 > num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == id2 -> eventually [0:num1temporal#] (id3 == id4) )
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( not (once [0:num1temporal#] (rise (id1 == id2))) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == num2value#))) )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == id5)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> once [0:num3temporal#] (not (id4 == num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 > num2value#))
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> historically (id2 <= num2value#) )
always ( (id1 > num1value#) since [num2temporala#:num2temporalb#] (id2 == id3) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id4 == num3value#))) )
always (not rise (id1 == id2))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 < num1value# and not (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 == num1value#) and not (id2 <= num2value#) -> not (id3 >= num3value#) or fall (id4 == num4value#) )
always ( id1 == num1value# and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( (id1 == id2) since [num1temporala#:num1temporalb#] (id3 == id4) -> not (once [0:num3temporal#] (rise (id5 >= num2value#))) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( rise (id1 > num1value#) -> not (eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (not rise (id1 == id2) and id3 <= num1value#)
always [num3temporala#:num3temporalb#] (not fall (id1 >= num1value#) and id2 == num2value#)
always ( fall (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually (fall (id2 == id3))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (not (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 == id2) -> not (historically (not (id3 == num1value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) or id2 == id3 -> not fall (id4 == id5) )
always ( rise (id1 <= num1value#) -> not ((id2 == id3) until [num3temporala#:num3temporalb#] (not (id4 > num2value#))) )
always ( id1 <= num1value# and rise (id2 < num2value#) -> not ((id3 == id4) since [num4temporala#:num4temporalb#] (id5 == num3value#)) )
always ( id1 > num1value# -> (id2 == num2value#) since [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
eventually (id1 == num1value# and id2 > num2value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (always (id2 >= num2value#)) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 > num2value#)
always ( rise (id1 == num1value#) -> not (id2 < num2value#) or rise (id3 == num3value#) )
always ( not rise (id1 == id2) and id3 == id4 -> id5 == num1value# )
always (id1 >= num1value#)
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 > num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
eventually [0:num3temporal#] (not (id1 < num1value#) and id2 > num2value#)
always ( rise (id1 == num1value#) or fall (id2 > num2valuea# and id2 < num2valueb#) -> historically [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always [0:num2temporal#] (id1 == num1value#)
eventually (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) until (rise (id4 >= num4value#)) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( id1 == num1value# -> not ((id2 == num2value#) until [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# and not (id3 == id4) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 <= num1value#) since (id2 > num2value#) -> eventually (always [0:num4temporal#] (not (id3 < num3value#))) )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 == num2value# )
always ( id1 >= num1valuea# and id1 < num1valueb# -> not (id2 == num2value#) or id3 == id4 )
always ( rise (id1 < num1value#) -> fall (always [0:num3temporal#] (id2 <= num2value#)) )
always ( id1 >= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 <= num2value#) until [0:num3temporal#] (id3 == id4)) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num3temporal#] (id1 < num1value# and id2 <= num2value#)
always ( historically [num2temporala#:num2temporalb#] (not (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( once (id1 == num1value#) -> historically [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> always (eventually [0:num1temporal#] (id3 == id4)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# and id3 == num3value# )
always ( id1 == num1value# and id2 == id3 -> always (id4 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually (id3 == num1value#)) )
always ( once [0:num1temporal#] (not (id1 == id2)) -> always [0:num3temporal#] (id3 == num2value#) )
always ( not (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 <= num1value#))) )
eventually [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always (id1 > num1value#)
always ( id1 < num1value# -> id2 <= num2value# and id3 >= num3value# )
eventually (id1 > num1value#)
always ( id1 == num1value# -> always (eventually [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) or id2 == id3 -> eventually (always (id4 == id5)) )
always ( id1 == num1value# -> eventually (always [0:num3temporal#] (not fall (id2 >= num2value#))) )
always ( id1 == id2 and id3 == num1value# -> (id4 > num2valuea# and id4 < num2valueb#) since (fall (id5 >= num3valuea# and id5 <= num3valueb#)) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually (id1 == id2 and id3 > num1value#)
always ( id1 > num1value# -> id2 == num2value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always (id1 == id2)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (always (id1 <= num1value#)) -> not (once [0:num3temporal#] (id2 >= num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 < num1value#) -> id2 > num2value# and id3 > num3value# )
always ( not (id1 < num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
eventually (not rise (id1 == id2))
always ( id1 > num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# and rise (id4 == num4value#) )
always ( once [0:num2temporal#] (not fall (id1 == num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 >= num3value#)) )
always ( not (id1 > num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> historically (id2 == num2value#) )
eventually (id1 > num1value#)
always ( not (id1 <= num1value#) and id2 == num2value# -> (not (id3 > num3valuea# and id3 < num3valueb#)) until [0:num4temporal#] (id4 == id5) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( always [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always ( not (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (not (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
always ( (not fall (id1 > num1value#)) since [0:num2temporal#] (id2 == id3) -> once [0:num4temporal#] (id4 < num3value#) )
always ( id1 > num1value# or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 < num2value#)) )
always ( rise (id1 > num1value#) and id2 > num2value# -> id3 == num3value# )
always ( fall (id1 == id2) -> id3 == num1value# and rise (id4 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 == num2value#) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( historically (not (id1 <= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
eventually [0:num2temporal#] (id1 < num1value# and id2 == id3)
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or id2 == num2value#)
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( id1 == num1value# -> always [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 <= num2value#))) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> eventually [0:num4temporal#] (rise (id2 < num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 >= num2value#) -> id3 == id4 )
always ( rise (id1 == num1value#) -> eventually (id2 == num2value#) )
always ( not (id1 < num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not fall (id1 >= num1value#) and rise (id2 > num2value#) -> always (eventually (id3 == id4)) )
always [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) until [0:num3temporal#] (rise (id2 < num2value#)) -> not ((not rise (id3 > num4value#)) since [num6temporala#:num6temporalb#] (id4 <= num5value#)) )
always (id1 < num1value# or id2 >= num2value#)
always ( fall (id1 == num1value#) -> not (id2 < num2value#) )
always ( rise (id1 > num1value#) -> rise ((not rise (id2 == id3)) until [0:num3temporal#] (id4 == num2value#)) )
always ( not fall (id1 == num1value#) and id2 == id3 -> (not (id4 == id5)) since [0:num3temporal#] (fall (id6 > num2valuea# and id6 <= num2valueb#)) )
always ( not rise (once (rise (id1 == num1value#))) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always (id1 == num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> id4 > num2valuea# and id4 < num2valueb# )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) or id3 <= num3value# )
always [0:num3temporal#] (id1 < num1value# and not (id2 == num2value#))
always ( fall (id1 == id2) -> rise (id3 == num1value#) and id4 == num2value# )
always [0:num3temporal#] (not (id1 <= num1value#) and id2 >= num2value#)
always ( rise (id1 < num1value#) -> not (id2 == num2value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
always ( (id1 >= num1valuea# and id1 < num1valueb#) or not rise (id2 == id3) -> once [0:num3temporal#] (id4 <= num2value#) )
eventually (id1 == id2)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 <= num2value#)
always ( historically (not fall (id1 > num1valuea# and id1 < num1valueb#)) -> (id2 < num2value#) until (id3 > num3value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> eventually (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( id1 < num1value# or id2 == num2value# -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 < num3value#)) )
always ( id1 < num1value# -> id2 == num2value# )
always ( rise (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (id4 < num4value#) )
always ( not (id1 < num1value#) or not (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 <= num3value#))) )
always ( eventually [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( rise (id1 == num1value#) -> id2 <= num2value# and rise (id3 > num3value#) )
eventually (id1 == id2)
always ( id1 >= num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> once [num3temporala#:num3temporalb#] (id3 == id4) )
always [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 < num1value#) -> not (id2 < num2value#) )
always ( id1 == num1value# and id2 > num2value# -> not (historically (not (id3 == num3value#))) )
eventually (rise (id1 == num1value#))
always ( rise (id1 == num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 > num1value#) -> fall (id2 == id3) )
always ( not (id1 == id2) -> id3 == num1value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually (fall (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 == id2 and id3 > num1value#)
eventually [0:num2temporal#] (not (id1 == id2) or id3 <= num1value#)
always ( fall (id1 == id2) -> fall (id3 > num1valuea# and id3 < num1valueb#) )
always ( fall (id1 == id2) -> id3 > num1value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id3 >= num1value#))) )
always [0:num2temporal#] (id1 <= num1value# or not (id2 == id3))
always ( rise (id1 < num1value#) and id2 == num2value# -> rise (id3 >= num3value#) and id4 >= num4value# )
always [0:num2temporal#] (id1 > num1value#)
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == id3) -> fall (once [num2temporala#:num2temporalb#] (not (id4 == id5))) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
eventually [0:num3temporal#] (id1 > num1value# or rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 < num1value# -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# and id3 == num3value# )
always (id1 == num1value#)
always ( not fall ((id1 == num1value#) until (not fall (id2 > num2value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always ( id1 >= num1value# and id2 > num2value# -> id3 == num3value# )
eventually (id1 > num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == id2) -> id3 < num1value# )
always [0:num2temporal#] (not fall (id1 == num1value#))
always ( not (id1 < num1value#) -> historically [0:num3temporal#] (not (id2 < num2value#)) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (rise (id3 >= num2value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always [0:num3temporal#] (id1 == num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always (id1 > num1value#)
always ( rise (id1 < num1value#) -> id2 == id3 and not rise (id4 == id5) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id3 > num1value#))) )
eventually [0:num2temporal#] (not (id1 == id2) or id3 < num1value#)
always ( not (historically [0:num2temporal#] (id1 >= num1value#)) -> eventually (always [0:num4temporal#] (id2 <= num3value#)) )
eventually (fall (id1 >= num1valuea# and id1 < num1valueb#))
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == id2) and not rise (id3 >= num1valuea# and id3 <= num1valueb#))
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( id1 == num1value# and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always (id1 > num1value# or id2 < num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always (not (id2 <= num2value#))) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 == num3value#) until (id3 < num4value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not fall (id2 == num2value#) )
always ( (not fall (id1 > num1value#)) since [num3temporala#:num3temporalb#] (not (id2 < num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (fall (id3 >= num4valuea# and id3 <= num4valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == id2) -> not rise (id3 == id4) )
eventually (rise (id1 == num1value#) or id2 == id3)
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#))
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 <= num2value#) )
eventually (rise (id1 >= num1value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (not fall (id2 > num3value#))) )
always ( not fall ((id1 == num1value#) until (rise (id2 == num2value#))) -> eventually [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> rise (id2 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (rise (id1 < num1value#) and id2 == id3)
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always (not (id1 >= num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always [0:num1temporal#] (id1 == id2)
always ( id1 < num1value# and id2 < num2value# -> rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (not fall (id1 >= num1value#))
always ( id1 >= num1value# -> id2 > num2value# )
always ( rise (id1 > num1value#) -> fall (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 <= num1value# -> id2 == id3 )
always ( once (id1 == id2) -> (not (id3 == num1value#)) until [num3temporala#:num3temporalb#] (rise (id4 <= num2value#)) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( id1 == id2 and id3 <= num1value# -> rise (id4 == num2value#) and not (id5 >= num3value#) )
always ( id1 > num1value# and not (id2 > num2value#) -> id3 <= num3value# )
always ( id1 >= num1value# or not (id2 >= num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( id1 == num1value# or not (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id4 < num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 == id2 -> id3 == num1value# and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id3 == id4))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always (id1 > num1value# or id2 == num2value#)
always [0:num2temporal#] (not rise (id1 == id2) and id3 == num1value#)
eventually (rise (id1 > num1value#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually ((id1 > num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 <= num1value#) -> not (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always (id1 > num1value# and id2 == num2value#)
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always [0:num3temporal#] (id1 <= num1value# and id2 < num2value#)
eventually [0:num2temporal#] (rise (id1 > num1value#))
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( id1 == num1value# or not (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# and id4 == num4value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> once [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 <= num1value#) -> id2 == id3 and id4 == id5 )
always ( rise (id1 < num1value#) -> not (eventually [0:num3temporal#] (id2 >= num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 == num2value#) since [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == id4)) )
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( fall (id1 == id2) -> not ((id3 > num1valuea# and id3 < num1valueb#) until [0:num3temporal#] (rise (id4 >= num2value#))) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always (id1 == id2 and id3 <= num1value#)
always ( historically [0:num2temporal#] (not (id1 == num1value#)) -> always [0:num4temporal#] (eventually (id2 >= num3valuea# and id2 <= num3valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (not (id2 >= num2value#)) )
always ( id1 == id2 -> (id3 <= num1value#) until [0:num3temporal#] (id4 < num2value#) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 >= num2value#)
always ( historically (id1 == id2) -> historically [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) and id2 < num2value#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == id2 and id3 > num1value# -> (id4 == num2value#) until [0:num4temporal#] (not (id5 >= num3valuea# and id5 < num3valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (id1 == id2) -> always (id3 == num1value#) )
always ( id1 == id2 -> not (always [0:num2temporal#] (not (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( once (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> rise (once [0:num2temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always [0:num1temporal#] (id1 == id2)
always ( historically (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always (id1 > num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] (id1 < num1value# and id2 <= num2value#)
eventually [0:num3temporal#] (rise (id1 == num1value#) and id2 == num2value#)
always ( not (once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> (id2 > num3valuea# and id2 < num3valueb#) until [0:num5temporal#] (rise (id3 == num4value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3value# )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> id4 == id5 )
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) and rise (id2 < num2value#))
always ( id1 >= num1value# and id2 == id3 -> id4 == id5 or id6 == id7 )
always ( rise (id1 < num1value#) -> not rise (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( not (id1 >= num1value#) and id2 >= num2value# -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 >= num3value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (not fall (id2 == num2value#)) -> fall ((id3 <= num4value#) since [num6temporala#:num6temporalb#] (id4 > num5valuea# and id4 < num5valueb#)) )
always ( rise (id1 == id2) -> not (always [0:num2temporal#] (id3 < num1value#)) )
always ( rise (id1 >= num1value#) -> eventually (not (id2 == id3)) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
eventually (id1 == id2)
always ( id1 == num1value# or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always (id1 == num1value# or id2 == id3)
always ( (id1 > num1value#) since [0:num2temporal#] (not rise (id2 == id3)) -> (id4 < num3value#) since (not (id5 == id6)) )
always [0:num1temporal#] (id1 == id2)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> always [num4temporala#:num4temporalb#] (eventually (fall (id3 == num3value#))) )
always ( id1 <= num1value# and id2 < num2value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (once [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 == id2 -> id3 <= num1value# or rise (id4 > num2value#) )
eventually (id1 >= num1value#)
always ( id1 <= num1value# and not rise (id2 == num2value#) -> not (id3 >= num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always [0:num1temporal#] (id1 == id2)
always ( eventually [num2temporala#:num2temporalb#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> fall (eventually [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 >= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always (not (id1 <= num1value#))
always ( id1 == id2 and id3 <= num1value# -> eventually (always [num3temporala#:num3temporalb#] (id4 > num2value#)) )
always ( id1 == id2 -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 >= num1value# and rise (id2 < num2value#) -> always [num4temporala#:num4temporalb#] (eventually (id3 == num3value#)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
eventually [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> not rise (historically [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always [num2temporala#:num2temporalb#] (id1 < num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( always (id1 > num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (not (id3 >= num3value#)) )
always ( not (historically (not (id1 >= num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> (id2 == id3) since (id4 > num2valuea# and id4 < num2valueb#) )
always ( once [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 > num2value#)) )
always ( not (id1 == id2) -> always [0:num2temporal#] (not rise (id3 == num1value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 < num1value# or id2 >= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 <= num1value# and id2 == id3 -> eventually (rise (id4 > num2value#)) )
always ( (not (id1 > num1valuea# and id1 < num1valueb#)) since (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 < num3value#)) )
always ( rise (id1 > num1value#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> id4 > num2value# )
always [0:num2temporal#] (id1 >= num1value#)
always [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 == id2) -> always (eventually (id3 > num1value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num1temporal#] (id1 == id2)
always ( id1 == id2 and id3 == num1value# -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (not fall (id4 == id5))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (always (not (id1 >= num1value#))) -> eventually (always (not (id2 <= num2value#))) )
always ( rise (id1 >= num1value#) -> historically [num2temporala#:num2temporalb#] (not (id2 == id3)) )
always ( id1 == num1value# -> not fall (id2 >= num2value#) and id3 == num3value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( once (id1 > num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( historically [num1temporala#:num1temporalb#] (not (id1 == id2)) -> (id3 == id4) until [0:num2temporal#] (id5 == id6) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 -> (id3 == num1value#) since [0:num3temporal#] (id4 > num2value#) )
always ( once (id1 >= num1value#) -> eventually (id2 < num2value#) )
always ( id1 == id2 -> not (historically [0:num1temporal#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> always (id2 <= num2value#) )
always ( id1 == num1value# or id2 == num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1valuea# and id1 < num1valueb#) and id2 > num2value#)
eventually [0:num3temporal#] (rise (id1 < num1value#) and rise (id2 >= num2value#))
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 >= num3value# )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> id3 == num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise ((id2 < num2value#) until [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( id1 == num1value# and id2 <= num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( once [0:num1temporal#] (id1 == id2) -> not (always [num3temporala#:num3temporalb#] (id3 == num2value#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 > num2value#)) )
always ( id1 == id2 -> eventually (always [0:num2temporal#] (not fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( id1 < num1value# and rise (id2 < num2value#) -> id3 <= num3value# )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 < num1value#) or id2 >= num2value# -> always [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 <= num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> rise (id3 >= num1value#) and not fall (id4 == num2value#) )
always (id1 == id2 and id3 == id4)
always ( rise (id1 > num1value#) and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 == id2) -> always (eventually (id3 < num1value#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> fall (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> fall (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always ( not (historically [0:num2temporal#] (id1 < num1value#)) -> (id2 > num3valuea# and id2 < num3valueb#) until [num5temporala#:num5temporalb#] (id3 > num4value#) )
always ( (not (id1 == id2)) since (id3 > num1value#) -> (id4 == num2value#) until (rise (id5 == id6)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 == num2value#)) )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always ( (id1 == num1value#) since [0:num3temporal#] (id2 >= num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 >= num4value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not fall ((id2 <= num2value#) since [0:num4temporal#] (id3 > num3value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# or id2 < num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( fall (id1 == id2) -> rise (eventually [num2temporala#:num2temporalb#] (fall (id3 == num1value#))) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always (not (id3 > num1valuea# and id3 <= num1valueb#))) )
always (id1 >= num1value#)
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> id2 == id3 and id4 == num2value# )
eventually [0:num3temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (rise (id1 <= num1value#) and id2 < num2value#)
always ( rise (id1 == id2) -> id3 > num1value# )
eventually [0:num2temporal#] (id1 == id2 or not rise (id3 > num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (not (id2 < num2value#))) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num3temporal#] (id2 == id3) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( id1 == id2 -> not (once (id3 <= num1value#)) )
always ( eventually [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (rise (id3 >= num2value#)) )
always ( rise (id1 == id2) -> id3 < num1value# )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( id1 == num1value# -> (id2 == num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> always (id2 >= num2value#) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num2temporala#:num2temporalb#] (id2 == id3) -> eventually [num3temporala#:num3temporalb#] (always (id4 == id5)) )
always ( rise (id1 >= num1value#) and not (id2 >= num2value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( id1 < num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always (id3 == num1value#)) )
always ( (id1 < num1value#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 >= num4value#)) )
always ( fall (id1 == id2) -> historically (id3 == num1value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 <= num1value#) and id2 == id3 -> not (id4 >= num2value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# or rise (id3 <= num3value#) )
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# )
always (id1 >= num1value#)
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( fall (id1 == id2) -> id3 <= num1value# )
eventually (rise (id1 < num1value#))
always ( id1 <= num1value# -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 or id5 == num3value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (id1 == id2 and not (id3 < num1value#))
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually (id1 >= num1value#)
eventually [0:num3temporal#] (not fall (id1 == num1value#) and id2 >= num2value#)
always (id1 <= num1value# and id2 <= num2value#)
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 <= num2value#)
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( id1 == id2 -> always (eventually (not (id3 == id4))) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 <= num2value#)
always ( id1 == id2 and id3 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2value#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 > num3value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 >= num3value#))) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 > num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 > num2value#))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (fall (id2 == id3)) )
always ( (id1 == num1value#) until [0:num3temporal#] (not fall (id2 == num2value#)) -> not (always [0:num4temporal#] (id3 == id4)) )
always ( eventually [num2temporala#:num2temporalb#] (not (id1 > num1value#)) -> fall (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( id1 == num1value# -> (id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 <= num3value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( fall (id1 == num1value#) -> eventually (always (not fall (id2 > num2value#))) )
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 >= num2value#)
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( id1 < num1value# and not (id2 == id3) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( not rise (id1 > num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (not (id3 >= num3value#))) )
always ( historically (id1 == id2) -> (id3 >= num1value#) until [num3temporala#:num3temporalb#] (id4 >= num2value#) )
always ( rise (id1 > num1value#) -> id2 == num2value# or id3 == num3value# )
always ( id1 == num1value# and id2 >= num2value# -> id3 < num3value# and (id4 > num4valuea# and id4 < num4valueb#) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( id1 > num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always ( not rise (id1 == id2) and (id3 >= num1valuea# and id3 <= num1valueb#) -> historically [0:num3temporal#] (id4 > num2value#) )
always ( id1 < num1value# or id2 == num2value# -> not (always (id3 == id4)) )
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always [0:num3temporal#] (not (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always (id1 == id2)
always [0:num2temporal#] (id1 < num1value#)
eventually [0:num3temporal#] (not fall (id1 >= num1value#) and id2 >= num2value#)
always ( rise (id1 == id2) -> (id3 == num1value#) until [num2temporala#:num2temporalb#] (id4 == id5) )
always ( rise (id1 <= num1value#) -> always (id2 > num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) and fall (id2 == num2value#))
always ( rise (id1 < num1value#) -> id2 >= num2value# )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (not rise (id2 == id3))) )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 == num1value# or id2 == id3 -> not (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( once (id1 >= num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (not (id3 > num3valuea# and id3 < num3valueb#)) )
eventually (id1 == num1value#)
always ( rise (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( id1 > num1value# or rise (id2 > num2valuea# and id2 < num2valueb#) -> not (always [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> not (id2 <= num2value#) )
always ( not (id1 <= num1value#) -> eventually (not fall (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and rise (id4 <= num2value#) )
always ( id1 <= num1value# and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num3temporal#] (not rise (id3 == id4)) )
eventually (id1 < num1value#)
always ( rise (id1 <= num1value#) -> historically (id2 < num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not (id2 == id3) -> id4 > num2value# and rise (id5 <= num3value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 >= num2value#)) )
always ( fall (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (id4 == num2value#) )
always ( id1 <= num1value# -> rise (id2 > num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always [0:num3temporal#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( once (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> id3 >= num1value# or id4 == num2value# )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (id1 < num1value# and not (id2 == id3))
always ( rise (id1 < num1value#) -> once [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> once [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 > num1value#) -> (id2 == id3) until (not rise (id4 > num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value# -> id3 > num3value# )
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) or id3 == num3value# )
eventually [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( id1 == num1value# or rise (id2 == num2value#) -> once [0:num4temporal#] (id3 == num3value#) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually (always (id2 < num3value#)) )
always ( id1 == id2 -> eventually (id3 == num1value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> not ((id3 > num3valuea# and id3 <= num3valueb#) until [num5temporala#:num5temporalb#] (id4 > num4value#)) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 >= num1value#) -> not (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or not (id2 <= num2value#))
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [num3temporala#:num3temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( not fall (id1 > num1value#) and rise (id2 > num2value#) -> always [0:num4temporal#] (id3 >= num3value#) )
always ( id1 == num1value# -> not rise (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 < num1value#) -> always (eventually (not (id2 == id3))) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 <= num1value#) -> fall (eventually (id2 == id3)) )
eventually (not (id1 > num1value#))
always ( id1 <= num1value# or rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 == num3value#))) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (fall (id3 == num1value#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (not fall (id2 == id3))) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [num2temporala#:num2temporalb#] (not (id4 == id5)) )
always ( rise (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) and rise (id3 >= num3value#) )
always ( once (not fall (id1 == num1value#)) -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> always [0:num4temporal#] (id3 <= num3value#) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( not (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually (always [num2temporala#:num2temporalb#] (not (id2 == id3))) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 >= num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (not fall (id3 == num3value#)) )
always ( (not (id1 == id2)) since [0:num2temporal#] (rise (id3 >= num1value#)) -> always [0:num4temporal#] (id4 <= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( id1 > num1value# -> (id2 <= num2value#) since [num4temporala#:num4temporalb#] (rise (id3 >= num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 > num2value#) -> (id3 == num3value#) until [0:num5temporal#] (id4 >= num4value#) )
always ( fall (id1 == num1value#) -> rise (id2 == num2value#) and not (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 >= num2value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 >= num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num2temporal#] (not (id1 == id2) or fall (id3 >= num1valuea# and id3 <= num1valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> id3 == num3value# )
always ( not fall (id1 == id2) -> id3 == num1value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
eventually [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> eventually (always (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 <= num1value#) and fall (id2 == num2value#) -> id3 < num3value# )
always ( id1 > num1value# and id2 >= num2value# -> always [0:num4temporal#] (id3 < num3value#) )
always ( (not (id1 == id2)) since (id3 == num1value#) -> not rise (eventually [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( id1 == num1value# or fall (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 < num3valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> (id2 > num2value#) since [0:num4temporal#] (rise (id3 < num3value#)) )
always ( not (id1 < num1value#) and rise (id2 < num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( once [0:num2temporal#] (id1 < num1value#) -> not (eventually [0:num4temporal#] (rise (id2 >= num3value#))) )
always ( rise (id1 < num1value#) -> always (eventually (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 == id2) -> rise (id3 >= num1value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [0:num2temporal#] (rise (id1 > num1value#))
eventually [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> always (eventually [0:num2temporal#] (rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> eventually (id2 > num2valuea# and id2 <= num2valueb#) )
always ( not (id1 > num1value#) or id2 == num2value# -> id3 <= num3value# )
always ( not (id1 > num1value#) and rise (id2 <= num2value#) -> id3 == id4 )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( rise (id1 == id2) -> id3 <= num1value# )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num2temporal#] (not fall (id1 == id2) and rise (id3 == num1value#))
always [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always [0:num3temporal#] (id1 <= num1value# or id2 == num2value#)
always [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
always ( id1 <= num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( not ((not (id1 == id2)) since [num2temporala#:num2temporalb#] (id3 == num1value#)) -> always [0:num4temporal#] (eventually (rise (id4 > num3valuea# and id4 < num3valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> rise (id3 == num3value#) or id4 == id5 )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 < num1value#) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 == id2) -> eventually (not (id3 == num1value#)) )
eventually [0:num1temporal#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not fall (id1 == num1value#) -> not (always (id2 > num2value#)) )
always ( rise (id1 >= num1value#) and id2 >= num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 > num1value# -> id2 <= num2value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (not (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( not (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 <= num1value#) )
always ( rise (id1 > num1value#) -> rise (eventually [0:num3temporal#] (id2 >= num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> not (eventually [0:num4temporal#] (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 == id2) -> eventually (fall (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 >= num1value# and not rise (id2 == id3) -> always [0:num3temporal#] (eventually (rise (id4 > num2value#))) )
always [0:num1temporal#] (id1 == id2)
always ( id1 > num1valuea# and id1 < num1valueb# -> not (id2 >= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always (id1 <= num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always [0:num3temporal#] (id1 >= num1value# and id2 > num2value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) or id3 < num3value# )
always ( id1 == num1value# -> not rise ((id2 == num2value#) until [num4temporala#:num4temporalb#] (not (id3 < num3value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 == num2value#) -> (id3 > num3valuea# and id3 < num3valueb#) until [num5temporala#:num5temporalb#] (id4 > num4value#) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( once (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 < num1value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( not (id1 == num1value#) or not fall (id2 >= num2value#) -> id3 <= num3value# and rise (id4 > num4value#) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 > num3valuea# and id3 < num3valueb# )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 <= num1value# -> always (id2 == id3) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( not (id1 >= num1value#) or id2 == num2value# -> id3 >= num3value# )
always ( rise (id1 >= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) )
eventually (id1 <= num1value# or rise (id2 < num2value#))
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 > num1value#) -> id2 == num2value# )
always (id1 == id2)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> not ((id2 >= num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 < num3value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always (not (id1 == id2) and id3 >= num1value#)
always ( rise (id1 == id2) -> not (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 == num1value#) -> not rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually (rise (id2 > num2value#))) )
always (id1 >= num1value#)
always (id1 == id2)
always ( id1 > num1value# -> id2 == num2value# )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == id4)) )
always (not (id1 >= num1valuea# and id1 < num1valueb#) and not rise (id2 >= num2value#))
eventually [0:num2temporal#] (id1 == num1value#)
always ( (not (id1 < num1value#)) since [0:num3temporal#] (id2 == num2value#) -> (id3 > num4valuea# and id3 < num4valueb#) until [num6temporala#:num6temporalb#] (id4 > num5value#) )
always ( id1 > num1value# and id2 == num2value# -> id3 == num3value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always (not rise (id2 == id3))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until (rise (id2 == num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( not ((id1 == id2) since [0:num2temporal#] (not (id3 >= num1valuea# and id3 <= num1valueb#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id4 == num3value#))) )
always ( (id1 >= num1value#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> not (once [0:num5temporal#] (rise (id3 >= num4value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num2temporala#:num2temporalb#] (rise (id2 == id3))) )
always ( not (id1 < num1value#) and rise (id2 <= num2value#) -> not (always [0:num4temporal#] (id3 <= num3value#)) )
always ( rise (id1 >= num1value#) and id2 < num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) or id4 > num4value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always (id1 == id2)
always ( fall (id1 == num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (not (id3 <= num3value#)) )
always ( (not rise (id1 == id2)) since [0:num2temporal#] (not (id3 < num1value#)) -> (id4 == num3value#) until [num5temporala#:num5temporalb#] (not (id5 < num4value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> eventually (always [0:num3temporal#] (id3 >= num2value#)) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( id1 <= num1value# -> not (id2 == id3) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not rise (id2 > num2value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (id1 < num1value#)
eventually [num3temporala#:num3temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 == num2value#)
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and fall (id3 == num3value#) )
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 >= num2value#))
eventually [0:num3temporal#] (not (id1 >= num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (once [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( id1 >= num1value# -> once [0:num2temporal#] (not (id2 == id3)) )
always ( id1 > num1value# -> id2 == id3 )
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 > num2value#) and id3 <= num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 < num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2value#) -> id3 < num3value# )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 > num1value#) -> not (always [0:num3temporal#] (not (id2 == num2value#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ( fall (id1 == id2) -> id3 < num1value# )
always ( fall (id1 == id2) -> id3 == id4 )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always (id1 > num1value#)
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always ( id1 == id2 or id3 == num1value# -> rise (id4 == id5) )
always ( fall (id1 == id2) -> id3 < num1value# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 == id3)) )
always [0:num3temporal#] (id1 < num1value# or id2 < num2value#)
always ( rise (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always (id1 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (fall (id3 >= num1valuea# and id3 < num1valueb#)) )
always [num1temporala#:num1temporalb#] (not (id1 == id2))
always (id1 <= num1value# and not (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 -> fall (id3 == num1value#) )
always ( fall (id1 == num1value#) -> id2 == id3 and id4 == id5 )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == id2) -> eventually (not rise (id3 == id4)) )
always ( not (always (id1 >= num1value#)) -> (id2 == id3) since (id4 == num2value#) )
always ( id1 == id2 or id3 == id4 -> always [0:num2temporal#] (id5 <= num1value#) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> id2 < num2value# )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 <= num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
eventually (not (id1 < num1value#) and rise (id2 >= num2value#))
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 < num3value#))) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always (id1 == id2)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 > num1value# -> eventually (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 >= num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 > num2value# and id3 >= num3value# )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> rise (id2 < num2value#) )
always (id1 <= num1value# and id2 >= num2value#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> not ((id2 == num2value#) until (id3 == num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2valuea# and id2 <= num2valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( id1 == num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3value#) )
eventually (id1 >= num1value# and id2 == num2value#)
always ( id1 == num1value# -> eventually (always [0:num2temporal#] (not (id2 == id3))) )
always (not rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( (id1 <= num1value#) since [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) -> always [0:num5temporal#] (id3 == num4value#) )
always ( rise (id1 == id2) -> not (id3 <= num1value#) )
always [0:num3temporal#] (id1 > num1value# or id2 >= num2value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 < num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( id1 > num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) or rise (id3 >= num3value#) )
always ( id1 == id2 or id3 == id4 -> (id5 >= num1valuea# and id5 < num1valueb#) until [0:num3temporal#] (rise (id6 > num2valuea# and id6 < num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) until [num3temporala#:num3temporalb#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 >= num4value#)) )
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( rise (id1 >= num1value#) -> (id2 == num2value#) since (not (id3 <= num3value#)) )
always [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 == id2) -> (id3 == num1value#) until [0:num3temporal#] (not (id4 >= num2value#)) )
always ( rise (id1 <= num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 < num2value# )
always ( rise (id1 > num1value#) -> historically [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 == id2 or id3 == num1value# -> eventually (always (id4 <= num2value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> id3 == id4 )
always ( id1 == num1value# -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> id2 == id3 and rise (id4 <= num2value#) )
always ( id1 == num1value# or fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> not fall (id2 == num2value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
always ( not fall (id1 == id2) and not (id3 == id4) -> id5 == id6 )
always (id1 > num1value# and id2 > num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always (not rise (id1 >= num1value#))
always [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always ( rise (id1 == num1value#) -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 < num1valueb#))
always [0:num3temporal#] (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (id1 <= num1value# and rise (id2 >= num2value#))
always (id1 == num1value#)
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) since (not (id2 >= num2value#)) -> (not (id3 > num3valuea# and id3 <= num3valueb#)) until [0:num5temporal#] (id4 == num4value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always [num3temporala#:num3temporalb#] (id1 >= num1value# or not fall (id2 > num2value#))
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == num1value# or id2 <= num2value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id3 == id4))) )
always ( id1 >= num1value# or not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3valuea# and id3 <= num3valueb# )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always (id1 > num1value# or id2 == id3)
always ( rise (id1 <= num1value#) -> not rise (id2 >= num2value#) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> fall (eventually [0:num4temporal#] (id2 < num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 >= num3value# or rise (id4 >= num4value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) and rise (id4 <= num2value#) )
always ( id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#) -> not (id4 < num2value#) )
always ( once [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( (id1 <= num1value#) since [num3temporala#:num3temporalb#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> not rise (once [num5temporala#:num5temporalb#] (rise (id3 > num4value#))) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [0:num4temporal#] (eventually (rise (id2 < num3value#))) )
always ( id1 == id2 and id3 == id4 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id5 >= num1value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( not rise (id1 == id2) and id3 == id4 -> id5 == num1value# )
always ( id1 > num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always (id1 == id2)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always [0:num2temporal#] (id1 == num1value#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 > num1value# and not (id2 == num2value#) -> eventually [0:num3temporal#] (always (id3 == id4)) )
always ( id1 == id2 and not fall (id3 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id4 <= num2value#)) )
always (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> (id2 <= num2value#) since [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( id1 < num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( id1 == id2 and rise (id3 > num1valuea# and id3 < num1valueb#) -> always [num2temporala#:num2temporalb#] (id4 == id5) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( rise (id1 > num1value#) -> not (id2 == id3) )
always ( id1 <= num1value# and rise (id2 >= num2valuea# and id2 < num2valueb#) -> always (not (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and rise (id2 <= num2value#))
always (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 == num2value#) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) or id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 < num2value#) )
always ( id1 == id2 or id3 == id4 -> (id5 > num1value#) until [0:num2temporal#] (id6 == id7) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( id1 >= num1value# -> id2 < num2value# and not (id3 == num3value#) )
always ( rise (id1 == num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> eventually (always (not (id2 == id3))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always (id1 == num1value# and id2 >= num2value#)
always ( id1 == num1value# and id2 >= num2value# -> not (id3 < num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> not fall (id3 > num3value#) )
always (not (id1 < num1value#))
always ( (id1 <= num1value#) since (rise (id2 == num2value#)) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always (id1 <= num1value#)
always [0:num3temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always [0:num2temporal#] (not (id1 == num1value#))
eventually [num1temporala#:num1temporalb#] (not fall (id1 == id2))
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# or id2 == num2value# -> id3 > num3value# )
always [0:num3temporal#] (id1 <= num1value# or id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#) -> eventually [num3temporala#:num3temporalb#] (fall (id3 == id4)) )
always ( rise (once (not fall (id1 == id2))) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( id1 == id2 and id3 == id4 -> not fall (always [0:num2temporal#] (id5 > num1value#)) )
always (id1 == id2 or id3 == id4)
always ( fall (once [0:num2temporal#] (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) or id3 == id4 )
always ( once (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( not (always [0:num2temporal#] (id1 >= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 < num2value#))
eventually (rise (id1 <= num1value#) and id2 < num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( once [num2temporala#:num2temporalb#] (id1 <= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# and id2 > num2value# -> eventually [0:num3temporal#] (id3 == id4) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 < num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually (id1 == num1value# or not fall (id2 == num2value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> not (always (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (not (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> fall (id2 == id3) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) or rise (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( (id1 == num1value#) since (fall (id2 == id3)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always (id3 > num3value#)) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
eventually (id1 == id2 and rise (id3 > num1value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == id2 -> not (always [0:num2temporal#] (id3 == num1value#)) )
always ( id1 <= num1value# and id2 < num2value# -> historically [0:num3temporal#] (not (id3 == id4)) )
always ( fall (id1 == id2) -> always (eventually (rise (id3 == num1value#))) )
always [0:num2temporal#] (id1 <= num1value#)
always [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num2temporal#] (fall (id2 == id3))) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 >= num2value#))
always (id1 >= num1value#)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( (not (id1 > num1valuea# and id1 <= num1valueb#)) since [num3temporala#:num3temporalb#] (fall (id2 == num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == id4)) )
always ( id1 == num1value# -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 >= num1value# and id2 == id3 -> rise (eventually [num3temporala#:num3temporalb#] (id4 > num2value#)) )
always ( (id1 >= num1value#) since [0:num3temporal#] (id2 <= num2value#) -> (id3 == num4value#) until [0:num5temporal#] (id4 == id5) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( id1 == id2 and id3 > num1value# -> id4 >= num2value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> not (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> not fall (id3 > num1valuea# and id3 < num1valueb#) )
always ( once [0:num1temporal#] (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == id4)) )
always ( id1 > num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always (id3 < num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> eventually (not (id3 < num3value#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 < num1value# -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#) -> rise (id3 >= num3valuea# and id3 <= num3valueb#) or id4 >= num4value# )
eventually (id1 > num1valuea# and id1 < num1valueb#)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 < num1value# -> eventually (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# -> eventually [0:num2temporal#] (id2 == id3) )
always ( id1 <= num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually (rise (id3 == num3value#))) )
always ( id1 == num1value# and rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( not (historically (id1 > num1value#)) -> (id2 == num2value#) since [0:num3temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (not (id2 >= num2value#))) )
always ( fall (id1 == num1value#) and not (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
eventually (id1 <= num1value#)
eventually [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> not (id2 > num2value#) )
always [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always ( not ((id1 < num1value#) since (rise (id2 <= num2value#))) -> eventually [0:num3temporal#] (always (id3 == id4)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always (eventually (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id3 <= num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 >= num1value#) -> not (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (not (id1 < num1value#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 <= num1value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 <= num1value# or id2 > num2value# -> id3 == id4 or not (id5 == num3value#) )
always ( id1 <= num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 <= num3value# )
always [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
eventually (id1 == id2)
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 > num2value#)
always ( rise (id1 == id2) -> fall ((id3 >= num1value#) until (id4 <= num2value#)) )
always ( id1 > num1value# -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 == num1value# -> id2 == num2value# )
always ( id1 < num1value# -> once [num2temporala#:num2temporalb#] (rise (id2 == id3)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (historically (not (id1 == id2))) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( (id1 < num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 == id4))) )
always ( id1 == id2 or not fall (id3 == id4) -> eventually [num2temporala#:num2temporalb#] (id5 == num1value#) )
always (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( not (id1 >= num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 > num1value# and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always ( not (id1 == num1value#) -> id2 == num2value# )
always ( id1 == num1value# and rise (id2 >= num2value#) -> id3 > num3value# and fall (id4 == num4value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until (id3 == num3value#) )
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num2temporal#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 <= num1value#) )
always ( rise (id1 == num1value#) and id2 == num2value# -> not (historically [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 < num1value#) -> id2 == id3 or (id4 > num2valuea# and id4 < num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 == id2 or not (id3 == num1value#))
always ( id1 == id2 and rise (id3 > num1valuea# and id3 < num1valueb#) -> id4 <= num2value# )
always ( fall (id1 == id2) -> eventually (id3 <= num1value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 < num1value# -> id2 < num2value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( not (id1 == num1value#) -> always (eventually (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( id1 >= num1value# or id2 == id3 -> fall (always (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( id1 >= num1value# or id2 <= num2value# -> (id3 == num3value#) until [0:num5temporal#] (id4 < num4value#) )
always (not rise (id1 >= num1value#))
always ( rise (id1 < num1value#) -> id2 > num2value# and rise (id3 <= num3value#) )
always ( id1 == num1value# and id2 > num2value# -> eventually [0:num3temporal#] (not rise (id3 == id4)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == id2) -> not (id3 <= num1value#) and not (id4 >= num2valuea# and id4 < num2valueb#) )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( not fall (id1 > num1value#) -> always (id2 == id3) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> fall (always [0:num2temporal#] (id4 == id5)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> eventually (rise (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) until (not (id4 == num2value#)) )
always ( (id1 >= num1value#) until [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (always (not fall (id3 > num4valuea# and id3 < num4valueb#))) )
always ( rise (id1 <= num1value#) -> not (id2 >= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2value#))) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually (id4 >= num2value#)) )
always ( id1 == id2 and fall (id3 >= num1valuea# and id3 <= num1valueb#) -> (id4 >= num2value#) until [0:num4temporal#] (not (id5 > num3valuea# and id5 < num3valueb#)) )
always ( id1 == id2 and id3 < num1value# -> always [0:num3temporal#] (id4 < num2value#) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( (id1 > num1value#) since [0:num3temporal#] (id2 > num2value#) -> eventually (always [num5temporala#:num5temporalb#] (not (id3 < num4value#))) )
eventually [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( not (always [num2temporala#:num2temporalb#] (id1 == num1value#)) -> always (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( (id1 == id2) since [0:num2temporal#] (fall (id3 >= num1valuea# and id3 <= num1valueb#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == id5)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( not (id1 >= num1value#) -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == id2 and not (id3 == num1value#) -> id4 < num2value# and id5 == id6 )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> not (id2 < num2value#) )
always ( rise (id1 >= num1value#) -> not (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1value#) -> eventually (always (id2 == id3)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 < num1value#) -> rise (id2 <= num2value#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num3temporal#] (not (id1 < num1value#) or id2 >= num2value#)
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 > num1value# or id2 < num2value# -> eventually (always (id3 >= num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> not (id3 <= num3value#) )
always ( id1 == num1value# and not fall (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( rise (eventually [0:num2temporal#] (id1 == num1value#)) -> eventually [0:num3temporal#] (id2 == id3) )
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> not ((id2 > num2value#) until (id3 == id4)) )
always ( rise (id1 == num1value#) -> (id2 < num2value#) until [0:num3temporal#] (not (id3 == id4)) )
always ( rise (id1 >= num1value#) -> historically (id2 == num2value#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 < num1value# and id2 == num2value# -> rise (id3 == id4) )
always [0:num2temporal#] (not (id1 == id2) and id3 == num1value#)
always ( historically (not rise (id1 == id2)) -> always (eventually [0:num2temporal#] (not rise (id3 == num1value#))) )
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 >= num1value#)
always (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( not (id1 == num1value#) and id2 == id3 -> historically [num2temporala#:num2temporalb#] (id4 == id5) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( id1 == id2 -> always (id3 == num1value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == num2value#) and id3 >= num3value# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == id2) -> id3 < num1value# and id4 < num2value# )
always ( rise (id1 < num1value#) -> not fall ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (rise (id3 > num3value#))) )
always ( id1 == num1value# and id2 == id3 -> eventually [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> fall ((not (id2 == id3)) until (id4 == num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( id1 == id2 and not fall (id3 == num1value#) -> not (eventually [0:num3temporal#] (rise (id4 >= num2value#))) )
always ( once [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually [num4temporala#:num4temporalb#] (id2 >= num3value#) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 > num1value# -> not (id2 == id3) )
always ( rise (id1 > num1value#) -> rise (id2 == id3) )
always ( id1 == num1value# -> (id2 > num2valuea# and id2 < num2valueb#) or id3 == id4 )
always ( not (id1 <= num1value#) -> not (id2 < num2value#) or rise (id3 <= num3value#) )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> always (eventually (rise (id2 == num2value#))) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always (id1 < num1value# or id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num3temporala#:num3temporalb#] (rise (id3 == id4)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1value# and id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
eventually (rise (id1 < num1value#))
always [0:num1temporal#] (not (id1 == id2))
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually (always [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (not (id3 == id4))) )
always ( fall (id1 == id2) -> id3 > num1value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( not (id1 == id2) -> always [0:num2temporal#] (id3 <= num1value#) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( id1 == num1value# and id2 < num2value# -> id3 > num3valuea# and id3 < num3valueb# )
eventually (id1 >= num1value#)
always ( rise (id1 == num1value#) -> eventually (id2 > num2valuea# and id2 <= num2valueb#) )
always ( always [num2temporala#:num2temporalb#] (id1 == num1value#) -> always (eventually [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2value#) -> always [0:num4temporal#] (eventually (rise (id3 == id4))) )
eventually [0:num3temporal#] (rise (id1 == num1value#) or id2 >= num2value#)
always ( rise (id1 > num1value#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 < num3value#)) )
eventually [0:num2temporal#] (not fall (id1 > num1value#))
always ( rise (id1 == id2) -> rise (eventually [num2temporala#:num2temporalb#] (not (id3 == num1value#))) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id2 > num3valuea# and id2 <= num3valueb#)) )
always (id1 == num1value# and id2 > num2value#)
always ( once [0:num2temporal#] (rise (id1 >= num1valuea# and id1 < num1valueb#)) -> eventually [num3temporala#:num3temporalb#] (rise (id2 == id3)) )
always ( rise (id1 == num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 == num2value#)) )
always ( id1 == num1value# and id2 == num2value# -> (id3 > num3value#) until [num5temporala#:num5temporalb#] (rise (id4 > num4value#)) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == id2) -> not ((id3 < num1value#) until [num3temporala#:num3temporalb#] (rise (id4 < num2value#))) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 >= num1value#) -> id2 == id3 and id4 == id5 )
always ( rise (id1 == num1value#) -> rise (id2 == id3) )
always ( id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( id1 == num1value# and id2 < num2value# -> not (eventually [0:num4temporal#] (id3 >= num3value#)) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (not rise (id3 > num3value#))) )
always ( rise (id1 >= num1value#) or rise (id2 <= num2value#) -> id3 == id4 or id5 == num3value# )
eventually (id1 <= num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) since (rise (id2 >= num2valuea# and id2 < num2valueb#)) -> eventually (not fall (id3 >= num3value#)) )
eventually (rise (id1 < num1value#) or not (id2 <= num2value#))
always ( rise (id1 < num1value#) -> not fall ((id2 < num2value#) until (id3 == id4)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 > num1value# or id2 >= num2value# -> historically [num4temporala#:num4temporalb#] (not (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> id2 < num2value# or rise (id3 > num3valuea# and id3 < num3valueb#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( eventually [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 <= num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( id1 >= num1value# -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [0:num3temporal#] (id3 >= num2valuea# and id3 <= num2valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( id1 > num1value# or rise (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (not (id3 >= num3value#))) )
always ( fall (id1 == num1value#) -> always (id2 > num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> not fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 < num1value# or id2 > num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 <= num1value# -> id2 > num2value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
eventually [0:num3temporal#] (id1 > num1value# or id2 <= num2value#)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 <= num1value# and id2 > num2value# -> always (eventually [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> historically [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 < num1value#) -> (id2 == id3) until [0:num2temporal#] (id4 == id5) )
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually (id2 < num3value#) )
always (not (id1 <= num1value#) and id2 == num2value#)
always ( rise (id1 < num1value#) -> rise (id2 <= num2value#) and id3 > num3value# )
always ( id1 == num1value# and id2 == id3 -> eventually (always [0:num3temporal#] (id4 == num2value#)) )
always (id1 == id2)
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) and id2 >= num2value#)
always ( once (id1 < num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
always ( id1 == num1value# and rise (id2 <= num2value#) -> eventually [0:num3temporal#] (always (id3 == id4)) )
always ( rise (id1 >= num1value#) and id2 == id3 -> id4 >= num2valuea# and id4 < num2valueb# )
always ( id1 < num1value# -> id2 <= num2value# )
always ( not (id1 == id2) -> id3 == num1value# )
always (id1 < num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 < num1value#) and id2 == id3 -> historically [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 == id2 and not rise (id3 > num1valuea# and id3 < num1valueb#) -> id4 == num2value# )
eventually [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always ( rise (id1 <= num1value#) or rise (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 >= num1value#) or id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 <= num3value#) )
eventually [0:num3temporal#] (fall (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 or rise (id3 > num1value#) -> rise (id4 > num2valuea# and id4 < num2valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 <= num1value#))) )
always ( id1 == id2 or id3 == num1value# -> always [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( id1 == num1value# and id2 < num2value# -> eventually (always [0:num4temporal#] (not (id3 <= num3value#))) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 <= num1value#) -> not (eventually [0:num2temporal#] (not (id2 == id3))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 < num1value#) -> always (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) and id3 == num3value# )
always ( once (not fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> once [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# or not rise (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always ( fall (id1 == id2) -> always (id3 == num1value#) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always [0:num2temporal#] (id1 > num1value#)
always (id1 >= num1value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> id3 <= num3value# )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( historically [0:num2temporal#] (not fall (id1 == num1value#)) -> always [0:num4temporal#] (eventually (rise (id2 > num3value#))) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always (eventually [num4temporala#:num4temporalb#] (rise (id2 > num3value#))) )
always [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( id1 == id2 and id3 == id4 -> once (id5 > num1value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) or id2 <= num2value# -> id3 >= num3value# and not (id4 == id5) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always (id1 == id2 and id3 == id4)
always [num3temporala#:num3temporalb#] (not (id1 == num1value#) or id2 <= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 >= num2value#) )
always ( (id1 == id2) until [num2temporala#:num2temporalb#] (id3 == num1value#) -> always (id4 > num3value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
always [0:num2temporal#] (id1 <= num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always (id1 >= num1value# or id2 <= num2value#)
always ( not (id1 == num1value#) -> not (id2 == id3) or id4 <= num2value# )
always ( id1 <= num1value# -> rise (id2 <= num2value#) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 < num1value#)) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( id1 < num1value# or id2 < num2value# -> id3 > num3valuea# and id3 < num3valueb# )
eventually [0:num3temporal#] (fall (id1 == num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 == id2 or fall (id3 >= num1valuea# and id3 <= num1valueb#) -> not (id4 < num2value#) )
always ( rise (id1 == num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 <= num1value# -> eventually (always [0:num3temporal#] (id2 < num2value#)) )
always ( id1 > num1value# or id2 == id3 -> id4 == num2value# )
always ( id1 <= num1value# -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( historically (id1 == id2) -> (id3 == num1value#) until [num3temporala#:num3temporalb#] (rise (id4 <= num2value#)) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (not fall (id2 == num3value#))) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 >= num1value#) -> id2 == id3 )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 <= num1value#) )
eventually [0:num3temporal#] (id1 > num1value# and rise (id2 <= num2value#))
always ( id1 >= num1value# or rise (id2 <= num2value#) -> id3 == id4 )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (id1 == id2) -> (id3 >= num1value#) until [0:num3temporal#] (rise (id4 > num2value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( not (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#) -> not rise (always [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 < num2valueb#)) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 < num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (always [0:num2temporal#] (id2 == id3)) )
eventually (rise (id1 <= num1value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 < num1value# -> (id2 == id3) until [num2temporala#:num2temporalb#] (id4 == id5) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> always (eventually (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 == id2) -> rise (always [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == id3) since [num3temporala#:num3temporalb#] (not (id4 <= num2value#)) )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always (id1 <= num1value#)
always ( rise (id1 < num1value#) -> (id2 == id3) since [num2temporala#:num2temporalb#] (id4 == id5) )
always (id1 >= num1value# or id2 == id3)
always ( rise (id1 == num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id2 > num3value#))) )
always ( rise (id1 > num1value#) -> fall (id2 == id3) )
always ( rise (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (rise (id3 >= num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually (id1 == id2)
always ( rise (id1 > num1value#) -> once [0:num3temporal#] (id2 <= num2value#) )
always [0:num2temporal#] (id1 > num1value#)
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( id1 < num1value# and not (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 <= num2value#)) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 >= num1valuea# and id3 < num1valueb#))) )
always ( (not rise (id1 == id2)) until (rise (id3 > num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 < num2value#)) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( not (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always ( rise (id1 > num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) or rise (id3 >= num3value#) )
always ( id1 <= num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( id1 < num1value# and not fall (id2 == num2value#) -> not (always [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
always ( not (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 <= num1value#)
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always (id1 <= num1value# or not fall (id2 >= num2value#))
always ( rise (id1 == id2) -> id3 == id4 )
always [num3temporala#:num3temporalb#] (not fall (id1 == num1value#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( once (not (id1 == id2)) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always (id1 > num1value#)
always ( rise (id1 == num1value#) -> rise (id2 > num2value#) )
eventually (id1 == id2)
always [0:num2temporal#] (id1 < num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num3temporal#] (id1 < num1value# and id2 <= num2value#)
always ( id1 == id2 -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually (id3 == id4)) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> (not fall (id2 == num3value#)) until [num5temporala#:num5temporalb#] (not fall (id3 >= num4valuea# and id3 <= num4valueb#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( always (id1 > num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always (id1 == id2 or id3 == id4)
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( once (id1 == id2) -> always (eventually [0:num1temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) or not (id2 < num2value#) -> id3 < num3value# )
eventually (id1 == num1value# or id2 >= num2value#)
always ( id1 < num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#) -> not ((id3 < num3value#) until [num4temporala#:num4temporalb#] (id4 == id5)) )
always ( fall (id1 == num1value#) or rise (id2 >= num2value#) -> eventually [0:num4temporal#] (always (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 > num1value# -> always (eventually (id2 <= num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and not rise (id2 == id3))
always ( id1 <= num1value# -> fall (always [num2temporala#:num2temporalb#] (not (id2 == id3))) )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 > num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (not fall (id3 >= num4value#))) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (rise (id3 == num3value#)) )
always ( id1 < num1value# or id2 < num2value# -> always (not (id3 == id4)) )
always (not (id1 > num1valuea# and id1 < num1valueb#))
always ( id1 <= num1value# or id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> id3 <= num1value# )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> not (once [0:num2temporal#] (id3 == num1value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> not fall (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
eventually [0:num3temporal#] (id1 < num1value# and id2 > num2value#)
always ( not ((id1 == id2) since (id3 == num1value#)) -> eventually [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) until (id4 <= num2value#) )
always ( (not fall (id1 >= num1value#)) since [0:num3temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually [num4temporala#:num4temporalb#] (id3 == id4) )
always ( id1 == num1value# and id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 == num3value#))) )
always ( not (id1 >= num1value#) and not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 == num3value#)) )
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num3temporal#] (id1 >= num1value# or not rise (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 >= num3value#) )
eventually (not rise (id1 == id2) or id3 <= num1value#)
always ( rise (id1 <= num1value#) -> rise ((id2 == num2value#) until [num4temporala#:num4temporalb#] (rise (id3 >= num3value#))) )
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (id1 > num1value#)
always ( once [0:num2temporal#] (id1 > num1value#) -> not ((id2 >= num3valuea# and id2 <= num3valueb#) until (id3 > num4value#)) )
always ( id1 < num1value# and rise (id2 >= num2value#) -> eventually (always (not (id3 <= num3value#))) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( id1 <= num1value# and id2 >= num2value# -> fall (historically [0:num4temporal#] (id3 < num3value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#) and id2 == id3)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( (id1 == num1value#) since (rise (id2 == num2value#)) -> (not (id3 < num3value#)) until [0:num5temporal#] (id4 >= num4value#) )
always ( id1 == id2 -> not (id3 <= num1value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num2value#) since (id3 > num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 -> eventually [0:num2temporal#] (fall (id3 >= num1valuea# and id3 < num1valueb#)) )
always ( id1 <= num1value# -> id2 == num2value# or fall (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( once [0:num2temporal#] (id1 == num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 == num2value#)) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always (id3 == num1value#)) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and id2 > num2value#)
always ( rise (id1 == num1value#) -> not (id2 > num2value#) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always (id1 >= num1value# and id2 == num2value#)
always ( not rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always ( id1 >= num1value# and id2 == id3 -> not (eventually [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
eventually [0:num3temporal#] (id1 > num1value# and id2 <= num2value#)
always ( not (once [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id2 == num3value#))) )
always ( rise (id1 < num1value#) and rise (id2 < num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num2temporal#] (id1 > num1value# and not (id2 == id3))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 == num1value# or id2 <= num2value# -> always [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( id1 == num1value# and id2 > num2value# -> id3 > num3value# )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num3temporal#] (rise (id1 > num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num1temporal#] (id1 == id2)
always (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1value#) -> fall (id2 == id3) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# and not fall (id2 > num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( id1 >= num1value# -> not (always [0:num2temporal#] (id2 == id3)) )
always ( not (once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 == num1value#) -> id2 == num2value# )
eventually [0:num2temporal#] (not (id1 == id2) or id3 == num1value#)
always ( rise (id1 == num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always [0:num3temporal#] (id1 <= num1value# or id2 > num2value#)
eventually (id1 <= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> eventually (id2 == id3) )
always ( eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) and id3 == num3value# )
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( once [num2temporala#:num2temporalb#] (rise (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always (not (id1 <= num1value#))
always ( id1 > num1value# and not (id2 < num2value#) -> id3 < num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) since [0:num4temporal#] (rise (id3 >= num3value#)) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> fall (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (id1 <= num1value#)
always ( id1 < num1value# -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
eventually (id1 > num1value#)
always ( id1 == id2 and id3 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( id1 <= num1value# -> id2 >= num2value# )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not ((id1 == num1value#) since (rise (id2 < num2value#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until (id3 == id4) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 == id3) until (id4 >= num2value#) )
always ( rise (id1 < num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 > num1value#) )
eventually [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always ( id1 == num1value# and id2 <= num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (not fall (id2 == id3)) )
always ( id1 <= num1value# -> always (id2 == num2value#) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2value#))) )
always ( id1 <= num1value# -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 == id2) -> always (id3 > num1value#) )
always ( id1 == num1value# or fall (id2 == num2value#) -> not (always [num4temporala#:num4temporalb#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (id4 > num2value#) )
always ( id1 >= num1value# -> id2 == id3 and id4 == id5 )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> not ((not (id4 >= num2valuea# and id4 <= num2valueb#)) until [0:num4temporal#] (not (id5 < num3value#))) )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 > num2value#)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always (id1 == num1value# and id2 == id3)
always (id1 == id2)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> not (historically [0:num4temporal#] (id3 == num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num2temporal#] (id2 == id3) -> (id4 == id5) until (id6 >= num3value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( id1 == id2 or id3 == id4 -> always [0:num2temporal#] (not (id5 >= num1valuea# and id5 <= num1valueb#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> id2 < num2value# or id3 <= num3value# )
always ( not (always [0:num1temporal#] (id1 == id2)) -> not (always [0:num3temporal#] (id3 <= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> always (id3 >= num1valuea# and id3 <= num1valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (not (id3 <= num3value#)) )
always ( id1 == id2 -> always [0:num1temporal#] (id3 == id4) )
always [0:num3temporal#] (id1 > num1value# and not (id2 == num2value#))
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 < num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (id2 > num2valuea# and id2 <= num2valueb#) and id3 < num3value# )
always ( not (id1 == id2) -> always (eventually [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( rise (id1 < num1value#) and rise (id2 == num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
eventually [0:num2temporal#] (id1 < num1value#)
always ( not fall (id1 == num1value#) and id2 == num2value# -> not (id3 < num3value#) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> id2 <= num2value# and id3 < num3value# )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( id1 > num1value# or id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id4 >= num2value#))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( id1 > num1value# and id2 <= num2value# -> id3 <= num3value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 == num1value#) and rise (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 > num3value#)) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( id1 < num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (eventually (rise (id3 < num3value#))) )
always ( once (not (id1 < num1value#)) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == id2) -> id3 <= num1value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
eventually [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always (id1 == num1value# and id2 == num2value#)
always ( not (historically (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) or rise (id2 >= num2value#))
always ( rise (id1 >= num1value#) -> fall ((id2 >= num2value#) until [0:num4temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (id3 == id4) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( fall (id1 == num1value#) -> rise (id2 > num2value#) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( historically [num1temporala#:num1temporalb#] (not (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id3 >= num2valuea# and id3 <= num2valueb#))) )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3value# )
always ( rise (id1 == num1value#) -> not (id2 > num2value#) )
always ( id1 == num1value# and rise (id2 >= num2value#) -> (id3 > num3value#) until [0:num5temporal#] (rise (id4 <= num4value#)) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2value#))
eventually (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( not (id1 <= num1value#) and rise (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> not rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( eventually [0:num1temporal#] (id1 == id2) -> fall (always [num3temporala#:num3temporalb#] (id3 <= num2value#)) )
always ( eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#)) -> eventually [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
eventually [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always [0:num2temporal#] (id1 < num1value# or id2 == id3)
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( id1 < num1value# or rise (id2 >= num2value#) -> eventually [0:num3temporal#] (not (id3 == id4)) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 < num1value# and id2 == id3 -> not (always [0:num2temporal#] (id4 == id5)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually (id2 > num2value#)) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( id1 >= num1value# or rise (id2 <= num2value#) -> id3 == num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 <= num2value# )
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 -> eventually [num1temporala#:num1temporalb#] (always [0:num2temporal#] (id3 == id4)) )
eventually [0:num2temporal#] (not (id1 == num1value#) or id2 == id3)
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and fall (id3 == num3value#) )
always ( rise (id1 < num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) or not (id3 == num3value#) )
always ( id1 == num1value# -> (id2 < num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 > num1value#) -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( once (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( (id1 > num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (always [0:num5temporal#] (id3 == num4value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 < num1value#))) )
always ( rise (id1 <= num1value#) -> (not (id2 == num2value#)) until [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) or rise (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( rise (id1 == num1value#) and not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> historically [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> rise (id2 == id3) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 <= num2value#)) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always (id1 == num1value#)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( not fall (once [0:num1temporal#] (id1 == id2)) -> (id3 == num2value#) until [0:num4temporal#] (id4 >= num3value#) )
always ( id1 == num1value# or id2 <= num2value# -> (id3 == id4) until (not fall (id5 >= num3value#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num2temporala#:num2temporalb#] (fall (id2 == id3))) )
always ( rise (id1 < num1value#) -> always (eventually (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num3temporal#] (id1 < num1value# or id2 <= num2value#)
always ( id1 <= num1value# -> historically [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( not rise (once [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3value#)) )
always ( rise (id1 == num1value#) -> not rise (id2 == id3) )
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num1temporal#] (id1 == id2)
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually (id2 >= num3value#) )
always ( not (id1 == id2) and id3 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 < num2value#)) )
always (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 > num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) or id3 <= num3value# )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until (rise (id3 < num3value#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 <= num1value#) and id2 == num2value# -> always [num3temporala#:num3temporalb#] (id3 == id4) )
always ( id1 == id2 -> historically (not (id3 < num1value#)) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == num1value# or id2 == id3 -> always (not (id4 <= num2value#)) )
always ( (id1 == num1value#) until [0:num3temporal#] (id2 < num2value#) -> eventually [0:num5temporal#] (id3 > num4valuea# and id3 <= num4valueb#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# and id2 == id3 -> once [0:num3temporal#] (id4 == num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and rise (id3 == num1value#))
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> not ((id2 > num3value#) until [0:num5temporal#] (id3 <= num4value#)) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 == id4) since [num3temporala#:num3temporalb#] (id5 == id6) )
always [0:num3temporal#] (id1 >= num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( once [0:num1temporal#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 > num2valuea# and id3 < num2valueb#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always (id1 <= num1value#)
always ( id1 == num1value# and rise (id2 == num2value#) -> id3 == num3value# or id4 == id5 )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 == num3value#))) )
always ( not rise (id1 == num1value#) and rise (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( id1 == num1value# -> rise ((id2 == num2value#) until (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1value#) and id2 >= num2value# -> always [0:num3temporal#] (eventually (rise (id3 == id4))) )
always [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and not fall (id2 > num2value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == id2) -> (id3 >= num1value#) until [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (rise (id3 >= num3value#)) )
always ( not (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num2temporala#:num2temporalb#] (fall (id2 == id3))) )
always ( fall (id1 == num1value#) -> eventually (id2 == num2value#) )
always ( rise (id1 == id2) -> id3 == num1value# and (id4 > num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( fall (id1 == num1value#) -> eventually (always (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( historically [num2temporala#:num2temporalb#] (not fall (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always (id2 > num3value#)) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 == id2 -> id3 <= num1value# or id4 == id5 )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 == id2 or id3 <= num1value# -> eventually [0:num3temporal#] (id4 >= num2valuea# and id4 < num2valueb#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 == num1value# and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (rise (id3 <= num3value#)) )
eventually (rise (id1 < num1value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 == id4 )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (not fall (id2 == id3)) )
always ( id1 > num1value# and id2 <= num2value# -> rise (eventually (id3 < num3value#)) )
always ( id1 == id2 or not (id3 < num1value#) -> always [0:num3temporal#] (id4 > num2value#) )
always ( not (historically (id1 > num1value#)) -> not (eventually [0:num3temporal#] (fall (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 > num2value#)) )
always [0:num1temporal#] (id1 == id2)
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 >= num2value#)
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( once [num1temporala#:num1temporalb#] (rise (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 > num2value#))) )
eventually ((id1 >= num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) and id2 <= num2value# -> fall ((id3 == id4) until [0:num3temporal#] (id5 == id6)) )
always [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> always (eventually (rise (id3 >= num1value#))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( not (id1 <= num1value#) and id2 < num2value# -> always (id3 == num3value#) )
eventually [0:num1temporal#] (not fall (id1 == id2))
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == id2) -> rise (id3 == id4) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 < num1value#)
eventually (id1 < num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (not rise (id2 >= num2valuea# and id2 <= num2valueb#)) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually (id1 == id2 or not (id3 > num1valuea# and id3 < num1valueb#))
always ( fall (id1 == num1value#) -> not (id2 == num2value#) )
always [num1temporala#:num1temporalb#] (not (id1 == id2))
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 > num2value#))) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> rise (eventually (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3value# )
always (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not (id2 < num2value#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always (id1 == num1value#)
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( id1 < num1value# -> id2 == id3 )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) or not (id2 == num2value#) -> always (eventually [num4temporala#:num4temporalb#] (rise (id3 > num3value#))) )
always ( not (id1 < num1value#) and id2 == num2value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 >= num1value# or not (id2 == id3) -> (id4 == num2value#) until [0:num4temporal#] (id5 > num3valuea# and id5 < num3valueb#) )
always [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( historically (id1 >= num1valuea# and id1 < num1valueb#) -> historically [num2temporala#:num2temporalb#] (not rise (id2 == id3)) )
always ( rise (id1 == num1value#) -> fall (id2 == num2value#) or id3 < num3value# )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (rise (id2 <= num2value#))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (fall (id3 > num1valuea# and id3 <= num1valueb#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( historically [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( rise (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 == num3value#) )
eventually (rise (id1 >= num1value#) and rise (id2 > num2value#))
always [0:num2temporal#] (id1 < num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 < num3value# )
eventually [0:num3temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# or id2 == id3 -> eventually (always (id4 == id5)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always (id1 < num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always (id1 < num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> (id3 > num3valuea# and id3 <= num3valueb#) until [0:num5temporal#] (id4 <= num4value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( fall (id1 == num1value#) -> not ((id2 == id3) since (id4 == id5)) )
always (id1 == id2)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 == num1value#) -> eventually (id2 == num2value#) )
always ( rise (id1 > num1value#) or id2 >= num2value# -> always [0:num4temporal#] (id3 <= num3value#) )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually (id2 >= num2value#)) )
always ( rise (id1 == id2) -> once (id3 <= num1value#) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 == id2) -> not (always (not (id3 > num1valuea# and id3 <= num1valueb#))) )
always ( (not rise (id1 == id2)) until [0:num1temporal#] (not (id3 == id4)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id5 >= num2valuea# and id5 <= num2valueb#)) )
eventually [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> (id2 == id3) until [0:num3temporal#] (rise (id4 >= num2value#)) )
always ( rise (id1 >= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
eventually (id1 == num1value# or id2 <= num2value#)
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> eventually (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> not fall (id3 > num1value#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> eventually (always (id2 < num2value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1value# and not (id2 == id3) -> (id4 >= num2valuea# and id4 <= num2valueb#) or id5 < num3value# )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#))
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [num2temporala#:num2temporalb#] (not rise (id3 == id4))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num2temporala#:num2temporalb#] (rise (id2 == id3)) -> not (once [num4temporala#:num4temporalb#] (not (id4 == num3value#))) )
always ( rise (id1 > num1value#) -> rise (id2 <= num2value#) )
always ( not (id1 == id2) and id3 < num1value# -> eventually (id4 == num2value#) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (rise (id3 == id4)) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always ( not fall (id1 == num1value#) or not (id2 >= num2value#) -> (id3 <= num3value#) until [0:num5temporal#] (id4 == num4value#) )
always ( (id1 > num1value#) until [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 > num4value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 > num2value#))) )
always ( historically [0:num2temporal#] (not (id1 == num1value#)) -> always (eventually (not (id2 == id3))) )
always ( rise (id1 > num1value#) -> (id2 > num2value#) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always (id1 == id2)
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
eventually [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 < num2valueb#))
always (id1 == num1value#)
always [0:num2temporal#] (id1 <= num1value#)
always [0:num2temporal#] (id1 == num1value#)
always (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 < num2value#) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 == num2value#)) until [0:num4temporal#] (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == id2) -> id3 == id4 )
always ( not rise (id1 == id2) and id3 == id4 -> rise (id5 <= num1value#) )
always ( id1 >= num1value# or rise (id2 > num2value#) -> not rise (eventually (rise (id3 <= num3value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> not (id4 > num2valuea# and id4 <= num2valueb#) or id5 == id6 )
always ( id1 > num1value# and id2 >= num2value# -> eventually (id3 > num3value#) )
always ( rise (id1 == num1value#) -> not (eventually [0:num3temporal#] (id2 <= num2value#)) )
always ( rise ((id1 >= num1value#) since [num3temporala#:num3temporalb#] (not (id2 < num2value#))) -> always (eventually [num5temporala#:num5temporalb#] (rise (id3 <= num4value#))) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (id3 == id4) )
always ( id1 > num1value# and rise (id2 >= num2value#) -> id3 < num3value# )
always ( not (id1 == num1value#) -> always (eventually (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> always (id2 == id3) )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> id3 >= num3valuea# and id3 < num3valueb# )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 < num3valueb#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( id1 == id2 and id3 > num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id4 == id5))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 <= num1value#)
eventually [0:num1temporal#] (id1 == id2)
eventually (id1 == id2)
always ( fall (id1 == id2) -> not (id3 >= num1value#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( (not (id1 == id2)) since [0:num2temporal#] (id3 < num1value#) -> always (eventually [0:num4temporal#] (rise (id4 <= num3value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not (always [num4temporala#:num4temporalb#] (not (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> (id3 > num3value#) until [0:num5temporal#] (rise (id4 < num4value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always (not fall (id1 == num1value#))
always [0:num2temporal#] (not (id1 > num1value#))
always ( rise (id1 == id2) -> not (id3 == num1value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( not fall (id1 == num1value#) or id2 >= num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (not (id2 <= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) since (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 < num3value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 == num1value#) and id2 == num2value# -> (not (id3 >= num3value#)) until (not rise (id4 >= num4value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise ((id1 == num1value#) since (rise (id2 < num2value#))) -> not ((id3 < num3value#) until (rise (id4 <= num4value#))) )
always ( id1 <= num1value# -> id2 > num2value# )
always [0:num3temporal#] (id1 == num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always [0:num3temporal#] (id1 < num1value# and id2 <= num2value#)
always ( id1 > num1value# and rise (id2 >= num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 == id2 -> id3 <= num1value# or rise (id4 == num2value#) )
eventually (id1 == num1value#)
always ( id1 > num1value# or id2 == num2value# -> (id3 >= num3value#) until [num5temporala#:num5temporalb#] (not (id4 > num4value#)) )
always ( not fall (id1 >= num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always (id1 == num1value#)
always ( once [num2temporala#:num2temporalb#] (id1 > num1value#) -> not (eventually [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 <= num3valueb#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (rise (id2 < num2value#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 <= num2value#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( (id1 == num1value#) since (id2 == num2value#) -> always [0:num4temporal#] (id3 < num3value#) )
always ( id1 >= num1value# and id2 < num2value# -> id3 == id4 and id5 == num3value# )
always (id1 > num1value# or not (id2 == id3))
always ( id1 > num1value# -> rise (always [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 > num1value# and id2 <= num2value# -> id3 > num3value# or not (id4 >= num4value#) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 == id4))) )
eventually [0:num2temporal#] (not (id1 > num1value#))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( fall (id1 == id2) -> (id3 == num1value#) until [0:num2temporal#] (fall (id4 == id5)) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 == num1value# and id2 >= num2value# -> id3 > num3value# )
always ( rise (id1 > num1value#) -> id2 == num2value# or id3 < num3value# )
always ( id1 >= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( not (id1 > num1value#) -> id2 <= num2value# )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 <= num3value# )
eventually [0:num2temporal#] (rise (id1 >= num1value#) or not (id2 == id3))
always ( rise (id1 >= num1value#) -> id2 < num2value# and id3 < num3value# )
always ( id1 == num1value# -> (id2 == num2value#) since [0:num4temporal#] (id3 == num3value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (not rise (id3 == id4))) )
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 < num1value#) -> historically [0:num3temporal#] (id2 <= num2value#) )
always ( historically (id1 == num1value#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num1temporala#:num1temporalb#] (not (id1 == id2))
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( id1 <= num1value# -> always (id2 == id3) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 == id3) )
always ( fall (id1 == num1value#) -> rise ((id2 == num2value#) until [num3temporala#:num3temporalb#] (fall (id3 == id4))) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 < num1value#) and id2 > num2value# -> historically [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num3value#) until (id3 > num4value#) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always (id1 <= num1value# and id2 == id3)
always ( id1 <= num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( historically [0:num2temporal#] (not (id1 == num1value#)) -> always [0:num3temporal#] (eventually (fall (id2 == id3))) )
always ( always (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 > num1value#) or id2 >= num2value# -> id3 == num3value# )
eventually (not (id1 > num1valuea# and id1 < num1valueb#))
eventually (not (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> id3 == num3value# )
always ( id1 == num1value# or rise (id2 == num2value#) -> eventually [0:num3temporal#] (not (id3 == id4)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( not (once [0:num2temporal#] (rise (id1 >= num1value#))) -> always [0:num4temporal#] (eventually (rise (id2 > num3value#))) )
always ( (id1 == id2) since (id3 > num1valuea# and id3 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( id1 > num1value# and not (id2 == id3) -> id4 == num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( (id1 == num1value#) until (rise (id2 >= num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always [0:num1temporal#] (id1 == id2)
always ( (id1 < num1value#) until [0:num3temporal#] (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (once (rise (id1 == num1value#))) -> fall (always (id2 <= num2value#)) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( id1 == id2 and id3 > num1value# -> id4 == num2value# )
always ( rise (id1 == num1value#) -> rise (id2 == num2value#) and id3 == id4 )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> always (eventually (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 > num2value#) )
always ( always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 == id3) until (id4 > num3valuea# and id4 < num3valueb#) )
always ( rise (id1 < num1value#) or id2 < num2value# -> (id3 > num3valuea# and id3 <= num3valueb#) and id4 < num4value# )
always ( (not rise (id1 > num1valuea# and id1 < num1valueb#)) since [0:num3temporal#] (rise (id2 < num2value#)) -> always [0:num5temporal#] (id3 == num4value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always (id3 < num1value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and id2 < num2value#)
always [0:num2temporal#] (not (id1 == id2) or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( eventually [0:num2temporal#] (rise (id1 == num1value#)) -> always [0:num3temporal#] (eventually (id2 == id3)) )
always ( rise (id1 == id2) -> historically [0:num2temporal#] (id3 == num1value#) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( fall (once (rise (id1 > num1value#))) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 == num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always [0:num2temporal#] (id1 < num1value#)
eventually [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( id1 < num1value# or id2 > num2value# -> id3 == num3value# )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) or fall (id2 == num2value#))
always ( not (id1 <= num1value#) -> id2 > num2value# )
always ( (id1 <= num1value#) since [0:num2temporal#] (id2 == id3) -> not (always [num4temporala#:num4temporalb#] (id4 >= num3value#)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 <= num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (not rise (id2 == id3))) )
always ( id1 == num1value# -> not rise (id2 == id3) and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (always [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always ( rise (id1 > num1value#) -> once [num3temporala#:num3temporalb#] (not (id2 > num2value#)) )
always ( id1 < num1value# -> id2 <= num2value# )
always ( id1 == num1value# -> id2 >= num2value# or id3 == id4 )
always [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
always ( id1 > num1value# -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always (not fall (id1 > num1value#))
always ( id1 == id2 or id3 <= num1value# -> always [0:num3temporal#] (id4 > num2value#) )
always ( id1 == num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
always [num2temporala#:num2temporalb#] (id1 > num1value# and id2 == id3)
always ( id1 >= num1value# and not (id2 > num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( not (historically (id1 >= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 > num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually (id1 > num1value#)
always [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] (id1 > num1value#)
eventually (id1 >= num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 < num1value#)
eventually (id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num3temporal#] (id1 < num1value# or id2 < num2value#)
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 == num1value#) -> eventually (always (not fall (id4 > num3valuea# and id4 < num3valueb#))) )
always ( id1 < num1value# and id2 == num2value# -> id3 <= num3value# )
always [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( not rise (id1 > num1value#) or id2 < num2value# -> always (eventually (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always [0:num3temporal#] (id1 < num1value# or id2 < num2value#)
always ( rise (id1 == id2) -> not rise (id3 == num1value#) )
always ( rise (id1 >= num1value#) -> not fall (always [0:num3temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( (not (id1 > num1value#)) since [0:num3temporal#] (id2 >= num2value#) -> (not (id3 > num4valuea# and id3 < num4valueb#)) since [0:num6temporal#] (id4 > num5value#) )
eventually [num2temporala#:num2temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> id2 <= num2value# and rise (id3 < num3value#) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 <= num3value#))) )
always ( rise (id1 >= num1value#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
always ( id1 > num1value# or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num2temporal#] (not fall (id1 == num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( not (eventually [num2temporala#:num2temporalb#] (id1 < num1value#)) -> (id2 <= num3value#) until (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( rise (id1 <= num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 >= num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( id1 == id2 and id3 == num1value# -> rise (id4 == num2value#) and (id5 >= num3valuea# and id5 <= num3valueb#) )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# and id3 < num3value# )
always ( rise (id1 < num1value#) and not (id2 > num2valuea# and id2 <= num2valueb#) -> once (rise (id3 == num3value#)) )
always ( eventually (rise (id1 > num1value#)) -> always [0:num3temporal#] (eventually (not (id2 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 == id3) )
always ( id1 == id2 or rise (id3 >= num1valuea# and id3 <= num1valueb#) -> (id4 >= num2valuea# and id4 <= num2valueb#) until [0:num4temporal#] (id5 == num3value#) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 > num1value#)
always ( not (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (rise (id3 > num3value#)) )
always ( id1 == id2 or rise (id3 > num1value#) -> not (historically [num2temporala#:num2temporalb#] (id4 == id5)) )
always ( id1 <= num1value# -> fall ((id2 >= num2value#) since (id3 > num3value#)) )
always ( not (id1 == num1value#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( rise (id1 >= num1value#) -> rise ((id2 > num2value#) until [num4temporala#:num4temporalb#] (rise (id3 < num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and id2 == num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> rise (id2 < num2value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise (id2 == id3) )
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num1temporal#] (id1 == id2)
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 < num1value#) -> rise (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) and id2 == num2value# -> eventually (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (fall (id1 >= num1valuea# and id1 < num1valueb#))
always ( id1 == num1value# -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) or (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 == id2) -> (id3 == num1value#) until [num2temporala#:num2temporalb#] (id4 == id5) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1value#) and id2 >= num2value# -> rise (id3 == id4) )
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 <= num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
eventually (id1 == num1value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (id3 > num1value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (historically [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 > num1value#) -> (id2 >= num2value#) since [num3temporala#:num3temporalb#] (id3 == id4) )
always (id1 == id2)
always ( not (id1 == num1value#) and id2 == id3 -> id4 > num2valuea# and id4 < num2valueb# )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == id4)) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id2 <= num3value#)) )
always ( id1 == num1value# or rise (id2 < num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> not (id3 == num1value#) or id4 == num2value# )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 == id2 -> id3 <= num1value# and (id4 > num2valuea# and id4 < num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 <= num2value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value# -> not ((id3 == num3value#) until [num4temporala#:num4temporalb#] (id4 == id5)) )
always ( rise (id1 >= num1value#) -> not (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# -> (not (id2 <= num2value#)) since [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( eventually [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always (id2 <= num3value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) and not (id2 == id3) -> not (id4 == num2value#) and rise (id5 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 == num2value#) -> (id3 > num3value#) until [0:num4temporal#] (id4 == id5) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( (id1 == num1value#) since (rise (id2 > num2value#)) -> eventually (always (id3 == id4)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and id4 <= num2value# )
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually (not (id2 == id3)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == num1value# -> not (historically [0:num3temporal#] (not (id2 < num2value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 == num2value#) -> id3 > num3valuea# and id3 <= num3valueb# )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (always (id3 < num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num3temporal#] (id1 > num1value# and rise (id2 <= num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num3temporal#] (not (id1 == num1value#) and id2 < num2value#)
eventually [0:num3temporal#] (rise (id1 < num1value#) or id2 > num2value#)
always ( id1 > num1value# -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 < num2value#))) )
eventually [0:num3temporal#] (not (id1 <= num1value#) and id2 <= num2value#)
always (not (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [num3temporala#:num3temporalb#] (not (id1 > num1value#) and id2 > num2value#)
always ( id1 == id2 -> id3 >= num1value# )
always ( eventually [num2temporala#:num2temporalb#] (id1 <= num1value#) -> (id2 > num3valuea# and id2 < num3valueb#) until [num5temporala#:num5temporalb#] (not fall (id3 == num4value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( id1 == num1value# and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always (not (id3 == num3value#))) )
always [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( id1 == id2 or not fall (id3 > num1valuea# and id3 < num1valueb#) -> id4 == num2value# )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually (id2 > num3valuea# and id2 < num3valueb#)) )
eventually [0:num1temporal#] (not (id1 == id2))
eventually [0:num2temporal#] (rise (id1 == num1value#) or id2 == id3)
always ( id1 > num1value# -> not fall (id2 == num2value#) )
always ( id1 > num1value# -> id2 < num2value# )
always ( (not (id1 < num1value#)) since (id2 == num2value#) -> eventually (always (not fall (id3 == num3value#))) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always ( id1 <= num1value# and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 >= num2value#))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
always [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( not (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [0:num3temporal#] (id1 > num1value# or rise (id2 < num2value#))
always ( always [0:num2temporal#] (id1 < num1value#) -> always [num4temporala#:num4temporalb#] (eventually (rise (id2 >= num3value#))) )
eventually [num3temporala#:num3temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
always ( rise (id1 == num1value#) -> id2 < num2value# and id3 == num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num2temporal#] (not (id2 == id3)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 == num3value#)) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( rise (once [0:num2temporal#] (id1 == num1value#)) -> eventually (id2 == id3) )
always ( not (id1 < num1value#) or id2 == num2value# -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always [0:num1temporal#] (id1 == id2)
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always (id3 == id4)) )
always ( id1 == num1value# or id2 <= num2value# -> id3 == id4 )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually (id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( not fall (always [num1temporala#:num1temporalb#] (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 < num2value#))) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually (rise (id2 == id3))) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == num1value#) -> once [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> not (id2 > num2value#) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually (fall (id1 == num1value#))
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 < num2value#)
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( id1 == num1value# or rise (id2 == num2value#) -> id3 == id4 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (rise (id2 < num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 == num1value#)) )
always ( id1 < num1value# and rise (id2 > num2value#) -> id3 <= num3value# or id4 >= num4value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 <= num2value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (not rise (id3 > num1value#)) )
always ( historically [0:num2temporal#] (not (id1 == num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( id1 == id2 and rise (id3 <= num1value#) -> eventually [0:num2temporal#] (id4 == id5) )
always ( rise (id1 == num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) )
always ( id1 == id2 and id3 >= num1value# -> eventually [num3temporala#:num3temporalb#] (rise (id4 == num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always [0:num2temporal#] (id1 < num1value#)
always ( id1 < num1value# or id2 < num2value# -> id3 == num3value# )
always ( id1 <= num1value# or id2 == id3 -> always [0:num3temporal#] (id4 == num2value#) )
always [0:num3temporal#] (id1 == num1value# or not (id2 <= num2value#))
always ( (id1 == num1value#) since [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (id3 >= num4value#) )
always ( id1 < num1value# -> eventually (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# -> not ((id2 >= num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( not (id1 == id2) or (id3 >= num1valuea# and id3 < num1valueb#) -> not (id4 > num2value#) )
eventually (not (id1 == id2) and rise (id3 >= num1value#))
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( id1 == num1value# and id2 == id3 -> id4 < num2value# and id5 == num3value# )
always ( eventually [0:num2temporal#] (id1 > num1value#) -> (not fall (id2 > num3valuea# and id2 < num3valueb#)) since [num5temporala#:num5temporalb#] (id3 > num4value#) )
always ( rise (id1 >= num1value#) -> eventually (always (id2 >= num2value#)) )
eventually (id1 > num1value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> (id2 > num2value#) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always [num3temporala#:num3temporalb#] (not (id1 > num1value#) or id2 < num2value#)
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and not (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( historically [0:num2temporal#] (id1 >= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id2 < num3value#)) )
always ( not (once (id1 == num1value#)) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (rise (id3 < num3value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always (not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == id3) )
always ( id1 < num1value# or rise (id2 > num2value#) -> always [0:num4temporal#] (id3 < num3value#) )
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
always [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always ( rise (id1 > num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 >= num1value#) -> not rise (id2 == id3) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (id1 < num1value# or not (id2 == num2value#))
always [0:num1temporal#] (id1 == id2)
eventually (rise (id1 <= num1value#) or id2 >= num2value#)
always [num2temporala#:num2temporalb#] (id1 < num1value# or id2 == id3)
always ( fall (id1 == id2) -> rise (id3 <= num1value#) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 -> always (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id3 > num3value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 == id2) -> id3 > num1value# )
always [num3temporala#:num3temporalb#] (id1 > num1value# and not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> once [num2temporala#:num2temporalb#] (fall (id2 == id3)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> not fall (id3 > num1value#) )
eventually (rise (id1 > num1value#))
always ( id1 == num1value# and not fall (id2 == num2value#) -> not (id3 >= num3value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not rise (id1 >= num1value#) -> id2 <= num2value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> not ((id2 <= num2value#) until [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 < num1value#) or id2 > num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 == id2) -> id3 == id4 )
always ( id1 == id2 -> always [0:num2temporal#] (id3 < num1value#) )
always ( historically (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 <= num1value#)) )
always ( (id1 >= num1value#) since (rise (id2 > num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> (id2 == id3) since [num3temporala#:num3temporalb#] (id4 < num2value#) )
eventually (id1 <= num1value#)
eventually [0:num3temporal#] (id1 >= num1value# and not fall (id2 == num2value#))
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == id2) -> eventually (always (not fall (id3 > num1value#))) )
always ( not (historically [num1temporala#:num1temporalb#] (id1 == id2)) -> always (eventually (fall (id3 == id4))) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( fall (id1 == id2) -> eventually (always [0:num1temporal#] (id3 == id4)) )
eventually [0:num3temporal#] (id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always (id1 == num1value# and not (id2 < num2value#))
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
eventually (rise (id1 == id2))
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == id3) -> id4 >= num2value# )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> not (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (id3 > num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not (id1 == num1value#) or id2 == num2value# -> id3 > num3value# )
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually (id1 > num1value# and rise (id2 == num2value#))
always (not rise (id1 > num1valuea# and id1 < num1valueb#))
always [0:num3temporal#] (id1 > num1value# or id2 >= num2value#)
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 < num1value# and id2 == id3 -> id4 < num2value# or id5 < num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( once (fall (id1 == num1value#)) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( fall (id1 == id2) -> not ((id3 > num1valuea# and id3 < num1valueb#) until (rise (id4 == id5))) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always (id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 <= num1value#) -> (not (id2 < num2value#)) until (fall (id3 == num3value#)) )
eventually (id1 >= num1value# and id2 <= num2value#)
always ( id1 < num1value# -> id2 > num2value# )
eventually (rise (id1 <= num1value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (rise (id2 <= num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> historically [num2temporala#:num2temporalb#] (id2 == id3) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 >= num1valuea# and id3 < num1valueb#))) )
always ( id1 == num1value# and id2 == id3 -> id4 <= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( not rise ((id1 == id2) since [num1temporala#:num1temporalb#] (id3 == id4)) -> eventually [num3temporala#:num3temporalb#] (id5 > num2value#) )
always [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 == num1value#) -> (not (id2 <= num2value#)) since [num4temporala#:num4temporalb#] (fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
eventually (id1 == id2)
always [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 > num2valuea# and id3 < num2valueb#)) )
always ( fall (id1 == num1value#) -> id2 == id3 and id4 > num2value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3value#) until [num5temporala#:num5temporalb#] (id4 >= num4value#) )
always ( rise (id1 == id2) -> (id3 == id4) until (id5 <= num1value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (once [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or not (id3 < num1value#))
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> rise (id3 >= num3valuea# and id3 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num3temporala#:num3temporalb#] (id1 < num1value# or id2 < num2value#)
eventually [0:num2temporal#] (id1 > num1value# or id2 == id3)
always [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num3temporal#] (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( id1 >= num1value# and id2 <= num2value# -> id3 <= num3value# or id4 >= num4value# )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# and id3 < num3value# )
eventually [0:num3temporal#] (rise (id1 == num1value#) and id2 >= num2value#)
always ( (id1 >= num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) and fall (id4 == num2value#) )
always ( historically (not (id1 <= num1value#)) -> (id2 == id3) until [0:num2temporal#] (id4 == id5) )
always ( once [0:num1temporal#] (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always (not (id3 == id4))) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) or id2 == num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 >= num1value# -> always (id2 > num2value#) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always (id1 >= num1value# and not (id2 == num2value#))
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> fall (eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) )
always ( not rise ((id1 == num1value#) since [0:num3temporal#] (not (id2 >= num2value#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not rise (id3 == id4))) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#))
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ((id1 >= num1valuea# and id1 < num1valueb#) or not (id2 >= num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 <= num2value#) until [0:num3temporal#] (id3 == id4) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) and not (id2 <= num2value#))
always ( id1 == id2 and id3 == id4 -> always [0:num1temporal#] (eventually [0:num2temporal#] (id5 == id6)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 > num1value#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( not (once [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 >= num3value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( not (historically [0:num1temporal#] (id1 == id2)) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id3 >= num2valuea# and id3 <= num2valueb#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( once [0:num1temporal#] (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 <= num3value#) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 >= num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) and id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always [0:num3temporal#] (id1 > num1value# or id2 >= num2value#)
always ( id1 > num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (id3 == num3value#) and not (id4 <= num4value#) )
always ( not ((not (id1 > num1value#)) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 == id4)) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
always (not (id1 <= num1value#))
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 == id2) -> id3 == id4 and not (id5 == num1value#) )
always ( id1 == num1value# -> id2 == num2value# )
always ( (id1 < num1value#) since [0:num3temporal#] (id2 == num2value#) -> always (eventually [0:num5temporal#] (id3 == num4value#)) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually (id3 < num3value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1value#) and id2 > num2value#)
always ( rise (id1 >= num1value#) -> not (id2 > num2value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
always [0:num3temporal#] (id1 > num1value# and not (id2 == num2value#))
always ( not fall ((id1 >= num1valuea# and id1 <= num1valueb#) since (not (id2 == num2value#))) -> (id3 > num3value#) since [0:num5temporal#] (id4 == num4value#) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 == id2) -> id3 < num1value# )
always ( id1 == id2 -> rise (id3 <= num1value#) )
always ( id1 < num1value# or id2 == num2value# -> always (eventually [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( id1 == num1value# -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> id2 == id3 or (id4 > num2valuea# and id4 < num2valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always [0:num3temporal#] (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> always (eventually [0:num1temporal#] (not (id3 == id4))) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not fall (id2 == num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (id1 <= num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( rise (id1 > num1value#) -> id2 <= num2value# and id3 > num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# or id3 >= num3value# )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( always (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (always [0:num2temporal#] (id2 == id3)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( id1 < num1value# or rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
always ( rise (id1 == id2) -> always (id3 <= num1value#) )
always ( id1 < num1value# and id2 == id3 -> (id4 >= num2value#) since (id5 >= num3value#) )
always ( id1 == id2 -> id3 < num1value# or not (id4 == num2value#) )
always ( rise (id1 < num1value#) -> id2 == id3 and not (id4 > num2value#) )
always ( (id1 < num1value#) since [0:num3temporal#] (id2 > num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 <= num4value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (rise (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 < num1value#) -> not (eventually [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( rise (id1 == num1value#) -> eventually (always (id2 == num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == num1value# or id2 >= num2value# -> id3 >= num3value# )
always ( not (historically (id1 >= num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( id1 > num1value# and not (id2 == num2value#) -> rise (id3 < num3value#) or id4 >= num4value# )
always ( id1 == num1value# -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> id2 == id3 or id4 < num2value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 < num2value#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> rise (id3 >= num3valuea# and id3 < num3valueb#) or rise (id4 >= num4value#) )
always ( rise (id1 == id2) -> fall (once (id3 < num1value#)) )
always ( id1 <= num1value# -> id2 == id3 )
always ( not ((id1 > num1value#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) -> always (eventually [num4temporala#:num4temporalb#] (rise (id3 == id4))) )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually [num3temporala#:num3temporalb#] (not rise (id1 >= num1value#) or rise (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> historically (id2 == id3) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 == id3) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# -> fall (once (id2 <= num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 > num2valuea# and id2 < num2valueb# )
eventually (id1 >= num1value# and not (id2 <= num2value#))
always ( id1 <= num1value# -> (id2 == id3) until (rise (id4 < num2value#)) )
always ( rise (id1 >= num1value#) and id2 >= num2value# -> id3 == num3value# )
always ( rise (id1 < num1value#) -> (id2 == num2value#) since [0:num4temporal#] (rise (id3 == num3value#)) )
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( rise (id1 < num1value#) or not (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( id1 == id2 and id3 == id4 -> fall (eventually [num2temporala#:num2temporalb#] (id5 == num1value#)) )
always ( not (once [0:num1temporal#] (rise (id1 == id2))) -> always [num3temporala#:num3temporalb#] (id3 > num2valuea# and id3 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (always (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num1temporal#] (id1 == id2 or not (id3 == id4))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not (id2 == num2value#) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( fall ((not (id1 <= num1value#)) since (id2 >= num2valuea# and id2 <= num2valueb#)) -> not (eventually [0:num4temporal#] (id3 == num3value#)) )
always ( (id1 == num1value#) since [0:num2temporal#] (id2 == id3) -> eventually [0:num4temporal#] (not fall (id4 >= num3valuea# and id4 <= num3valueb#)) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == num2value#)) )
eventually [0:num3temporal#] (fall (id1 == num1value#) or fall (id2 == num2value#))
always ( rise (id1 == num1value#) or id2 == num2value# -> eventually (always [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> rise (once (id3 == num1value#)) )
always ( eventually (id1 <= num1value#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
always [0:num2temporal#] (id1 == id2 and not (id3 == num1value#))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always (id2 == id3) )
always ( once [0:num2temporal#] (id1 < num1value#) -> eventually [0:num4temporal#] (always (not (id2 == num3value#))) )
always ( id1 < num1value# -> not rise (id2 == id3) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> fall (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 <= num1value# and not rise (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id4 == num2value#))) )
always ( (not rise (id1 == id2)) since [0:num2temporal#] (rise (id3 >= num1value#)) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id4 > num3valuea# and id4 <= num3valueb#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> (not fall (id2 >= num2value#)) since [0:num3temporal#] (id3 == id4) )
always ( id1 >= num1value# and not (id2 >= num2value#) -> (id3 == id4) since [0:num4temporal#] (id5 <= num3value#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> not ((id2 < num2value#) since [0:num3temporal#] (id3 == id4)) )
always ( id1 >= num1value# -> always [0:num2temporal#] (eventually (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( id1 < num1value# -> id2 < num2value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( id1 < num1value# -> not fall ((id2 > num2value#) until (not (id3 == num3value#))) )
always ( rise (id1 == id2) -> not (eventually (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 < num1value#) -> eventually (not (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (once [0:num2temporal#] (id1 <= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and not (id2 == num2value#))
eventually [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2value# )
always ( id1 >= num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [0:num4temporal#] (id3 >= num3value#)) )
always ( not rise (id1 == id2) -> id3 >= num1value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( id1 > num1value# -> historically (id2 == id3) )
always ( once (rise (id1 == num1value#)) -> (not rise (id2 == id3)) until (id4 == id5) )
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == id3) until (id4 == num2value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (id2 <= num2value#)) )
always ( id1 == num1value# or id2 <= num2value# -> id3 > num3value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 < num1value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> eventually [0:num2temporal#] (rise (id4 == id5)) )
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> always (eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 <= num1value# -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (eventually [0:num2temporal#] (id2 == id3)) )
always ( id1 == id2 -> id3 == num1value# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 >= num1value#))
always ( (id1 == id2) until [num2temporala#:num2temporalb#] (rise (id3 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id4 >= num3valuea# and id4 <= num3valueb#))) )
always ( rise (id1 == num1value#) -> id2 == id3 or id4 == id5 )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 >= num3value#) )
always ( rise (id1 == num1value#) or not fall (id2 >= num2value#) -> not ((id3 >= num3valuea# and id3 <= num3valueb#) until [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually (fall (id2 == num3value#)) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id4 == id5))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (not (id2 >= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 > num1value#) and not fall (id2 == id3) -> id4 >= num2value# )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( (id1 == num1value#) since [0:num2temporal#] (rise (id2 == id3)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id4 == id5))) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always (id1 == num1value# or id2 == id3)
always ( id1 > num1value# or not (id2 <= num2value#) -> not (eventually [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
eventually [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# and fall (id3 >= num3valuea# and id3 < num3valueb#) )
always ( id1 == id2 and id3 < num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id4 == id5)) )
always ( rise (id1 < num1value#) -> not (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 < num1value#) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( (id1 >= num1valuea# and id1 < num1valueb#) since (id2 == num2value#) -> not ((id3 == num3value#) until (rise (id4 > num4valuea# and id4 < num4valueb#))) )
eventually (rise (id1 == num1value#))
always ( id1 == num1value# -> always (id2 >= num2value#) )
always ( rise (historically [0:num2temporal#] (id1 > num1value#)) -> (id2 > num3value#) since [0:num4temporal#] (id3 == id4) )
always ( historically (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always [0:num3temporal#] (id1 >= num1value# or id2 >= num2value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id3 < num1value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 < num1value#) -> not (id2 <= num2value#) or not (id3 <= num3value#) )
eventually (rise (id1 >= num1value#) and (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# -> always (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 < num3value#)) )
always ( id1 < num1value# -> not (always [0:num2temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always (id1 == id2 or id3 > num1value#)
always ( rise (id1 >= num1value#) -> not fall (id2 == num2value#) and fall (id3 == num3value#) )
always ( id1 >= num1value# and rise (id2 > num2value#) -> always (eventually [0:num4temporal#] (rise (id3 <= num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (not (id2 < num2value#))) )
always (id1 < num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( (not (id1 > num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (id2 == num2value#) -> eventually (always [num5temporala#:num5temporalb#] (id3 == num4value#)) )
eventually [0:num2temporal#] (fall (id1 == num1value#) and id2 == id3)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( id1 == num1value# or rise (id2 > num2value#) -> id3 < num3value# )
eventually [0:num1temporal#] (id1 == id2)
always ( (id1 < num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 >= num4value#) until [num6temporala#:num6temporalb#] (not (id4 > num5value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == num1value#) -> not fall ((id2 == num2value#) since [num3temporala#:num3temporalb#] (id3 == id4)) )
always (id1 >= num1value# or id2 <= num2value#)
always (not (id1 == id2) or id3 == num1value#)
always ( rise (id1 <= num1value#) -> not (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( rise ((id1 <= num1value#) since (id2 == num2value#)) -> eventually [num4temporala#:num4temporalb#] (not (id3 < num3value#)) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always (id1 > num1valuea# and id1 < num1valueb#)
always ( not rise (id1 >= num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 <= num2value#) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( rise (id1 == id2) -> always (not (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) until [0:num2temporal#] (id2 == id3) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id4 == id5)) )
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( id1 == id2 -> not (always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 > num1value#) or id2 >= num2value# -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( id1 >= num1value# or id2 == num2value# -> historically [0:num4temporal#] (id3 <= num3value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( once (fall (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (eventually (not (id2 > num2value#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 >= num1value# and id2 == id3 -> id4 == id5 )
eventually (id1 <= num1value#)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( rise (id1 <= num1value#) -> id2 <= num2value# or id3 <= num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 > num2value#) -> id3 <= num3value# )
eventually [0:num2temporal#] (id1 >= num1value#)
always [0:num2temporal#] (id1 >= num1value#)
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (id2 <= num2value#)) -> eventually [0:num4temporal#] (fall (id3 == id4)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) or rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 < num3value#))) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 >= num4value#)) )
always ( rise (id1 == id2) -> id3 == num1value# or not rise (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 >= num1value#) -> once (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 >= num1value# or id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id4 == num2value#)) )
eventually (rise (id1 == id2))
always ( id1 >= num1value# or id2 == num2value# -> not fall (id3 > num3value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 == id5 )
always (id1 == id2)
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 < num1value#))) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( not (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == num1value#) -> rise (id2 < num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 == id3) )
always ( id1 == id2 and id3 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id4 == num2value#))) )
always [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> eventually (id2 == num2value#) )
always (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num3temporal#] (id1 < num1value# or id2 >= num2value#)
eventually [0:num3temporal#] (rise (id1 <= num1value#) or rise (id2 == num2value#))
always ( (not (id1 > num1valuea# and id1 < num1valueb#)) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> historically [0:num5temporal#] (id3 >= num4value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (not fall (id2 == id3))) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> eventually [0:num3temporal#] (always (id4 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( once [0:num1temporal#] (rise (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( id1 == id2 or id3 >= num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 == num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always (id3 == id4) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> always (id2 > num3valuea# and id2 < num3valueb#) )
eventually [0:num3temporal#] (id1 > num1value# or id2 < num2value#)
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> eventually [0:num5temporal#] (id3 == num4value#) )
always ( not (id1 == id2) or (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 > num2value# )
always ( rise (id1 == id2) -> id3 == num1value# or (id4 >= num2valuea# and id4 <= num2valueb#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( not fall (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (id3 == num3value#) )
always ( id1 < num1value# -> id2 >= num2value# or rise (id3 <= num3value#) )
always ( id1 < num1value# -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always ( not fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 == id3)) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 == id2 or fall (id3 == num1value#) -> eventually (always (id4 < num2value#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( fall (id1 == num1value#) -> not (id2 < num2value#) or (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == num1value# and id2 == num2value# -> eventually [0:num4temporal#] (rise (id3 >= num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> not ((not (id2 >= num2value#)) until [num4temporala#:num4temporalb#] (not rise (id3 > num3valuea# and id3 < num3valueb#))) )
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 >= num2value#))
always ( id1 < num1value# -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> rise (always [0:num3temporal#] (id2 == id3)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually (rise (id1 == id2))
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always (not fall (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( not fall (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( id1 == id2 -> historically (id3 == id4) )
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( once (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == id2 -> fall (id3 == num1value#) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 > num1value# and id2 <= num2value# -> id3 > num3valuea# and id3 <= num3valueb# )
always ( once [0:num1temporal#] (id1 == id2) -> (id3 == num2value#) until [num4temporala#:num4temporalb#] (id4 == num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 < num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 >= num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (not fall (id2 == num2value#)) until [num4temporala#:num4temporalb#] (fall (id3 == num3value#)) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id2 >= num3value#))) )
always ( rise (id1 == num1value#) -> rise (once [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#)) )
always [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (fall (id2 == num2value#))) )
always ( historically [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == id3))) )
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) and not (id3 <= num3value#) )
always ( id1 > num1value# -> historically [0:num3temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 <= num1valueb#))
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) until [0:num2temporal#] (id4 == id5) )
always ( rise (id1 == id2) -> id3 > num1value# )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always (id1 == id2)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
eventually [num2temporala#:num2temporalb#] (not fall (id1 > num1value#))
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( rise (id1 == id2) -> (not (id3 > num1value#)) since (fall (id4 == id5)) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 > num2value#))) )
eventually (id1 <= num1value#)
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always ( id1 == id2 and id3 > num1value# -> not (id4 == num2value#) and id5 > num3value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> not rise (historically [0:num2temporal#] (not rise (id2 == id3))) )
always ( historically (id1 > num1value#) -> once (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (id1 <= num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#) -> id3 == num3value# and id4 == num4value# )
always ( id1 > num1value# and not (id2 == id3) -> rise ((id4 > num2value#) until [num4temporala#:num4temporalb#] (id5 == num3value#)) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 >= num3valuea# and id2 <= num3valueb#) until [0:num5temporal#] (id3 > num4valuea# and id3 < num4valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not fall (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and id2 == num2value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always ( rise (id1 > num1value#) -> id2 >= num2value# )
eventually (rise (id1 == num1value#))
eventually [0:num2temporal#] (not (id1 <= num1value#))
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 == id2 and id3 == num1value# -> not (once [0:num3temporal#] (rise (id4 == num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#) -> (id3 < num3value#) until [0:num5temporal#] (rise (id4 < num4value#)) )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( not rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
always (id1 == num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> not fall (id3 >= num3value#) )
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (not (id2 <= num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> id3 == id4 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (id2 == id3)) )
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == id4 )
always ( id1 < num1value# or not rise (id2 >= num2value#) -> id3 == id4 )
always ( rise (id1 == id2) -> rise (id3 == num1value#) )
always ( not fall (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always (id1 <= num1value#)
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always (id1 <= num1value#)
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (not rise (id2 == id3)) )
always ( rise (id1 >= num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( id1 <= num1value# -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( fall (id1 == num1value#) -> (id2 == num2value#) until (id3 <= num3value#) )
always ( id1 == num1value# and id2 < num2value# -> not fall (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( historically (not (id1 <= num1value#)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 == num1value#))) )
always ( (not fall (id1 > num1valuea# and id1 < num1valueb#)) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == id4)) )
always (not (id1 <= num1value#) or not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == id2) -> id3 == id4 or id5 == id6 )
always (not (id1 > num1value#) and id2 == num2value#)
always ( fall (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (rise (id3 <= num1value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 and id4 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
eventually [0:num1temporal#] (id1 == id2)
eventually (id1 == num1value#)
always ( (id1 == num1value#) since (id2 == num2value#) -> always [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) or rise (id2 > num2value#) -> id3 <= num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value# -> rise (id3 == id4) )
always ( id1 <= num1value# -> always (eventually (rise (id2 >= num2value#))) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( (id1 == id2) since [0:num2temporal#] (id3 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 >= num3value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( id1 == num1value# or rise (id2 == num2value#) -> not fall ((id3 == id4) until [num4temporala#:num4temporalb#] (not fall (id5 == num3value#))) )
eventually [0:num2temporal#] (id1 <= num1value#)
eventually (id1 == num1value# and id2 < num2value#)
always ( always (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> not (historically [0:num3temporal#] (id2 <= num2value#)) )
always (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 < num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 == id3) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (historically (id1 < num1value#)) -> not ((id2 >= num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (id3 >= num3value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 or id4 <= num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( (id1 == id2) since (fall (id3 == id4)) -> always (eventually [num2temporala#:num2temporalb#] (fall (id5 == num1value#))) )
always ( not (id1 > num1value#) -> rise (id2 < num2value#) or id3 == id4 )
always ( rise (id1 <= num1value#) -> (id2 > num2value#) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( rise (id1 == num1value#) or not (id2 < num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (not (id3 == num1value#)) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) or rise (id3 == num3value#) )
always [0:num2temporal#] (id1 >= num1value# and not (id2 == id3))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 >= num1value# -> not (id2 >= num2value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2value#))) )
eventually [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and id2 == num2value#)
always ( (id1 > num1value#) since (fall (id2 == num2value#)) -> (id3 >= num3valuea# and id3 <= num3valueb#) since [0:num5temporal#] (id4 < num4value#) )
always ( not fall (historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> always (id2 == id3) )
always ( not (id1 < num1value#) and id2 == id3 -> id4 > num2valuea# and id4 < num2valueb# )
always ( not (id1 <= num1value#) and id2 >= num2value# -> always (eventually (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# or id2 < num2value# -> always (eventually [0:num3temporal#] (not (id3 == id4))) )
always ( eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> fall (always (id4 > num2valuea# and id4 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> id3 == num1value# or id4 == num2value# )
always ( fall (id1 == id2) -> id3 >= num1value# )
eventually [num3temporala#:num3temporalb#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
eventually [0:num3temporal#] (not (id1 >= num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always [0:num3temporal#] (id1 == num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (not fall (id1 == num1value#))
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 > num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 > num1value#)
always [0:num2temporal#] (id1 < num1value#)
eventually (rise (id1 < num1value#) and id2 == num2value#)
always (id1 == id2)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> always (id2 == num2value#) )
always ( id1 == id2 -> always (id3 >= num1valuea# and id3 <= num1valueb#) )
eventually [0:num2temporal#] (not rise (id1 == id2) or id3 >= num1value#)
eventually [0:num2temporal#] (id1 <= num1value#)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 == num2value#))
always ( rise (id1 < num1value#) -> always (eventually (rise (id2 >= num2value#))) )
always ( rise (id1 == num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (not (id2 >= num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (not fall (id3 == num4value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num2temporal#] (not (id1 <= num1value#))
always (not fall (id1 == num1value#))
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> eventually (always [0:num3temporal#] (id4 == num2value#)) )
always ( always [num1temporala#:num1temporalb#] (id1 == id2) -> (not (id3 == id4)) since [0:num2temporal#] (rise (id5 == id6)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
always ( fall (id1 == num1value#) -> eventually (not (id2 == num2value#)) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 <= num1value#) or not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (id3 == id4) )
always ( not (historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> once (rise (id2 < num2value#)) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 < num1value#)) )
eventually (rise (id1 > num1value#))
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (id2 < num2value#) )
always ( id1 > num1value# -> fall (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( id1 < num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( id1 == id2 and rise (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 > num2valuea# and id4 < num2valueb# )
always [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( fall (id1 == id2) -> not (id3 >= num1value#) )
always (id1 <= num1value# or id2 > num2value#)
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( (id1 < num1value#) since [0:num3temporal#] (rise (id2 <= num2value#)) -> always [0:num5temporal#] (id3 > num4value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1valuea# and id3 < num1valueb#))) )
always ( (not (id1 == num1value#)) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 == num4value#)) )
always ( not fall (id1 == num1value#) -> once [0:num3temporal#] (not (id2 < num2value#)) )
always ( fall (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (rise (id2 == id3)) )
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 <= num2valueb#) -> id3 > num3value# )
always ( not (id1 == id2) and (id3 >= num1valuea# and id3 < num1valueb#) -> once [num3temporala#:num3temporalb#] (rise (id4 > num2value#)) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 <= num1valueb#) and rise (id2 == num2value#))
always ( rise (id1 > num1value#) -> not ((id2 < num2value#) until (fall (id3 == num3value#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num2temporal#] (always (id2 == id3)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( eventually [num1temporala#:num1temporalb#] (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 == id4) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (always [num4temporala#:num4temporalb#] (id2 < num3value#)) )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> once [0:num4temporal#] (id3 >= num3value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3value#) until (id4 == id5) )
always ( rise (id1 == num1value#) -> id2 < num2value# and id3 == num3value# )
always ( rise (id1 == id2) -> id3 <= num1value# )
eventually [0:num3temporal#] (id1 <= num1value# or id2 == num2value#)
eventually [0:num3temporal#] (not fall (id1 == num1value#) or id2 >= num2value#)
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
always (id1 == id2 or id3 >= num1value#)
always ( not rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) and fall (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( fall (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (fall (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == num1value#) -> not rise (historically (id2 == num2value#)) )
always ( rise (id1 == id2) -> not (eventually (fall (id3 == id4))) )
always ( (id1 == num1value#) until [0:num2temporal#] (id2 == id3) -> eventually [0:num4temporal#] (always (id4 == num3value#)) )
always ( id1 == id2 and not (id3 >= num1value#) -> eventually (id4 == id5) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id3 == id4))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] (not (id1 <= num1value#) or not rise (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (not (id1 >= num1value#))
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 and rise (id3 == num1value#) -> eventually (always (id4 == id5)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) and not (id2 == id3))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> id2 >= num2value# or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( eventually (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
eventually (not rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( id1 == id2 or not (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (id4 >= num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> rise ((not (id2 == id3)) until [0:num3temporal#] (id4 >= num2value#)) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 <= num2value#))
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and id2 < num2value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) or (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 > num2value#) until (id3 == id4)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
always ( id1 > num1value# and id2 >= num2value# -> not (always [0:num4temporal#] (id3 > num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( fall (id1 == id2) -> id3 > num1value# )
always ( id1 == num1value# and id2 == id3 -> eventually [0:num3temporal#] (id4 == num2value#) )
always ( id1 == id2 -> historically [0:num2temporal#] (id3 <= num1value#) )
eventually (id1 == num1value# or not (id2 == id3))
always (id1 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( fall (id1 == num1value#) -> rise (id2 < num2value#) )
always ( rise (id1 <= num1value#) and id2 == id3 -> eventually [0:num3temporal#] (always (id4 <= num2value#)) )
always ( rise (id1 >= num1value#) -> not ((id2 == num2value#) since [0:num4temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( id1 < num1value# -> id2 == id3 )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always (id1 <= num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == id2 -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 == num1value# and id2 == num2value# -> id3 == id4 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always (id1 > num1value# or id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 == id2) -> eventually (always (id3 > num1value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id2 == id3))) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 < num1value#)) -> rise (always [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always (id1 == num1value# or id2 < num2value#)
always ( id1 < num1value# and id2 >= num2value# -> not rise (id3 == id4) )
eventually [0:num2temporal#] (id1 == id2 and not (id3 <= num1value#))
always ( id1 > num1valuea# and id1 < num1valueb# -> rise (id2 <= num2value#) and id3 >= num3value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num3temporal#] (id2 >= num2value#)) )
always ( id1 < num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always ( id1 >= num1value# -> always (id2 > num2value#) )
always ( id1 < num1value# or rise (id2 >= num2value#) -> historically (not fall (id3 > num3value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 == id2 or id3 > num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( eventually (rise (id1 <= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 < num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 > num2valuea# and id4 <= num2valueb#))) )
always ( id1 == num1value# -> fall (id2 >= num2valuea# and id2 <= num2valueb#) and not rise (id3 == num3value#) )
always ( rise (id1 > num1value#) -> rise (id2 < num2value#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( id1 == id2 or not fall (id3 > num1valuea# and id3 < num1valueb#) -> id4 == num2value# and not (id5 <= num3value#) )
always ( id1 <= num1value# or rise (id2 > num2value#) -> eventually [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or not (id2 == id3))
always ( id1 > num1value# -> id2 >= num2value# and rise (id3 <= num3value#) )
always ( id1 == id2 and id3 == id4 -> rise ((id5 >= num1valuea# and id5 <= num1valueb#) until [num3temporala#:num3temporalb#] (not rise (id6 >= num2value#))) )
always (id1 == id2)
always ( (id1 == num1value#) until [0:num2temporal#] (fall (id2 == id3)) -> always (id4 == num3value#) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) or not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( once [0:num2temporal#] (fall (id1 == num1value#)) -> (id2 == num3value#) until [0:num5temporal#] (id3 <= num4value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (rise (id3 == id4)) )
always ( fall (id1 == num1value#) -> rise (id2 >= num2value#) or id3 < num3value# )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> eventually (always [0:num4temporal#] (id3 > num3value#)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not rise (id2 > num2value#)) until (not (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == id2) -> historically [num2temporala#:num2temporalb#] (not (id3 <= num1value#)) )
eventually [0:num2temporal#] (not (id1 >= num1value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (id2 == num2value#) )
always ( id1 == num1value# or not fall (id2 == num2value#) -> eventually (id3 >= num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( not (always (id1 >= num1value#)) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == id2 or id3 == id4 -> id5 == num1value# )
eventually ((id1 > num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not ((id1 == id2) until [0:num2temporal#] (id3 < num1value#)) -> (id4 > num3value#) until (not fall (id5 == num4value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num2temporal#] (rise (id2 == id3))) )
always ( eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always (not (id2 == id3))) )
always ( rise (id1 == id2) -> not rise ((id3 == num1value#) since [0:num3temporal#] (id4 <= num2value#)) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> rise (always (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( not ((not (id1 <= num1value#)) since [0:num3temporal#] (id2 < num2value#)) -> always [num5temporala#:num5temporalb#] (id3 <= num4value#) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (not (id3 == id4))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 < num1value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( id1 >= num1value# and rise (id2 == num2value#) -> id3 == num3value# or (id4 > num4valuea# and id4 < num4valueb#) )
always ( not (id1 < num1value#) and rise (id2 < num2value#) -> id3 <= num3value# )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == num2value#) until [num4temporala#:num4temporalb#] (not (id3 == num3value#))) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 < num1value# and id2 < num2value#)
always ( id1 >= num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> rise (id3 >= num3value#) )
always ( rise (id1 >= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> always [num1temporala#:num1temporalb#] (id3 == id4) )
always [0:num2temporal#] (id1 > num1value# and not (id2 == id3))
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and rise (id2 >= num2value#))
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) )
always ( rise (id1 > num1value#) -> fall (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (id3 == num3value#) or (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 < num2value#) and id3 <= num3value# )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> id3 >= num3value# )
always ( id1 > num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 < num3value#) )
always ( rise (id1 == num1value#) and id2 <= num2value# -> id3 == num3value# and id4 >= num4value# )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (fall (id2 == num3value#))) )
always ( rise (once [num2temporala#:num2temporalb#] (id1 < num1value#)) -> not ((id2 == num3value#) until [0:num5temporal#] (rise (id3 <= num4value#))) )
eventually [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 >= num1value#) -> rise (id2 == id3) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 <= num2value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3value#) until (id4 <= num4value#) )
always ( id1 == num1value# -> id2 == id3 and id4 == id5 )
always ( not (id1 == num1value#) and id2 == id3 -> (id4 > num2value#) until [0:num3temporal#] (id5 == id6) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually (id1 <= num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( not fall (id1 > num1value#) and id2 < num2value# -> always (id3 > num3value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always (id1 > num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> fall (id3 > num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 or not fall (id4 == num2value#) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 >= num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> historically [0:num3temporal#] (not (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> always [num4temporala#:num4temporalb#] (eventually (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
eventually [num3temporala#:num3temporalb#] (not fall (id1 == num1value#) or rise (id2 < num2value#))
eventually [0:num1temporal#] (id1 == id2)
always ( (id1 == num1value#) since (id2 == id3) -> eventually [0:num3temporal#] (id4 == num2value#) )
always ( id1 == num1value# or id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( id1 == id2 -> id3 >= num1value# and rise (id4 < num2value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( rise (id1 == id2) -> rise (eventually (id3 >= num1value#)) )
always ( not (id1 > num1value#) and id2 == num2value# -> rise (id3 < num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (not (id2 == num2value#)) )
eventually [0:num3temporal#] (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num3temporal#] (id1 <= num1value# and not (id2 == num2value#))
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( not fall (id1 > num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( id1 == id2 or id3 == num1value# -> always (eventually (rise (id4 == id5))) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
eventually (id1 == num1value# or not (id2 == num2value#))
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( not (id1 == id2) or id3 == num1value# -> always [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) and not fall (id3 >= num3value#) )
always ( fall (id1 == num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually (fall (id1 == id2))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always (not (id2 == num2value#)) )
always [0:num1temporal#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# -> historically [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num3temporal#] (rise (id1 < num1value#) or id2 == num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 < num1value# or rise (id2 == num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( (id1 == id2) until [0:num2temporal#] (id3 == num1value#) -> eventually (always [num4temporala#:num4temporalb#] (id4 > num3valuea# and id4 < num3valueb#)) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 > num2value#)
always ( id1 == id2 -> id3 <= num1value# )
always ( rise (id1 > num1value#) -> id2 == id3 )
always [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
always ( (id1 == num1value#) since [0:num3temporal#] (id2 <= num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 >= num4value#))) )
always ( not fall (id1 == id2) and id3 > num1value# -> eventually [0:num2temporal#] (fall (id4 == id5)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
eventually (fall (id1 == id2))
always ( id1 == num1value# or rise (id2 > num2valuea# and id2 < num2valueb#) -> fall (historically [num4temporala#:num4temporalb#] (not fall (id3 == num3value#))) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 < num2value#)
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( id1 > num1value# -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> not fall (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> id3 >= num1value# )
eventually [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( fall (id1 == num1value#) and id2 >= num2value# -> fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually (not (id1 <= num1value#))
always ( rise (id1 == num1value#) and id2 == num2value# -> rise ((id3 <= num3value#) until (id4 > num4value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( id1 == num1value# -> id2 == num2value# )
always ( id1 == num1value# and rise (id2 <= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> fall (always [0:num4temporal#] (id2 >= num3value#)) )
always ( fall (id1 == num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always (id1 < num1value#)
always ( fall (eventually [0:num1temporal#] (id1 == id2)) -> (id3 == id4) until [num3temporala#:num3temporalb#] (id5 >= num2valuea# and id5 <= num2valueb#) )
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (not (id3 >= num3valuea# and id3 < num3valueb#)) )
eventually (not (id1 > num1value#) and not (id2 > num2value#))
always [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always ( rise (id1 == id2) -> rise (eventually [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always [0:num3temporal#] (id1 >= num1value# and id2 > num2value#)
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 == id2 and id3 > num1value# -> always [0:num2temporal#] (id4 == id5) )
always ( rise (id1 == num1value#) -> not (id2 <= num2value#) and rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( not fall (once [num1temporala#:num1temporalb#] (fall (id1 == id2))) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and not rise (id2 == num2value#))
always ( rise (id1 > num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) -> always (eventually (id3 < num4value#)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always [num1temporala#:num1temporalb#] (not rise (id1 == id2))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not fall (id2 == num2value#)) until [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( id1 <= num1value# and fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# and id4 >= num4value# )
always ( once [0:num2temporal#] (id1 > num1value#) -> always [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 > num1valuea# and id3 < num1valueb#)) )
always [0:num1temporal#] (not (id1 == id2))
always [num2temporala#:num2temporalb#] (id1 == id2 or not (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 < num1value#) -> always (eventually (fall (id2 >= num2valuea# and id2 < num2valueb#))) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 > num2value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually (id1 > num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num3temporal#] (fall (id1 == num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# or fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) and not rise (id2 > num2valuea# and id2 < num2valueb#) -> not fall ((id3 <= num3value#) until (id4 > num4value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 -> eventually (always [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always ( id1 > num1value# and rise (id2 == num2value#) -> id3 >= num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# and id3 == num3value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == id2) -> (not fall (id3 > num1value#)) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( rise (id1 < num1value#) -> (not fall (id2 > num2valuea# and id2 < num2valueb#)) since [0:num4temporal#] (id3 == num3value#) )
always ( rise (once [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))) -> (id2 >= num3value#) since [0:num5temporal#] (rise (id3 > num4valuea# and id3 < num4valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
eventually (not (id1 >= num1value#) and id2 == num2value#)
always ( rise (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually (fall (id3 == id4))) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (fall (id3 == id4))) )
always ( id1 < num1value# -> always [0:num3temporal#] (eventually (rise (id2 < num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 > num2value#) or id3 == num3value# )
always ( id1 >= num1value# and rise (id2 > num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 == id2) -> id3 <= num1value# or id4 == num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> rise (id2 <= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (rise (id3 == num1value#))) )
always ( fall (id1 == num1value#) and id2 >= num2value# -> eventually [0:num3temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( historically (id1 == num1value#) -> (id2 >= num2value#) since [num4temporala#:num4temporalb#] (id3 < num3value#) )
always [0:num3temporal#] (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always ( not rise (id1 > num1value#) and not (id2 == id3) -> (id4 == num2value#) until (not (id5 < num3value#)) )
always ( fall (id1 == num1value#) and id2 == num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> (id3 <= num1value#) since (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 < num1value# -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 == id4 )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 == num1value#) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( id1 <= num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> not rise ((id2 == num2value#) since [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( not (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> rise ((id2 == id3) until (id4 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 >= num1value# and id2 == num2value# -> not (id3 > num3value#) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and rise (id2 >= num2value#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 > num1value#) and not (id2 > num2valuea# and id2 < num2valueb#) -> always (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always [0:num3temporal#] (id1 <= num1value# and not fall (id2 > num2value#))
always ( rise (id1 > num1value#) -> id2 <= num2value# or rise (id3 == num3value#) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> not fall (always [0:num4temporal#] (id2 < num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 or id4 == num2value# )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> id3 == id4 )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (not (id3 < num3value#)) )
always ( eventually [0:num2temporal#] (id1 > num1value#) -> eventually [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( id1 < num1value# -> historically (id2 == num2value#) )
always ( (id1 < num1value#) since [num3temporala#:num3temporalb#] (id2 < num2value#) -> always [num4temporala#:num4temporalb#] (id3 == id4) )
eventually (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( id1 == id2 or id3 >= num1value# -> eventually [0:num2temporal#] (fall (id4 == id5)) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 > num1value#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#) -> not (id3 >= num3value#) )
always ( rise (id1 > num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( rise (id1 < num1value#) -> not (eventually [0:num2temporal#] (id2 == id3)) )
always ( id1 >= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> eventually (always [num1temporala#:num1temporalb#] (not (id3 == id4))) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) -> always (id2 <= num2value#) )
eventually [0:num3temporal#] (id1 > num1value# and rise (id2 <= num2value#))
always ( rise (id1 == num1value#) -> id2 == id3 or id4 == num2value# )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (id3 == id4) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( id1 == id2 -> eventually [num1temporala#:num1temporalb#] (id3 == id4) )
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
always ( (not (id1 == id2)) since [0:num2temporal#] (rise (id3 <= num1value#)) -> always (id4 == num3value#) )
always ( (id1 >= num1value#) until [0:num3temporal#] (id2 > num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 < num4value#)) )
always ( rise (id1 < num1value#) -> historically [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( fall (id1 == id2) -> id3 == id4 or id5 == id6 )
always (id1 == num1value#)
always (id1 > num1value# and id2 == num2value#)
eventually [0:num3temporal#] (id1 == num1value# and not fall (id2 == num2value#))
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 == num1value#))) )
always ( fall (id1 == id2) -> not (eventually (not fall (id3 == id4))) )
always ( rise (id1 > num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
eventually [0:num3temporal#] (id1 <= num1value# or rise (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not fall ((id2 > num2value#) since (rise (id3 == id4))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 > num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (historically [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always ( rise (id1 >= num1value#) or id2 > num2value# -> not (id3 <= num3value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( id1 > num1value# and not rise (id2 == id3) -> once [0:num2temporal#] (id4 == id5) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( rise (id1 > num1value#) and (id2 > num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( once (not (id1 == num1value#)) -> always [num3temporala#:num3temporalb#] (eventually (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num3temporal#] (id1 <= num1value# and id2 > num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# -> not fall (id2 == id3) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually (id1 > num1value# and id2 == id3)
always ( not (id1 >= num1valuea# and id1 < num1valueb#) or id2 == num2value# -> id3 == id4 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == id2) -> id3 <= num1value# or rise (id4 >= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( always [0:num1temporal#] (not (id1 == id2)) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id3 == num2value#)) )
always ( rise (id1 >= num1value#) -> fall (eventually [0:num3temporal#] (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always ( historically [0:num2temporal#] (not fall (id1 >= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( rise (id1 > num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 == num1value#)) )
always ( rise (id1 <= num1value#) -> id2 > num2value# and id3 <= num3value# )
always [0:num3temporal#] (not fall (id1 == num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( once (rise (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 >= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( not (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( fall (id1 == num1value#) -> not (eventually [0:num3temporal#] (id2 > num2value#)) )
always [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( historically (id1 >= num1value#) -> not rise (eventually [num3temporala#:num3temporalb#] (not (id2 == num2value#))) )
always [0:num3temporal#] (id1 == num1value# or id2 < num2value#)
always ( id1 <= num1value# -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 == id3) until [0:num3temporal#] (fall (id4 == num2value#)) )
always ( fall (id1 == id2) -> not (once [num2temporala#:num2temporalb#] (fall (id3 == num1value#))) )
always (id1 >= num1value# and id2 > num2value#)
always ( fall (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (not (id2 == id3))) )
eventually (id1 == num1value# and id2 < num2value#)
always ( not (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 <= num1value#) -> always (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( id1 == num1value# or id2 == id3 -> not (eventually [num3temporala#:num3temporalb#] (id4 < num2value#)) )
always ( id1 < num1value# -> eventually (id2 == num2value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == num2value# or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num3temporal#] (rise (id1 < num1value#) or id2 <= num2value#)
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 < num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 == num2value#)
always ( rise (id1 > num1value#) and id2 == id3 -> id4 < num2value# or id5 == id6 )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 >= num1value#))) )
always ( id1 < num1value# -> id2 == id3 )
always ( rise (id1 == num1value#) -> not fall (id2 == num2value#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( not fall (historically [0:num1temporal#] (id1 == id2)) -> eventually (id3 == num2value#) )
always ( fall (id1 == id2) -> always [num1temporala#:num1temporalb#] (not rise (id3 == id4)) )
always ( fall (once (id1 == num1value#)) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 < num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall ((id2 > num2valuea# and id2 < num2valueb#) since (id3 == num3value#)) )
always ( always [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#)) -> (id2 >= num3value#) until (id3 <= num4value#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( fall (id1 == num1value#) and id2 == num2value# -> (id3 == id4) until [0:num4temporal#] (id5 >= num3valuea# and id5 <= num3valueb#) )
always [0:num2temporal#] (id1 < num1value# and id2 == id3)
always [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) or rise (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 > num1value# -> not (id2 > num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( rise (id1 <= num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> id3 > num1value# or id4 < num2value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> id3 == num1value# )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (fall (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually (fall (id3 >= num3valuea# and id3 < num3valueb#))) )
always (not (id1 == id2))
always ( rise (id1 >= num1value#) -> id2 < num2value# and id3 > num3value# )
always ( rise (id1 <= num1value#) or not (id2 <= num2value#) -> (id3 == num3value#) until [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> not (id2 <= num2value#) )
always ( (id1 < num1value#) since [0:num2temporal#] (rise (id2 == id3)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id4 > num3valuea# and id4 < num3valueb#))) )
always [0:num1temporal#] (id1 == id2)
eventually (id1 > num1value# or rise (id2 > num2value#))
eventually (not (id1 > num1value#) and id2 == num2value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> eventually (rise (id2 == id3)) )
always ( always [num2temporala#:num2temporalb#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 >= num3valuea# and id2 <= num3valueb#) until [0:num5temporal#] (id3 >= num4value#) )
always [0:num2temporal#] (not (id1 == num1value#))
eventually [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#) and not (id2 >= num2valuea# and id2 < num2valueb#))
always (not (id1 <= num1value#))
always ( id1 >= num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
eventually (id1 < num1value#)
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (not fall (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> (id4 >= num2valuea# and id4 <= num2valueb#) and id5 == id6 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (not rise (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( once [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> once (id2 <= num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 < num1value# -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always ( id1 == num1value# or rise (id2 >= num2value#) -> (id3 == id4) until [num4temporala#:num4temporalb#] (id5 == num3value#) )
always ( rise (id1 == num1value#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 == num3value#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 <= num2value#) until [0:num4temporal#] (id3 > num3value#)) )
always ( once (rise (id1 < num1value#)) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( id1 == id2 -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 >= num1value#) -> historically [0:num3temporal#] (not rise (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( not fall (id1 == num1value#) or rise (id2 >= num2value#) -> eventually [0:num4temporal#] (id3 >= num3value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> always (eventually (rise (id2 > num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( fall (id1 == num1value#) or id2 <= num2value# -> eventually [0:num3temporal#] (id3 == id4) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# -> eventually (id2 > num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always (id1 > num1value#)
always ( id1 < num1value# and id2 < num2value# -> fall (id3 == num3value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( once [0:num1temporal#] (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and id2 < num2value#)
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( once [0:num2temporal#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == num1value#) -> fall (eventually [num2temporala#:num2temporalb#] (fall (id2 == id3))) )
always ( not (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 == id2 -> eventually (always (id3 == num1value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> eventually (id2 == id3) )
always [0:num1temporal#] (id1 == id2)
always (id1 == id2 or (id3 >= num1valuea# and id3 < num1valueb#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
eventually (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num2temporal#] (id1 < num1value#)
always (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always (id1 >= num1valuea# and id1 < num1valueb#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 > num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> (not (id2 >= num2value#)) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 >= num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 == num3value#) )
always [0:num2temporal#] (not (id1 == num1value#))
eventually (id1 == id2)
always ( rise (id1 <= num1value#) -> eventually (id2 > num2valuea# and id2 <= num2valueb#) )
always (id1 > num1value# or id2 == id3)
eventually (id1 == id2 or id3 == num1value#)
always ( always [0:num2temporal#] (not (id1 < num1value#)) -> eventually (always [0:num4temporal#] (not fall (id2 == num3value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not ((id2 < num2value#) until (id3 == num3value#)) )
always [0:num3temporal#] (id1 == num1value# or id2 < num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> fall ((id4 <= num2value#) until [0:num4temporal#] (id5 <= num3value#)) )
always (id1 <= num1value#)
always ( rise (id1 < num1value#) -> (id2 > num2value#) until [0:num4temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num3temporal#] (id1 <= num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( not (id1 < num1value#) and id2 >= num2value# -> always (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) and id3 == num3value# )
always ( id1 >= num1value# and not (id2 <= num2value#) -> rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1value#) and id2 >= num2value# -> rise (id3 >= num3value#) )
always ( id1 <= num1value# or rise (id2 == num2value#) -> rise (id3 == id4) )
eventually [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( id1 < num1value# or id2 >= num2value# -> not rise (id3 >= num3value#) )
always ( rise (id1 < num1value#) -> not (id2 <= num2value#) )
always ( not (once [0:num1temporal#] (not (id1 == id2))) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 <= num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == id2 or rise (id3 > num1valuea# and id3 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( not (once [num2temporala#:num2temporalb#] (rise (id1 == num1value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
eventually [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (fall (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( (not (id1 <= num1value#)) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (fall (id3 > num4valuea# and id3 < num4valueb#))) )
always ( (id1 >= num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num5temporal#] (eventually (rise (id3 >= num4value#))) )
always ( fall (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 >= num3value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == id2) -> (id3 >= num1value#) since (fall (id4 == num2value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (not (id2 == num2value#)) -> not rise (always (not (id3 >= num4valuea# and id3 <= num4valueb#))) )
always (id1 == num1value#)
always [0:num2temporal#] (not rise (id1 == num1value#) and id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not fall (id1 == id2) -> id3 <= num1value# or rise (id4 == num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 <= num3value#) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 >= num1value#) -> not (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (not (id2 > num2value#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (fall (id2 == num2value#)) -> not (eventually [num5temporala#:num5temporalb#] (id3 > num4valuea# and id3 < num4valueb#)) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> not (id3 < num1value#) and id4 == id5 )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 >= num1value#))) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 == num2value#)) )
always ( rise (id1 >= num1value#) and id2 == id3 -> id4 > num2valuea# and id4 <= num2valueb# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1value#) -> not ((not fall (id2 == num2value#)) since (id3 == num3value#)) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> not ((id3 == id4) until [num4temporala#:num4temporalb#] (id5 <= num3value#)) )
always ( id1 == id2 -> rise ((id3 < num1value#) until (rise (id4 == num2value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (not fall (id2 == id3)) until [num2temporala#:num2temporalb#] (not (id4 == id5)) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (not (id2 == id3))) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> not rise (id2 == id3) or (id4 > num2valuea# and id4 < num2valueb#) )
always [0:num2temporal#] (id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( id1 == num1value# or id2 > num2value# -> id3 > num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 > num2value# )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 < num2valueb# )
always (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> once [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 == num1value# or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 == num3value#))) )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until (id3 <= num3value#) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually (always [num4temporala#:num4temporalb#] (id2 == num3value#)) )
always ( rise (id1 <= num1value#) -> (id2 > num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( (id1 == id2) since (id3 == num1value#) -> (id4 == id5) until (rise (id6 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (not fall (id2 == num2value#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> not (id2 < num2value#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not ((id1 == num1value#) since [0:num3temporal#] (id2 > num2value#)) -> not (always [0:num5temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always [0:num2temporal#] (id1 >= num1value#)
always (id1 == id2)
always ( rise (id1 == num1value#) -> fall (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( rise (id1 == num1value#) -> id2 >= num2value# and id3 == id4 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (rise (id2 > num2value#)) -> eventually [num5temporala#:num5temporalb#] (always (not (id3 >= num4valuea# and id3 <= num4valueb#))) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
eventually (not fall (id1 == id2))
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> always [0:num4temporal#] (id2 >= num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [num3temporala#:num3temporalb#] (not rise (id1 >= num1value#) or not (id2 >= num2value#))
always ( rise (id1 < num1value#) and id2 == num2value# -> not (eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( historically [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#)) -> always [num3temporala#:num3temporalb#] (not (id2 == id3)) )
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> once [0:num4temporal#] (rise (id2 < num3value#)) )
always ( id1 == id2 and id3 == num1value# -> not (always [0:num2temporal#] (id4 == id5)) )
always [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
always ( rise (id1 > num1value#) -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( (not (id1 == num1value#)) until (id2 >= num2value#) -> once [num4temporala#:num4temporalb#] (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( historically (not (id1 > num1value#)) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always (id2 > num2value#) )
eventually [0:num2temporal#] (rise (id1 <= num1value#) and id2 == id3)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) and id2 == id3 -> id4 == num2value# and id5 > num3value# )
always ( not rise (id1 == id2) and id3 >= num1value# -> rise (always [0:num3temporal#] (id4 <= num2value#)) )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 <= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id4 > num3valuea# and id4 < num3valueb#)) )
always ( id1 == num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3value#)) )
eventually [0:num2temporal#] (id1 == id2 and not (id3 == num1value#))
eventually [num1temporala#:num1temporalb#] (not (id1 == id2) and id3 == id4)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( fall (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise ((id2 >= num2valuea# and id2 <= num2valueb#) since [num3temporala#:num3temporalb#] (fall (id3 == id4))) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 == num2value#) -> id3 == id4 )
eventually [0:num3temporal#] (not fall (id1 > num1value#) or id2 <= num2value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 > num2value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> always [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 >= num1value# -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (not (id3 < num1value#))) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( id1 <= num1value# and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 == num2value#))) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> id2 == num2value# )
eventually (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# or id2 < num2value# -> eventually (rise (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))
always ( id1 == id2 or id3 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
eventually [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 == id2) -> eventually (rise (id3 > num1value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (not (id2 < num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 <= num2value#) since (id3 <= num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2value#))
always ( rise (id1 > num1value#) or id2 == id3 -> always [0:num2temporal#] (id4 == id5) )
always ( fall (id1 == id2) -> rise ((id3 >= num1value#) until (id4 == num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 == num1value#))) )
always ( rise (id1 == id2) -> rise (id3 < num1value#) or id4 >= num2value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always [0:num2temporal#] (not rise (id1 == id2) and id3 <= num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> rise (id2 < num2value#) or id3 == num3value# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( id1 == id2 or id3 <= num1value# -> not ((id4 > num2valuea# and id4 < num2valueb#) until [0:num4temporal#] (id5 <= num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == num1value#) -> (not (id2 > num2valuea# and id2 < num2valueb#)) until [0:num4temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num2temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( id1 == id2 and rise (id3 <= num1value#) -> always [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == num2value#) until [0:num4temporal#] (id3 >= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( id1 == id2 -> id3 < num1value# )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( rise (id1 == id2) -> always (id3 < num1value#) )
eventually (id1 == num1value#)
always ( id1 <= num1value# -> id2 >= num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( not (id1 == id2) or id3 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) and id2 > num2value# -> always [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (rise (id4 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 == id3 and id4 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 == id5 )
eventually (id1 >= num1value#)
always ( id1 >= num1value# and id2 < num2value# -> (id3 == id4) until [0:num4temporal#] (id5 >= num3value#) )
always [0:num3temporal#] (id1 <= num1value# or not fall (id2 > num2value#))
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# -> id2 > num2value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 -> id3 == id4 )
always ( (not (id1 >= num1value#)) since (id2 > num2valuea# and id2 <= num2valueb#) -> historically [num4temporala#:num4temporalb#] (not fall (id3 > num3value#)) )
always ( id1 == id2 or id3 < num1value# -> eventually (always (not (id4 == id5))) )
always [0:num3temporal#] (not (id1 <= num1value#) and id2 >= num2value#)
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3value#) since [0:num5temporal#] (rise (id4 >= num4value#)) )
always ( id1 <= num1value# and not (id2 <= num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 >= num3value#)) )
always (id1 == num1value# and id2 == id3)
always ( not (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( id1 < num1value# -> rise (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( not (id1 == num1value#) or id2 == id3 -> not ((not (id4 == num2value#)) since [0:num3temporal#] (rise (id5 == id6))) )
always ( rise (id1 >= num1value#) -> eventually (rise (id2 <= num2value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( not rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise ((id2 >= num2value#) until [0:num4temporal#] (rise (id3 < num3value#))) )
always ( rise (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise ((id2 == num2value#) until [0:num4temporal#] (id3 >= num3value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 > num1value#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 >= num2value#) )
always [0:num3temporal#] (id1 > num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( id1 == id2 or id3 == num1value# -> not (id4 == id5) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall ((id2 == id3) until (id4 == id5)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 <= num4value#)) )
always ( id1 == id2 or rise (id3 > num1value#) -> not (always [0:num3temporal#] (not (id4 >= num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ((id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 <= num1value# -> id2 > num2value# )
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (not (id2 == id3)) )
eventually [0:num2temporal#] (id1 >= num1value# or id2 == id3)
always ( id1 == id2 or id3 == id4 -> not ((id5 == num1value#) since (id6 == num2value#)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( once [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#)) -> (not (id2 >= num3value#)) until (id3 == id4) )
always [0:num3temporal#] (id1 <= num1value# or id2 > num2value#)
always ( id1 == id2 and id3 == num1value# -> id4 == id5 )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually (id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (not fall (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always [num1temporala#:num1temporalb#] (not (id1 == id2) and id3 == id4)
eventually [0:num3temporal#] (rise (id1 > num1value#) or id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( id1 > num1value# or fall (id2 == num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) or id4 == num4value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( id1 < num1value# and id2 >= num2value# -> id3 <= num3value# )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) since [0:num3temporal#] (not (id3 == id4)) )
always ( rise (id1 < num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( id1 <= num1value# -> rise (id2 <= num2value#) or rise (id3 <= num3value#) )
always ( id1 >= num1value# and id2 <= num2value# -> (id3 > num3value#) since [0:num5temporal#] (id4 < num4value#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 == id2 or not (id3 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 == id2 -> always [num1temporala#:num1temporalb#] (eventually [num2temporala#:num2temporalb#] (not (id3 == id4))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( once [0:num1temporal#] (not rise (id1 == id2)) -> always (eventually (id3 >= num2valuea# and id3 <= num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always (id1 > num1value# or not (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually (always (id2 <= num2value#)) )
always ( always [num1temporala#:num1temporalb#] (id1 == id2) -> eventually (always [0:num2temporal#] (id3 == id4)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually (id1 < num1value#)
eventually (id1 == num1value# and fall (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 or id3 > num1value# -> id4 <= num2value# )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (eventually (fall (id2 == id3))) )
eventually (id1 == id2 and id3 == id4)
always ( rise (id1 <= num1value#) -> id2 == id3 or id4 > num2value# )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( (not (id1 < num1value#)) until [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> eventually [0:num4temporal#] (id3 == id4) )
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [0:num2temporal#] (id1 <= num1value#)
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#))
always ( not fall (historically (id1 == num1value#)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id2 == id3))) )
always ( rise (id1 == id2) -> once (id3 <= num1value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2value#) -> rise (id3 > num3value#) and rise (id4 >= num4value#) )
always ( not (id1 < num1value#) or id2 == num2value# -> id3 <= num3value# )
always ( rise (id1 >= num1value#) and id2 < num2value# -> not fall (id3 > num3valuea# and id3 < num3valueb#) and id4 == id5 )
always ( id1 >= num1value# -> id2 >= num2value# )
always ( rise (id1 == id2) -> rise (id3 <= num1value#) and (id4 > num2valuea# and id4 < num2valueb#) )
always ( not (id1 == id2) or (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 < num2value# and rise (id5 > num3value#) )
always [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and id2 == num2value#)
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually (id1 <= num1value#)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> historically [num3temporala#:num3temporalb#] (id2 == id3) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 == id5 )
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
eventually (id1 == num1value#)
always ( not (id1 < num1value#) -> (id2 == id3) until (id4 == id5) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id3 >= num2valuea# and id3 <= num2valueb#))) )
always ( rise (id1 == num1value#) -> fall (always (id2 == num2value#)) )
always ( id1 <= num1value# or not (id2 > num2value#) -> (id3 > num3value#) since [num5temporala#:num5temporalb#] (id4 > num4valuea# and id4 < num4valueb#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( rise (id1 == id2) -> rise (id3 == id4) )
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 < num1value#) -> (id2 > num2value#) until [0:num3temporal#] (fall (id3 == id4)) )
eventually [0:num3temporal#] (rise (id1 > num1value#) or id2 == num2value#)
always ( id1 > num1value# -> id2 == num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
eventually [num1temporala#:num1temporalb#] (not rise (id1 == id2))
always ( rise (id1 > num1value#) and rise (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 < num3value#)) )
always ( rise (id1 == id2) -> id3 > num1value# )
eventually (id1 == num1value# or rise (id2 >= num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (once [0:num3temporal#] (not (id2 >= num2value#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (fall (id3 > num1valuea# and id3 < num1valueb#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value# -> (not rise (id3 > num3value#)) since [0:num5temporal#] (id4 > num4value#) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 == id2) -> id3 == num1value# and id4 <= num2value# )
always [0:num2temporal#] (id1 <= num1value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> not fall (id3 >= num3valuea# and id3 <= num3valueb#) )
always (id1 > num1value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 <= num1value#) -> not (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not (id1 <= num1value#) or not (id2 < num2value#) -> once [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == id2) -> not (id3 == num1value#) )
always ( not (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 == num2value#))
always ( fall (id1 == id2) -> id3 <= num1value# )
always (id1 == id2)
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and id2 < num2value#)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 == id2) -> once [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( rise (id1 == id2) -> not (eventually [num2temporala#:num2temporalb#] (rise (id3 == num1value#))) )
always ( rise (id1 >= num1value#) -> eventually (id2 < num2value#) )
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 >= num1value# and id2 <= num2value# -> always (eventually [0:num4temporal#] (id3 <= num3value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 < num1value#) -> id2 > num2value# )
eventually (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# and id2 == num2value# -> once (id3 == id4) )
always [0:num2temporal#] (not fall (id1 == id2) and id3 >= num1value#)
always [0:num1temporal#] (id1 == id2)
eventually (id1 > num1value#)
always ( historically [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id3 < num2value#))) )
always ( rise (id1 > num1value#) -> id2 == id3 and id4 == id5 )
always [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( rise (id1 == num1value#) -> id2 == num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 )
eventually (fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == id2) -> (not (id3 <= num1value#)) since [num2temporala#:num2temporalb#] (id4 == id5) )
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) or rise (id2 == num2value#))
eventually (rise (id1 <= num1value#))
always [0:num3temporal#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 < num1value#) -> once [0:num2temporal#] (not (id2 == id3)) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( id1 < num1value# and id2 > num2value# -> id3 == id4 )
always ( rise (id1 == id2) -> always (id3 >= num1value#) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> not (id2 == num2value#) )
always ( id1 == num1value# and id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id4 > num2valuea# and id4 <= num2valueb#))) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always ( once [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == id4)) )
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 > num1value#) -> id2 >= num2value# and id3 > num3value# )
always [num2temporala#:num2temporalb#] (not (id1 == id2) and id3 < num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id4 == id5)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( (id1 == id2) since [0:num2temporal#] (rise (id3 == num1value#)) -> eventually [0:num4temporal#] (id4 < num3value#) )
always ( id1 == id2 and id3 > num1value# -> id4 > num2valuea# and id4 <= num2valueb# )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( id1 == id2 -> id3 < num1value# )
always ( rise (id1 >= num1value#) -> (not (id2 >= num2value#)) since [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 < num1value# or not (id2 == id3))
always ( fall (id1 == id2) -> rise (eventually (id3 == num1value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 == id2) since (id3 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (not (id4 > num2valuea# and id4 < num2valueb#))) )
eventually (id1 < num1value# and id2 >= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> id4 < num2value# )
always [0:num2temporal#] (id1 > num1value#)
always ( not (eventually [0:num1temporal#] (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 > num2valuea# and id3 < num2valueb#)) )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
always ( fall (eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 < num3valueb#)) )
always ( id1 <= num1value# or id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always ( rise (id1 > num1value#) -> id2 == id3 and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 == id2) -> (id3 == id4) until [0:num2temporal#] (id5 <= num1value#) )
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually (not fall (id2 > num3value#))) )
always [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) until [0:num4temporal#] (not fall (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> eventually (always (not (id2 > num2value#))) )
always ( rise (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 < num1value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> rise (id2 == num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 >= num1value# -> id2 <= num2value# or id3 == id4 )
always ( rise (id1 == id2) -> id3 <= num1value# )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 <= num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> (id2 == id3) until (id4 < num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always (id3 == id4)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> fall (eventually [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (not rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2value#))
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> not (always (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( not (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( rise (id1 > num1value#) -> (not (id2 < num2value#)) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (not (id1 == num1value#))
eventually [0:num1temporal#] (id1 == id2)
always ( once [0:num1temporal#] (id1 == id2) -> once [0:num2temporal#] (id3 == id4) )
always ( not (id1 == id2) and id3 >= num1value# -> id4 >= num2valuea# and id4 <= num2valueb# )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (not fall (id2 >= num2value#)) )
always ( fall (id1 == id2) -> rise (eventually (id3 == num1value#)) )
always ( rise (id1 <= num1value#) and id2 <= num2value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> (id3 > num1value#) since [0:num3temporal#] (rise (id4 == num2value#)) )
eventually [0:num2temporal#] (not fall (id1 == num1value#))
always ( id1 == id2 -> always (id3 > num1valuea# and id3 < num1valueb#) )
always ( id1 > num1value# or rise (id2 < num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num3temporal#] (id1 >= num1value# and rise (id2 > num2value#))
always ( fall (id1 == id2) -> not (id3 < num1value#) or id4 == id5 )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( fall (id1 == id2) -> id3 > num1value# and (id4 > num2valuea# and id4 < num2valueb#) )
always [0:num2temporal#] (not rise (id1 == id2) or id3 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 > num2valuea# and id2 < num2valueb#)) until [0:num3temporal#] (not (id3 == id4)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 > num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
eventually (rise (id1 > num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> (id2 == num3value#) until [0:num5temporal#] (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> (id2 == id3) until [num4temporala#:num4temporalb#] (id4 > num3valuea# and id4 < num3valueb#) )
always ( id1 > num1value# and id2 == id3 -> eventually [0:num3temporal#] (rise (id4 > num2valuea# and id4 < num2valueb#)) )
always ( id1 == num1value# or rise (id2 > num2value#) -> rise (id3 < num3value#) )
always ( id1 == id2 or id3 >= num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id4 >= num2value#))) )
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3valuea# and id3 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( not fall ((id1 > num1valuea# and id1 < num1valueb#) since (fall (id2 == id3))) -> (id4 == id5) until [0:num2temporal#] (id6 == id7) )
always ( fall (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (id3 == num3value#) )
always ( not rise (historically (id1 == id2)) -> eventually [0:num2temporal#] (id3 < num1value#) )
always ( fall (id1 == id2) -> not (always [0:num2temporal#] (not fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( id1 == id2 or id3 > num1value# -> (id4 < num2value#) until [0:num3temporal#] (not (id5 == id6)) )
always ( rise (always (not (id1 <= num1value#))) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not rise (id2 == id3) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually [0:num3temporal#] (id1 < num1value# and rise (id2 == num2value#))
always ( rise (id1 == id2) -> rise (id3 > num1value#) )
always ( not (once [0:num1temporal#] (id1 == id2)) -> eventually (always [0:num2temporal#] (id3 == id4)) )
always ( not ((id1 > num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (not (id2 == num2value#))) -> always [num5temporala#:num5temporalb#] (id3 <= num4value#) )
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) since [0:num2temporal#] (id4 == id5) )
always ( rise (id1 < num1value#) -> (not (id2 == num2value#)) until [0:num3temporal#] (id3 == id4) )
always ( once [0:num2temporal#] (rise (id1 > num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 < num3value#))) )
always ( rise (id1 < num1value#) or id2 > num2value# -> always (id3 < num3value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# and id3 >= num3value# )
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id2 == id3))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 < num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#) -> historically [0:num4temporal#] (id2 >= num3value#) )
always ( not fall (id1 > num1value#) -> always (eventually (not rise (id2 == id3))) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( not (id1 <= num1value#) and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( not ((id1 < num1value#) since [0:num3temporal#] (id2 == num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#) or id2 == id3)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( historically (id1 >= num1value#) -> always (eventually (id2 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 == num2value#) or id3 <= num3value# )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) and id2 == num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( historically (id1 == id2) -> always (eventually (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( fall (id1 == num1value#) -> eventually (id2 <= num2value#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> always (id2 == id3) )
always (id1 == num1value# and id2 == id3)
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 < num1value#) -> (id2 > num2value#) since (id3 == id4) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> (id2 <= num2value#) since [0:num3temporal#] (id3 == id4) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 < num1valueb#))
always ( fall (id1 == id2) -> id3 == id4 and id5 == id6 )
always ( rise (id1 == id2) -> (not fall (id3 >= num1value#)) until [0:num2temporal#] (id4 == id5) )
always ( id1 >= num1value# and id2 < num2value# -> id3 < num3value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> once [0:num3temporal#] (id2 <= num2value#) )
always ( not (id1 == id2) and id3 <= num1value# -> fall (once [num3temporala#:num3temporalb#] (fall (id4 >= num2valuea# and id4 <= num2valueb#))) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 == num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> always (eventually (id3 == id4)) )
always ( historically [num1temporala#:num1temporalb#] (not (id1 == id2)) -> not fall (historically [num3temporala#:num3temporalb#] (id3 <= num2value#)) )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) or id3 == num3value# )
always ( rise (id1 == id2) -> id3 == id4 )
always ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( id1 >= num1value# or not (id2 >= num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( id1 == id2 -> eventually (always (id3 == id4)) )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 <= num2valueb#) )
eventually (id1 == num1value# or id2 > num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always (id1 >= num1value#)
always ( id1 == id2 -> (id3 <= num1value#) since [num2temporala#:num2temporalb#] (id4 == id5) )
always [num3temporala#:num3temporalb#] (not rise (id1 > num1value#) and id2 >= num2value#)
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (fall (id2 == num2value#))) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always (id1 > num1value#)
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id2 <= num3value#)) )
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( historically [0:num2temporal#] (not rise (id1 == num1value#)) -> fall ((id2 >= num3value#) until [0:num4temporal#] (id3 == id4)) )
always [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always [0:num3temporal#] (id1 <= num1value# and id2 <= num2value#)
always ( fall (id1 == num1value#) -> (id2 == num2value#) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 > num1value# and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 == num2value#))) )
always ( once (id1 >= num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( not (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num4temporala#:num4temporalb#] (rise (id3 < num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( eventually [num1temporala#:num1temporalb#] (id1 == id2) -> (not (id3 == num2value#)) until [0:num4temporal#] (id4 >= num3valuea# and id4 <= num3valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (fall (id3 == num1value#))) )
always ( rise (id1 == num1value#) or rise (id2 > num2value#) -> eventually [0:num4temporal#] (id3 < num3value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always ( id1 == num1value# and id2 <= num2value# -> historically [0:num4temporal#] (id3 < num3value#) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == id2) -> id3 > num1value# and id4 < num2value# )
always ( id1 == num1value# -> eventually [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( (id1 >= num1value#) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (always (id3 == num4value#)) )
eventually [0:num2temporal#] (id1 > num1value# and id2 == id3)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1value#) -> once [0:num3temporal#] (id2 > num2value#) )
always ( (id1 < num1value#) since [num2temporala#:num2temporalb#] (not (id2 == id3)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 == num3value#)) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( id1 < num1value# or not (id2 < num2value#) -> rise (id3 >= num3value#) or id4 >= num4value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( rise (historically [0:num2temporal#] (id1 <= num1value#)) -> (id2 <= num3value#) until [num4temporala#:num4temporalb#] (not (id3 == id4)) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (not (id2 > num2value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( historically (id1 == num1value#) -> not (always (id2 < num2value#)) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 <= num1valueb# )
always (id1 > num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( not (once [0:num1temporal#] (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 >= num2valuea# and id3 <= num2valueb#))) )
always (id1 == id2)
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> always (eventually (rise (id2 > num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always (id1 == id2)
always [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
eventually [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 <= num1value#)
always ( always [0:num2temporal#] (id1 < num1value#) -> rise ((id2 == num3value#) until (id3 < num4value#)) )
always (id1 == id2)
always (id1 == id2)
always ( rise (id1 > num1value#) -> eventually (id2 == id3) )
always ( not fall (id1 > num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) and not (id2 <= num2value#))
eventually [0:num2temporal#] (rise (id1 > num1value#) or id2 == id3)
always [0:num1temporal#] (id1 == id2)
always ( rise (historically [num2temporala#:num2temporalb#] (id1 >= num1value#)) -> always [0:num4temporal#] (not fall (id2 == num3value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always (id1 > num1value# or id2 < num2value#)
always ( id1 == num1value# or id2 > num2value# -> not (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( not (id1 < num1value#) or id2 == id3 -> id4 == id5 )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1value#) )
always ( rise (id1 == id2) -> always (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 > num1value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num3temporal#] (id1 < num1value# or not (id2 <= num2value#))
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( id1 == id2 -> always (eventually [num2temporala#:num2temporalb#] (id3 > num1value#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and id2 == num2value# -> id3 == num3value# )
always ( rise (id1 >= num1value#) -> not (historically [0:num2temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 > num1value#)
always ( id1 > num1value# -> (id2 <= num2value#) until (id3 == num3value#) )
always ( id1 == num1value# -> not (eventually [0:num3temporal#] (not (id2 < num2value#))) )
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num2temporal#] (not (id3 == id4)) )
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == id2 and rise (id3 > num1valuea# and id3 <= num1valueb#) -> fall (id4 == id5) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 == num2value#)
always ( rise (id1 > num1value#) -> (id2 < num2value#) until (rise (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 == num2value#))
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( fall (id1 == num1value#) -> id2 < num2value# and rise (id3 <= num3value#) )
always ( id1 > num1value# and id2 <= num2value# -> not (id3 > num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> rise (id2 >= num2value#) )
eventually (id1 < num1value# and id2 == num2value#)
always (id1 > num1value# and id2 == id3)
always ( once [0:num2temporal#] (id1 < num1value#) -> historically [0:num3temporal#] (id2 == id3) )
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always (id1 == id2 and id3 > num1value#)
always ( rise (id1 <= num1value#) -> not fall (id2 > num2value#) )
always ( rise (id1 < num1value#) -> not (id2 < num2value#) and fall (id3 == num3value#) )
always ( once [0:num2temporal#] (not (id1 == num1value#)) -> eventually (id2 == id3) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 > num3value#)) )
always ( id1 >= num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 > num2valuea# and id4 < num2valueb#))) )
always ( not (id1 < num1value#) -> id2 < num2value# )
eventually [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
eventually (id1 == id2 or id3 == id4)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 > num1valuea# and id3 <= num1valueb#))) )
always ( id1 == num1value# and not (id2 == id3) -> id4 >= num2valuea# and id4 < num2valueb# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> eventually (always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == id2 or not rise (id3 == id4) -> not (id5 > num1value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (once [0:num1temporal#] (id1 == id2)) -> eventually (rise (id3 == id4)) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 == num1value#))) )
eventually (id1 < num1value# and id2 == id3)
always ( rise (id1 == id2) -> not fall (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 >= num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (not fall (id2 == num2value#)) )
always (id1 < num1value# or id2 == id3)
eventually [0:num3temporal#] (id1 >= num1value# and not (id2 < num2value#))
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> rise (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> historically [0:num3temporal#] (id2 < num2value#) )
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 <= num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( not (id1 == id2) -> always [0:num1temporal#] (not (id3 == id4)) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) until (id2 > num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 <= num1value# and id2 >= num2value# -> not (eventually [0:num4temporal#] (not (id3 == num3value#))) )
always ( id1 <= num1value# -> (id2 == num2value#) since [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always ( fall (id1 == id2) -> eventually (not fall (id3 == id4)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 == id2) -> id3 <= num1value# and id4 == num2value# )
eventually [0:num3temporal#] (id1 <= num1value# and id2 <= num2value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 < num3value#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( id1 < num1value# or rise (id2 < num2value#) -> id3 > num3value# or id4 == num4value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> (id2 <= num2value#) since [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( id1 == num1value# and id2 == num2value# -> id3 < num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( once [num1temporala#:num1temporalb#] (not (id1 == id2)) -> always [num2temporala#:num2temporalb#] (eventually (fall (id3 == id4))) )
always [0:num2temporal#] (id1 == num1value# and not (id2 == id3))
always ( rise (id1 == num1value#) and id2 == id3 -> always (eventually [num2temporala#:num2temporalb#] (fall (id4 == id5))) )
always ( id1 < num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( not (historically [0:num2temporal#] (id1 == num1value#)) -> historically (not (id2 == id3)) )
always ( id1 == id2 -> id3 < num1value# )
always ( rise (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
eventually [0:num2temporal#] (id1 > num1value# or not (id2 == id3))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> fall (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (once [0:num2temporal#] (id1 >= num1value#)) -> always [0:num4temporal#] (eventually (rise (id2 > num3value#))) )
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( id1 == id2 -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [num2temporala#:num2temporalb#] (id4 == id5) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and rise (id2 == num2value#))
always ( rise (id1 == num1value#) -> once [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 == id2) -> fall (id3 == num1value#) )
always ( id1 >= num1value# or id2 == id3 -> (id4 == id5) until [num3temporala#:num3temporalb#] (id6 >= num2value#) )
always ( fall (id1 == num1value#) -> always (not (id2 == id3)) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> not fall (eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#) and id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( id1 <= num1value# and id2 == num2value# -> (id3 >= num3value#) until (rise (id4 <= num4value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 < num1value# and id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
always ( not (id1 == id2) or fall (id3 == num1value#) -> historically [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( not ((id1 > num1valuea# and id1 < num1valueb#) since (id2 > num2valuea# and id2 < num2valueb#)) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (fall (id3 == num3value#))) )
always ( historically (id1 >= num1value#) -> not (always (id2 >= num2value#)) )
always ( (not (id1 >= num1value#)) since [num3temporala#:num3temporalb#] (fall (id2 == num2value#)) -> eventually (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (not (id1 == id2) and not (id3 == num1value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (not (id2 <= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3valuea# and id3 <= num3valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id2 == id3))) )
always ( id1 == id2 or id3 < num1value# -> always (eventually (id4 >= num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 -> rise (id3 <= num1value#) and rise (id4 <= num2value#) )
always [0:num2temporal#] (id1 == id2 and not rise (id3 >= num1value#))
always ( id1 >= num1value# or not fall (id2 >= num2value#) -> id3 == num3value# )
always [num2temporala#:num2temporalb#] (id1 < num1value# or id2 == id3)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2value# or rise (id3 <= num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( id1 >= num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) -> historically [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( fall (id1 == id2) -> rise (id3 <= num1value#) and rise (id4 < num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( id1 <= num1value# and id2 > num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 == num2value#)
always ( rise (id1 == id2) -> not (always [0:num1temporal#] (id3 == id4)) )
always ( id1 == num1value# and id2 == num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) since [0:num5temporal#] (not fall (id4 >= num4value#)) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 <= num2value#)
eventually [0:num3temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not rise (always [0:num3temporal#] (id2 <= num2value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id2 == num3value#)) )
eventually (id1 < num1value#)
eventually ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually (id1 == id2 and id3 == num1value#)
always ( id1 > num1value# -> id2 > num2value# or id3 <= num3value# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always [num1temporala#:num1temporalb#] (not rise (id1 == id2))
always ( rise (id1 > num1value#) -> (not (id2 >= num2value#)) since [0:num4temporal#] (id3 < num3value#) )
always (id1 == id2 or id3 >= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ( fall (id1 == id2) -> eventually (fall (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( not (id1 < num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> (id3 > num1value#) since (rise (id4 <= num2value#)) )
always ( id1 > num1value# -> id2 == id3 and id4 > num2value# )
always ( not (once [0:num1temporal#] (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (rise (id2 > num2value#)) )
always ( fall (id1 == num1value#) or id2 > num2value# -> historically [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> rise (id2 <= num2value#) )
always ( id1 <= num1value# and rise (id2 > num2value#) -> id3 == num3value# )
always ( rise (id1 <= num1value#) -> (not (id2 < num2value#)) until (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 <= num1value#) or id2 < num2value# -> eventually [0:num4temporal#] (id3 <= num3value#) )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 <= num1value# and rise (id2 >= num2value#) -> id3 > num3value# )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not (id2 < num2value#))) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 < num2value#) or id3 == id4 )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (not (id2 == num2value#)) )
always ( id1 == id2 and id3 >= num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id4 == id5))) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( once (not fall (id1 == id2)) -> always [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( historically (id1 > num1value#) -> not fall (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> not ((not (id2 == num2value#)) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (id1 > num1value# and rise (id2 <= num2value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 <= num3value#) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( id1 < num1value# or id2 < num2value# -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( id1 == id2 or id3 == id4 -> always [0:num1temporal#] (eventually [0:num2temporal#] (id5 == id6)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> not ((id3 <= num1value#) until [num3temporala#:num3temporalb#] (id4 < num2value#)) )
always ( not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 == num1value# -> (not rise (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == num1value# -> id2 <= num2value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ((id1 > num1valuea# and id1 < num1valueb#) or not (id2 == num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 <= num2value#) )
always ( rise (id1 >= num1value#) and rise (id2 < num2value#) -> not rise (id3 == num3value#) and rise (id4 < num4value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> always (eventually (id2 == id3)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or rise (id2 > num2valuea# and id2 <= num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> rise (id3 > num3valuea# and id3 < num3valueb#) and rise (id4 <= num4value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 < num2value#) )
always ( not (historically [0:num1temporal#] (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 > num2value#)) )
always ( not (once [num1temporala#:num1temporalb#] (id1 == id2)) -> always [0:num3temporal#] (id3 == num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 == id5 )
always (id1 <= num1value#)
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 == id3) until [0:num4temporal#] (id4 == num3value#) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( not rise (id1 == id2) and id3 == id4 -> not (id5 == id6) and (id7 >= num1valuea# and id7 <= num1valueb#) )
always ( not (eventually [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( id1 <= num1value# -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# or not (id2 < num2value#))
always ( id1 == id2 or rise (id3 > num1valuea# and id3 < num1valueb#) -> (not (id4 == id5)) until [num2temporala#:num2temporalb#] (id6 == id7) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# -> (id2 >= num2value#) since [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> (id3 >= num1value#) until [0:num3temporal#] (rise (id4 < num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 >= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [0:num4temporal#] (id3 < num3value#)) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 < num1value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not fall ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (fall (id3 == num3value#))) )
always ( historically (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (fall (id2 == id3)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
eventually [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( not rise (once [num2temporala#:num2temporalb#] (id1 >= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( historically [num1temporala#:num1temporalb#] (not (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 < num2value#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
eventually [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# or id3 == id4 )
always ( id1 == num1value# and id2 == num2value# -> always (not (id3 > num3value#)) )
always ( fall (id1 == id2) -> not fall (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( id1 <= num1value# -> not (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (rise (id3 > num3value#)) )
always [0:num2temporal#] (id1 <= num1value#)
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (rise (id2 < num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> always [0:num4temporal#] (eventually (id3 <= num3value#)) )
always ( not (id1 >= num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not rise (id2 == id3) -> once [0:num2temporal#] (rise (id4 == id5)) )
always (id1 <= num1value# or id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) since [0:num4temporal#] (id3 < num3value#) )
eventually (not (id1 < num1value#) and id2 > num2value#)
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always (eventually (rise (id2 == id3))) )
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (not (id3 > num3valuea# and id3 < num3valueb#)) )
always ( not (once (id1 == num1value#)) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> fall (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( once [0:num2temporal#] (not (id1 == num1value#)) -> eventually [0:num4temporal#] (always (id2 < num3value#)) )
always ( fall (id1 == id2) -> (id3 > num1value#) until (id4 == id5) )
always ( rise (id1 < num1value#) or id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 >= num3value#)) )
eventually [0:num1temporal#] (id1 == id2 or id3 == id4)
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( not (id1 == id2) -> id3 == id4 )
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( rise (id1 < num1value#) and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2value#)) )
eventually (not (id1 <= num1value#))
always ( id1 > num1value# or id2 >= num2value# -> id3 == id4 or not (id5 == id6) )
always ( rise (id1 == num1value#) -> eventually (id2 == num2value#) )
always ( (id1 == num1value#) since (not fall (id2 == id3)) -> eventually [num2temporala#:num2temporalb#] (id4 == id5) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 >= num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) until (not (id3 >= num3value#)) )
always ( fall (id1 == id2) -> not (always [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> id3 < num3value# )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 == num1value#) -> id2 == num2value# and id3 >= num3value# )
always ( fall (id1 == id2) -> historically [num2temporala#:num2temporalb#] (not (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always (id1 > num1value#)
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 == id3)) until (not rise (id4 == id5)) )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#) and id2 == id3)
always ( not rise (id1 == id2) -> rise (id3 >= num1value#) or id4 == id5 )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not rise (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 == num1value# and not fall (id2 == id3))
always [0:num2temporal#] (not (id1 == num1value#) or id2 == id3)
eventually (id1 >= num1value# or not (id2 >= num2value#))
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( fall (id1 == id2) -> not (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (not (id3 <= num1value#)) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 == id2) -> id3 >= num1value# and (id4 > num2valuea# and id4 < num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 >= num2value#) until [0:num4temporal#] (id3 == num3value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num3temporal#] (id1 >= num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> (id2 == id3) until [0:num2temporal#] (not rise (id4 == id5)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == id2 or id3 < num1value# -> id4 == id5 and id6 == id7 )
always ( not (id1 <= num1value#) -> id2 <= num2value# )
eventually (id1 > num1value#)
always ( once [0:num2temporal#] (id1 <= num1value#) -> eventually (id2 == id3) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( id1 <= num1value# or rise (id2 <= num2value#) -> eventually (always (id3 >= num3value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always [0:num1temporal#] (not fall (id1 == id2) and id3 == id4)
always [0:num2temporal#] (not (id1 >= num1value#))
always (id1 == num1value# or id2 >= num2value#)
always ( rise (id1 < num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) and id2 < num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) until (id4 == id5) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( id1 >= num1value# and rise (id2 > num2value#) -> not (id3 > num3value#) )
always ( rise (id1 < num1value#) -> eventually (not (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( once [num2temporala#:num2temporalb#] (rise (id1 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 == id2) -> (id3 <= num1value#) until (id4 == num2value#) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( once [0:num2temporal#] (rise (id1 > num1value#)) -> (id2 == num3value#) until (id3 > num4value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not rise (historically [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) )
always ( rise (id1 == num1value#) -> (not fall (id2 > num2valuea# and id2 < num2valueb#)) since (id3 > num3value#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> not rise (eventually (fall (id3 == id4))) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#))
always (id1 == num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 > num2value#) -> eventually [0:num3temporal#] (not (id3 == id4)) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 == num1value#)) -> (id2 >= num3valuea# and id2 <= num3valueb#) since (id3 == num4value#) )
always ( id1 <= num1value# -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (id2 < num3value#) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually (id1 == num1value# or id2 == id3)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
eventually [0:num3temporal#] (id1 == num1value# or not fall (id2 == num2value#))
eventually (id1 == num1value# and id2 >= num2value#)
eventually (rise (id1 > num1value#) or rise (id2 <= num2value#))
always ( not (id1 <= num1value#) or id2 == id3 -> id4 >= num2value# )
always (id1 > num1value#)
always ( fall (id1 == id2) -> id3 == id4 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always (id1 >= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> (not (id2 > num3value#)) until [0:num5temporal#] (not (id3 < num4value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 == num1value# and id2 < num2value# -> id3 <= num3value# and id4 == id5 )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always (id1 == id2)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always [0:num1temporal#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always [0:num3temporal#] (not rise (id1 == num1value#) or id2 <= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
eventually (id1 < num1value#)
always ( id1 > num1value# or rise (id2 == num2value#) -> (id3 == num3value#) until [0:num5temporal#] (not (id4 >= num4value#)) )
always (id1 >= num1value# or not (id2 < num2value#))
always ( id1 == num1value# and not (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 == num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually (rise (id1 > num1value#))
eventually [0:num2temporal#] (rise (id1 < num1value#))
eventually [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 < num2value#)
always ( fall (once [0:num2temporal#] (id1 > num1value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 == id5)) )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually (id2 == id3) )
always [0:num1temporal#] (id1 == id2 or not rise (id3 == id4))
always ( rise (id1 <= num1value#) -> once (id2 > num2value#) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( fall (id1 == num1value#) and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always (not (id4 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always (id1 == num1value# and id2 >= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 < num1value#))
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( not (id1 == num1value#) -> not (eventually (id2 == id3)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> always (eventually (id2 <= num2value#)) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 < num1value#) -> not fall (always [0:num3temporal#] (not (id2 >= num2value#))) )
always ( not (id1 >= num1value#) or id2 == num2value# -> eventually [0:num3temporal#] (id3 == id4) )
always ( rise (id1 >= num1value#) -> not (eventually (fall (id2 == num2value#))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
always ( once (id1 == id2) -> eventually (always (id3 >= num1value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 >= num1value#) -> not ((id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( fall (historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> not (eventually [0:num4temporal#] (not (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 == num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 < num1value# -> id2 > num2value# )
always ( not (id1 == id2) or not rise (id3 >= num1valuea# and id3 <= num1valueb#) -> not fall ((not (id4 == num2value#)) until [0:num3temporal#] (rise (id5 == id6))) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (historically [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (not rise (id1 == id2) or id3 > num1value#)
always ( id1 == num1value# -> (id2 <= num2value#) until [0:num3temporal#] (not (id3 == id4)) )
always ( not (id1 <= num1value#) and id2 == num2value# -> rise (id3 == id4) )
always ( rise (id1 == num1value#) -> eventually (always (id2 < num2value#)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 > num2value#)
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( (id1 > num1value#) until [0:num3temporal#] (id2 >= num2value#) -> always [0:num5temporal#] (eventually (rise (id3 >= num4value#))) )
always ( id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#) -> rise (id4 == id5) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always (id3 == num1value#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (not fall (id3 > num1value#)) )
always ( rise (id1 == num1value#) -> not rise (always (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> always (eventually (rise (id2 < num2value#))) )
always ( not (id1 == num1value#) and id2 >= num2value# -> (not (id3 < num3value#)) until [num5temporala#:num5temporalb#] (not (id4 <= num4value#)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 == id2 and id3 == id4 -> always [0:num1temporal#] (not (id5 == id6)) )
always ( id1 > num1value# and not fall (id2 == num2value#) -> always (eventually [0:num4temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( historically (not fall (id1 == id2)) -> always (eventually [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
eventually [0:num2temporal#] (id1 >= num1value# and not (id2 == id3))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> rise (id4 > num2valuea# and id4 <= num2valueb#) and id5 == num3value# )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and id2 > num2value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( once (id1 <= num1value#) -> (not rise (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( id1 <= num1value# and id2 >= num2value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id3 == id4))) )
always ( id1 >= num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( id1 == num1value# and id2 == id3 -> (id4 == id5) until (not rise (id6 == num2value#)) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually (rise (id3 == num1value#))) )
eventually (id1 < num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
eventually (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always (id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> (not fall (id3 >= num3valuea# and id3 <= num3valueb#)) until [0:num5temporal#] (id4 == num4value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 < num1value# -> always (eventually (rise (id2 <= num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num3temporal#] (rise (id1 <= num1value#) or fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1value# or id2 == id3)
always ( rise (id1 == id2) -> eventually (always [0:num1temporal#] (id3 == id4)) )
always [0:num3temporal#] (id1 <= num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
always (id1 == id2)
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (not (id2 <= num2value#)) )
always ( id1 <= num1value# and rise (id2 <= num2value#) -> not (always [0:num3temporal#] (id3 == id4)) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( fall (id1 == id2) -> not fall (eventually [num2temporala#:num2temporalb#] (id3 < num1value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# or not (id2 == id3))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 <= num1value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) until [0:num3temporal#] (id4 < num2value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 >= num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> always [0:num4temporal#] (id3 == num3value#) )
always ( id1 <= num1value# and rise (id2 == num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) or not (id4 < num4value#) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( id1 == num1value# or id2 == num2value# -> id3 == num3value# )
always ( fall (id1 == num1value#) -> id2 == id3 )
always (id1 == id2 or id3 <= num1value#)
always ( fall (id1 == num1value#) or id2 < num2value# -> id3 == num3value# )
always ( once [0:num2temporal#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3valuea# and id2 < num3valueb#))) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> not (id2 == id3) )
always ( id1 >= num1value# or rise (id2 >= num2value#) -> (id3 == id4) until [0:num4temporal#] (id5 <= num3value#) )
always ( id1 <= num1value# or id2 < num2value# -> id3 > num3value# )
always [num3temporala#:num3temporalb#] (not (id1 >= num1value#) or id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( not rise (historically (id1 > num1value#)) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 >= num3value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (not (id2 <= num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (id1 < num1value#)
always ( not (historically [0:num2temporal#] (id1 < num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (rise (id1 < num1value#) or id2 == num2value#)
always ( rise (id1 > num1value#) -> once [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> fall ((id2 == id3) since [num3temporala#:num3temporalb#] (not (id4 <= num2value#))) )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == id2 -> always (eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 >= num2value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 <= num1value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == num2value#)) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) or fall (id2 >= num2valuea# and id2 <= num2valueb#))
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 > num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 <= num2value#) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> not ((id3 >= num3valuea# and id3 <= num3valueb#) until (id4 == id5)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> rise ((not fall (id3 == id4)) until [0:num4temporal#] (id5 == num3value#)) )
always ( rise (id1 < num1value#) and rise (id2 <= num2value#) -> fall (id3 == id4) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 < num1value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (rise (id3 >= num1value#)) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> (id4 < num2value#) since (id5 == id6) )
always ( fall (always [num2temporala#:num2temporalb#] (id1 <= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 > num1value#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) until [0:num3temporal#] (id3 == id4) )
always (id1 >= num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# and id2 == id3)
eventually [0:num3temporal#] (id1 >= num1value# and not (id2 < num2value#))
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) and rise (id3 >= num3value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (id2 == num3value#) )
eventually (id1 == id2 and rise (id3 < num1value#))
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always [0:num2temporal#] (id1 <= num1value#)
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( id1 >= num1value# and id2 < num2value# -> id3 == id4 or rise (id5 == num3value#) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 <= num1value#))
always (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 < num1valueb#))
eventually [0:num3temporal#] (id1 <= num1value# and not (id2 < num2value#))
eventually [0:num1temporal#] (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) and id4 == num4value# )
always ( not (id1 > num1value#) and rise (id2 >= num2value#) -> id3 <= num3value# )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually (id2 >= num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (not fall (id3 == num1value#)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually (rise (id2 == id3))) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# or id2 <= num2value# -> not (id3 == num3value#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( id1 == id2 -> id3 == num1value# )
always (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 < num2value#) )
eventually [0:num3temporal#] (id1 < num1value# and rise (id2 < num2value#))
always ( (not fall (id1 == num1value#)) since [0:num3temporal#] (rise (id2 == num2value#)) -> not (always [num5temporala#:num5temporalb#] (not (id3 <= num4value#))) )
always ( rise (id1 == id2) -> not (id3 > num1value#) )
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) until [0:num2temporal#] (id4 == id5) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( not rise (historically (not (id1 == num1value#))) -> always [0:num3temporal#] (eventually (id2 > num2valuea# and id2 < num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# or id2 == id3 -> rise (id4 == num2value#) )
always (id1 >= num1value#)
eventually [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (fall (id2 == num3value#))) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always [0:num3temporal#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (id1 > num1value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( not (id1 < num1value#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 <= num1value#)
always [0:num3temporal#] (id1 <= num1value# or id2 >= num2value#)
always ( rise (id1 >= num1value#) and rise (id2 <= num2value#) -> eventually [0:num4temporal#] (not (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 < num2value#) -> not ((id3 < num4value#) until [num6temporala#:num6temporalb#] (id4 > num5valuea# and id4 < num5valueb#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> always [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 >= num1value# and not rise (id2 == id3))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) and id2 == num2value# -> (id3 == id4) until [num4temporala#:num4temporalb#] (rise (id5 > num3valuea# and id5 < num3valueb#)) )
always ( always (id1 == num1value#) -> historically [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#) )
always (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( not (once [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))) -> fall (always [num4temporala#:num4temporalb#] (not (id2 <= num3value#))) )
eventually [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( rise (id1 < num1value#) -> always (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 < num3value#))) )
always ( not (id1 == num1value#) or id2 > num2value# -> id3 > num3value# )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (not fall (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not ((id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 <= num2valueb#)) -> always [0:num5temporal#] (eventually (rise (id3 == num4value#))) )
always ( historically [0:num1temporal#] (not (id1 == id2)) -> always [0:num3temporal#] (id3 < num2value#) )
always ( fall (id1 == id2) -> rise (id3 <= num1value#) or (id4 >= num2valuea# and id4 < num2valueb#) )
always [0:num3temporal#] (id1 >= num1value# and not rise (id2 == num2value#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value# -> id3 == num3value# )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always (not (id1 == num1value#))
always (id1 == num1value#)
always ( not rise (id1 == num1value#) -> not rise (id2 > num2value#) )
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always (id2 <= num2value#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num2temporala#:num2temporalb#] (id2 == id3) -> once [0:num4temporal#] (id4 == num3value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 > num1valuea# and id3 < num1valueb#))) )
always ( id1 == num1value# and id2 == num2value# -> always (not rise (id3 == id4)) )
always ( id1 <= num1value# -> rise ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 == num3value#)) )
always ( once [0:num2temporal#] (id1 > num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( historically [0:num1temporal#] (id1 == id2) -> always (eventually [num3temporala#:num3temporalb#] (id3 > num2valuea# and id3 < num2valueb#)) )
always ( rise (id1 > num1value#) -> not (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 == num1value#) -> id2 == id3 or (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 == num1value#) -> not rise (eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 < num2value# and id5 == num3value# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> historically [num3temporala#:num3temporalb#] (not (id2 == num2value#)) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> (not (id3 > num2value#)) until [0:num4temporal#] (rise (id4 < num3value#)) )
always ( id1 <= num1value# and rise (id2 > num2value#) -> id3 == num3value# or id4 >= num4value# )
always ( id1 == num1value# -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 < num1value#) -> always (id2 == id3) )
always ( rise (id1 >= num1value#) -> rise (always (id2 >= num2value#)) )
always ( rise (id1 == num1value#) or id2 == id3 -> id4 <= num2value# )
always ( id1 == num1value# -> always [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( not (historically (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always [num1temporala#:num1temporalb#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not ((id1 > num1value#) until [0:num3temporal#] (id2 > num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 == num4value#)) )
always ( not (eventually (not (id1 < num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 >= num1value# or id2 == id3 -> always [num3temporala#:num3temporalb#] (id4 >= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 > num1value# or not (id2 > num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 >= num3value#)) )
always ( fall (id1 == num1value#) -> fall (id2 >= num2valuea# and id2 <= num2valueb#) and id3 <= num3value# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#) -> eventually [num5temporala#:num5temporalb#] (always [num6temporala#:num6temporalb#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( rise (id1 < num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
eventually [0:num3temporal#] (not (id1 <= num1value#) and fall (id2 == num2value#))
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (not (id3 == num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == id2 and id3 == id4 -> eventually [0:num2temporal#] (always (id5 >= num1valuea# and id5 <= num1valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 >= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( once (id1 == num1value#) -> always (eventually (fall (id2 == id3))) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (not (id1 < num1value#) and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually (always [0:num4temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually (id1 >= num1value#)
always ( id1 > num1value# or id2 < num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( historically (id1 < num1value#) -> eventually [0:num3temporal#] (always (id2 > num2value#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 > num1value#) -> id2 < num2value# or id3 == id4 )
always (id1 == id2 or (id3 >= num1valuea# and id3 < num1valueb#))
always ( id1 == num1value# -> (not (id2 > num2valuea# and id2 < num2valueb#)) until [num3temporala#:num3temporalb#] (fall (id3 == id4)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 -> fall (id3 == id4) )
always ( fall (id1 == num1value#) -> eventually (id2 > num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> historically [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 <= num1value#) and id2 == id3 -> rise (id4 >= num2valuea# and id4 <= num2valueb#) and rise (id5 > num3valuea# and id5 < num3valueb#) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3value#) until [0:num5temporal#] (id4 >= num4value#) )
always ( (id1 > num1value#) since (not (id2 <= num2value#)) -> (id3 == id4) until [num3temporala#:num3temporalb#] (id5 == id6) )
eventually (id1 == id2 or id3 == num1value#)
always ( id1 < num1value# or not (id2 < num2value#) -> eventually [0:num3temporal#] (id3 == id4) )
always ( historically [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#)) -> not fall (always [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always [0:num2temporal#] (not rise (id1 == id2) or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 <= num1value#) -> rise (id2 < num2value#) )
always ( id1 > num1value# or id2 == id3 -> not rise (id4 >= num2valuea# and id4 <= num2valueb#) and id5 == num3value# )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
eventually [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( id1 == id2 and id3 == id4 -> id5 >= num1value# )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == num1value#) and id2 == num2value# -> id3 == id4 )
always (id1 == id2)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
eventually (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( not (id1 <= num1value#) or not (id2 < num2value#) -> id3 > num3value# )
always ( fall ((id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 <= num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 <= num4value#))) )
always ( id1 == id2 or rise (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id4 > num2valuea# and id4 < num2valueb#))) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 <= num3value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
eventually (id1 >= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall ((id2 < num2value#) until [num3temporala#:num3temporalb#] (not (id3 == id4))) )
always ( fall (id1 == num1value#) -> (id2 >= num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( fall (id1 == id2) -> id3 < num1value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> (id4 >= num2valuea# and id4 <= num2valueb#) until [0:num4temporal#] (id5 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (historically (id1 == id2)) -> eventually [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( once [0:num1temporal#] (rise (id1 == id2)) -> (not (id3 == num2value#)) until [0:num4temporal#] (id4 <= num3value#) )
always ( id1 == id2 or (id3 > num1valuea# and id3 <= num1valueb#) -> id4 > num2valuea# and id4 < num2valueb# )
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id4 == id5))) )
always ( rise (id1 < num1value#) and id2 <= num2value# -> always [0:num4temporal#] (id3 > num3value#) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) since (id2 == id3) -> (id4 == id5) since (id6 >= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( not (id1 == id2) -> not (eventually [0:num2temporal#] (id3 == num1value#)) )
always ( rise (id1 == num1value#) and rise (id2 > num2valuea# and id2 <= num2valueb#) -> once (id3 > num3valuea# and id3 < num3valueb#) )
always ( (id1 < num1value#) since (fall (id2 == id3)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id4 == id5)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 == id2) -> id3 < num1value# )
always ( once (rise (id1 == id2)) -> eventually (always [0:num1temporal#] (not rise (id3 == id4))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 == id5) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> (id3 <= num3value#) until [num5temporala#:num5temporalb#] (id4 == num4value#) )
always ( rise (id1 <= num1value#) -> rise (id2 == id3) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( not (historically [0:num2temporal#] (id1 > num1value#)) -> not (eventually (id2 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (not (id2 == num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not fall (id2 == num2value#) -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always (id2 == num3value#)) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and rise (id2 == num2value#))
always ( id1 >= num1value# and id2 >= num2value# -> always [0:num4temporal#] (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value# and id2 == id3)
always ( id1 == id2 and not (id3 == num1value#) -> id4 > num2valuea# and id4 < num2valueb# )
eventually [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
always ( rise (id1 <= num1value#) -> not rise (eventually [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( rise (id1 <= num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (not (id3 < num3value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
eventually [0:num1temporal#] (id1 == id2)
always [0:num1temporal#] (id1 == id2)
always ( id1 < num1value# or rise (id2 <= num2value#) -> id3 == id4 )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
always ( id1 == num1value# -> (not rise (id2 == id3)) until [0:num3temporal#] (id4 < num2value#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 > num1value# -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually (not (id1 >= num1value#) and id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == num3value#) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always (id1 == num1value#)
eventually (not (id1 == num1value#))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 <= num1value#) and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( (not (id1 < num1value#)) since [0:num3temporal#] (id2 <= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 < num4value#)) )
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 < num2value#))
always [0:num3temporal#] (id1 > num1value# or id2 > num2value#)
eventually [0:num1temporal#] (fall (id1 == id2))
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) or id2 > num2value#)
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not (id1 < num1value#) -> id2 < num2value# )
always ( rise (id1 > num1value#) -> always (not (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (id1 == id2) -> id3 == num1value# and id4 < num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always ( id1 <= num1value# and id2 == id3 -> id4 > num2value# and id5 == id6 )
always ( id1 == num1value# or id2 > num2value# -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( not (id1 == id2) and id3 == num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( fall (id1 == id2) -> always (eventually [0:num1temporal#] (not fall (id3 == id4))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> once [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> not ((id3 == num3value#) until [num5temporala#:num5temporalb#] (id4 > num4value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
eventually [0:num3temporal#] (not (id1 == num1value#) or id2 > num2value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (not (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) until (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (rise (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> always (eventually (rise (id2 >= num2value#))) )
always ( not fall (id1 == num1value#) and id2 > num2value# -> eventually [0:num4temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( not (always [0:num2temporal#] (id1 <= num1value#)) -> always (id2 < num3value#) )
always ( not (id1 < num1value#) -> id2 == id3 )
always ( not (id1 == id2) or not (id3 > num1valuea# and id3 < num1valueb#) -> not (id4 == id5) )
eventually [0:num1temporal#] (id1 == id2)
always [0:num1temporal#] (id1 == id2)
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always (id1 == num1value#)
always ( id1 == id2 or id3 > num1value# -> always [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (not fall (id2 == num2value#)) )
always ( id1 > num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> historically (id2 >= num3value#) )
always ( rise (id1 == id2) -> not (always [0:num2temporal#] (id3 == num1value#)) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 == num2value#)
always ( historically [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 == num1value# and id2 == num2value# -> id3 == num3value# )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id4 == num3value#)) )
always ( rise (id1 < num1value#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( id1 > num1value# -> eventually (always [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) )
always [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always (id1 == id2)
eventually (id1 == num1value#)
always ( id1 > num1value# and id2 == id3 -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( historically [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 == id2) -> not (always [0:num2temporal#] (id3 > num1value#)) )
always (not (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 >= num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> not (eventually [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 < num1value#) or id2 <= num2value# -> not (eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == id2) -> fall (id3 > num1valuea# and id3 < num1valueb#) or id4 > num2value# )
always ( (id1 == num1value#) since [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#)) -> (id3 > num4value#) since [0:num5temporal#] (id4 == id5) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> not (eventually (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 == num1value# and rise (id4 == num2value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> not (id2 < num2value#) )
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always (id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 == num1value#))
eventually [0:num2temporal#] (id1 > num1value#)
always ( always [0:num2temporal#] (id1 >= num1value#) -> not (eventually [0:num4temporal#] (rise (id2 >= num3value#))) )
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( (id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3 -> eventually [num2temporala#:num2temporalb#] (fall (id4 == id5)) )
always ( id1 <= num1value# and id2 <= num2value# -> id3 == num3value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always [0:num2temporal#] (not fall (id1 == num1value#))
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> not (id2 <= num2value#) )
always [0:num3temporal#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) or fall (id2 == num2value#) -> (id3 == id4) until [num3temporala#:num3temporalb#] (rise (id5 == id6)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always (id4 == num2value#) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> (id2 >= num3valuea# and id2 <= num3valueb#) until (id3 <= num4value#) )
eventually (id1 >= num1value#)
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 == id2) -> id3 == num1value# )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( once (rise (id1 == num1value#)) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2valuea# and id2 < num2valueb#)) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( id1 <= num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num4temporala#:num4temporalb#] (id3 > num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num2temporala#:num2temporalb#] (not rise (id2 == id3)) )
always ( fall (id1 == num1value#) -> once (id2 == num2value#) )
always [0:num3temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (not (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until [0:num4temporal#] (not rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> (id3 == id4) until (id5 >= num1valuea# and id5 <= num1valueb#) )
always ( id1 == id2 and id3 <= num1value# -> id4 == id5 )
always ( not fall (id1 == num1value#) and rise (id2 <= num2value#) -> (id3 > num3value#) until [0:num5temporal#] (id4 >= num4value#) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( id1 < num1value# or not fall (id2 == num2value#) -> always [num3temporala#:num3temporalb#] (id3 == id4) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# or id3 == id4 )
always ( id1 == id2 and id3 <= num1value# -> id4 > num2valuea# and id4 < num2valueb# )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
eventually (rise (id1 <= num1value#) and id2 == id3)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 > num1value# and id2 == id3 -> id4 == id5 )
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always ( rise (id1 == num1value#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 < num1value# and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( not (id1 >= num1value#) -> id2 > num2value# )
always ( rise (id1 > num1value#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 < num3value#)) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 > num2value#)
always ( fall (historically [num2temporala#:num2temporalb#] (not (id1 <= num1value#))) -> (id2 > num3value#) until [0:num5temporal#] (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> not ((id4 >= num2value#) until [num4temporala#:num4temporalb#] (id5 > num3valuea# and id5 <= num3valueb#)) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always (id1 == num1value# or id2 <= num2value#)
always ( once [0:num2temporal#] (id1 > num1value#) -> not (once (id2 >= num3value#)) )
always ( once [0:num1temporal#] (fall (id1 == id2)) -> eventually (always [num3temporala#:num3temporalb#] (id3 < num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 <= num1value#) and id2 > num2value# -> eventually [0:num4temporal#] (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# or not (id2 == id3))
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always [0:num3temporal#] (not (id1 < num1value#) or id2 <= num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
eventually [0:num2temporal#] (not (id1 >= num1value#))
always ( id1 >= num1value# -> eventually (id2 >= num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( not (id1 == num1value#) and id2 >= num2value# -> id3 == num3value# )
always [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#))
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> not (always [0:num3temporal#] (id2 < num2value#)) )
eventually (id1 == num1value# and rise (id2 == num2value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2value#))) )
always ( id1 == num1value# -> id2 >= num2value# and id3 == num3value# )
always ( once [num1temporala#:num1temporalb#] (fall (id1 == id2)) -> always [num3temporala#:num3temporalb#] (eventually (not (id3 > num2value#))) )
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (not (id2 == num2value#))) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) -> eventually (always (id2 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> rise (id3 == num3value#) or id4 == id5 )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (not (id1 == num1value#))
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 == id2 and id3 == num1value# -> id4 == num2value# )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 -> (id3 == num1value#) until [num3temporala#:num3temporalb#] (rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( id1 >= num1value# and id2 > num2value# -> id3 > num3value# or rise (id4 > num4value#) )
always ( id1 == num1value# or id2 >= num2value# -> always (eventually [num4temporala#:num4temporalb#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> id2 > num2value# and not (id3 == num3value#) )
eventually (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always [0:num2temporal#] (not fall (id1 == num1value#))
always ( rise (id1 > num1value#) -> not ((id2 == num2value#) until [0:num4temporal#] (rise (id3 > num3value#))) )
always (id1 <= num1value#)
always (not (id1 <= num1value#))
always ( rise (id1 == num1value#) -> not rise (id2 == num2value#) )
always [0:num3temporal#] (id1 >= num1value# and not (id2 >= num2value#))
always ( (not (id1 == id2)) until [0:num1temporal#] (rise (id3 == id4)) -> always (eventually [num3temporala#:num3temporalb#] (fall (id5 == num2value#))) )
eventually [0:num2temporal#] (not rise (id1 == id2) and fall (id3 == num1value#))
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and rise (id2 >= num2value#))
always ( not rise (historically [0:num1temporal#] (id1 == id2)) -> eventually [num3temporala#:num3temporalb#] (rise (id3 < num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 >= num2value# and rise (id3 <= num3value#) )
always (id1 == id2 and id3 > num1value#)
always [0:num1temporal#] (id1 == id2)
always ( (id1 == num1value#) since [0:num3temporal#] (id2 > num2value#) -> eventually [num5temporala#:num5temporalb#] (always [num6temporala#:num6temporalb#] (id3 < num4value#)) )
eventually (id1 >= num1value# and id2 == num2value#)
always (id1 <= num1value# or id2 == num2value#)
eventually (not fall (id1 >= num1value#))
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 < num3value#)) )
always ( rise (id1 > num1value#) -> once [num3temporala#:num3temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always [0:num3temporal#] (id1 > num1value# or not (id2 > num2value#))
always ( id1 <= num1value# and rise (id2 <= num2value#) -> rise (id3 == id4) )
always ( rise (id1 == num1value#) -> eventually (id2 <= num2value#) )
always ( (id1 < num1value#) since [num3temporala#:num3temporalb#] (id2 < num2value#) -> (id3 >= num4value#) until [0:num6temporal#] (id4 > num5valuea# and id4 < num5valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (not (id2 == id3)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( id1 == id2 or not (id3 >= num1value#) -> id4 == num2value# )
always ( rise (id1 == id2) -> always (eventually [0:num2temporal#] (id3 == num1value#)) )
always ( id1 == num1value# -> (id2 <= num2value#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 == id2 -> (id3 > num1value#) since (id4 >= num2value#) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (not (id3 < num3value#)) )
always ( rise (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 < num1value#) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 == id5 )
eventually [0:num3temporal#] (id1 == num1value# or not fall (id2 >= num2value#))
always ( id1 >= num1value# -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> (id2 <= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( not (id1 <= num1value#) and id2 == num2value# -> (id3 == id4) until [0:num4temporal#] (id5 == num3value#) )
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (always (not (id2 > num2value#))) )
always ( rise (id1 == id2) -> (id3 <= num1value#) until (not rise (id4 == num2value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 == id2) -> always (not fall (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (not (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( (id1 <= num1value#) since (not (id2 >= num2value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> (id2 >= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( not fall (id1 == num1value#) and id2 <= num2value# -> eventually [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( rise (id1 == id2) -> (id3 <= num1value#) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (not (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until (id4 <= num2value#) )
eventually (id1 >= num1value#)
always ( fall (id1 == id2) -> id3 == num1value# and rise (id4 < num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 > num1value#) -> id2 == num2value# and not (id3 == num3value#) )
always ( once [0:num1temporal#] (id1 == id2) -> (id3 == num2value#) until [0:num4temporal#] (rise (id4 >= num3value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 == num2value#) )
always ( rise (id1 == id2) -> (id3 == num1value#) until [num2temporala#:num2temporalb#] (rise (id4 == id5)) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 >= num1value#) -> id2 <= num2value# and id3 == id4 )
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 < num1valueb#))
always ( id1 == id2 or id3 == num1value# -> eventually [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) until (rise (id2 == num2value#)) -> eventually (always [0:num4temporal#] (id3 >= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# and id3 <= num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#) -> rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always (id3 > num1value#)) )
eventually (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> always (eventually [0:num3temporal#] (id4 > num2value#)) )
always ( always [0:num1temporal#] (id1 == id2) -> (id3 > num2valuea# and id3 < num2valueb#) until [num4temporala#:num4temporalb#] (id4 >= num3value#) )
always ( once [0:num1temporal#] (id1 == id2) -> eventually (id3 > num2valuea# and id3 < num2valueb#) )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [0:num3temporal#] (id1 >= num1value# or id2 >= num2value#)
always ( rise (id1 == num1value#) -> (id2 <= num2value#) since (rise (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 and (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 >= num1value# and not (id2 <= num2value#) -> id3 <= num3value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> historically [0:num3temporal#] (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually (id2 == num2value#)) )
always (not (id1 < num1value#))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( not (id1 == num1value#) -> id2 > num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 and not (id5 < num3value#) )
always ( id1 >= num1value# and id2 == id3 -> id4 == id5 )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 < num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (not (id3 >= num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (id1 > num1value#)
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1value# -> (id2 < num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( not (once [0:num2temporal#] (id1 >= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 <= num2valueb#) and not fall (id3 == id4) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 < num1value#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 < num1value# or id2 <= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id3 == id4))) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always ( id1 == id2 -> eventually [0:num1temporal#] (always [num2temporala#:num2temporalb#] (id3 == id4)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == id2) -> (id3 == num1value#) since [0:num3temporal#] (not (id4 == num2value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( once [num2temporala#:num2temporalb#] (rise (id1 > num1value#)) -> eventually (always [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> rise (id3 == num1value#) or not (id4 > num2value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (fall (id3 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id4 == num3value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually (id3 >= num1valuea# and id3 < num1valueb#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [0:num4temporal#] (rise (id2 < num3value#))) )
always ( not (id1 < num1value#) or id2 > num2value# -> id3 == id4 and id5 > num3value# )
always ( eventually [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
eventually [num3temporala#:num3temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always (id1 == id2 or id3 == id4)
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 >= num2value# or id3 <= num3value# )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not fall (id1 == num1value#) and id2 == id3 -> id4 > num2value# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (always (not (id2 == id3))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 < num2valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
always ( fall (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( always [0:num2temporal#] (not (id1 >= num1value#)) -> always [0:num4temporal#] (not (id2 < num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 <= num2value#) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( not (id1 == num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 > num2value#))) )
always ( rise (id1 == num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> (id3 == id4) since [num4temporala#:num4temporalb#] (id5 == num3value#) )
always ( rise (id1 <= num1value#) -> rise (always [0:num2temporal#] (not fall (id2 == id3))) )
eventually [0:num1temporal#] (id1 == id2)
always ( fall ((id1 == num1value#) until [num2temporala#:num2temporalb#] (id2 == id3)) -> always (eventually (id4 > num3value#)) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (fall (id2 == num3value#))) )
always ( fall (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) since [0:num3temporal#] (id4 >= num2valuea# and id4 < num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( eventually [0:num1temporal#] (id1 == id2) -> (id3 < num2value#) since (rise (id4 < num3value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> once [num3temporala#:num3temporalb#] (not (id2 > num2value#)) )
eventually (id1 == num1value# and id2 == num2value#)
always (id1 == num1value# and id2 >= num2value#)
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [0:num2temporal#] (not (id1 < num1value#))
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> not (id2 >= num2value#) and id3 >= num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (not (id3 == id4))) )
always ( rise (id1 > num1value#) -> not (once [0:num3temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always (id1 == id2 and not rise (id3 == id4))
eventually (rise (id1 <= num1value#))
always ( not (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> id3 == num3value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise ((not (id2 == id3)) until (rise (id4 <= num2value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == id3) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( not (id1 == id2) and id3 == num1value# -> id4 > num2valuea# and id4 < num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( id1 >= num1value# and id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> rise (id4 < num2value#) and id5 == num3value# )
always (id1 == num1value# and id2 > num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
always ( id1 < num1value# and id2 > num2value# -> (id3 <= num3value#) since [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( id1 == id2 -> not ((not (id3 > num1valuea# and id3 < num1valueb#)) until (id4 == id5)) )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> not rise (id3 == id4) or id5 > num3value# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( not (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 > num3value#) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 <= num1value#) -> not ((id2 > num2valuea# and id2 < num2valueb#) until (id3 > num3valuea# and id3 < num3valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [num2temporala#:num2temporalb#] (fall (id3 == id4))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
eventually (id1 <= num1value#)
always ( not ((id1 <= num1value#) until (id2 == num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> id2 == id3 and id4 <= num2value# )
always ( not (id1 == id2) or id3 == num1value# -> id4 > num2value# )
always ( fall (id1 == id2) -> (id3 == id4) since [0:num2temporal#] (rise (id5 >= num1value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 == num2value#) until (id3 <= num3value#)) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) until [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 > num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( not (id1 == id2) and id3 == id4 -> id5 < num1value# and id6 == id7 )
always ( id1 == id2 -> not (once [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( (id1 == id2) since [0:num2temporal#] (id3 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id4 >= num3value#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
eventually [0:num2temporal#] (not fall (id1 == num1value#))
always ( always (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2value#) until [0:num4temporal#] (not (id3 == num3value#)) )
always ( not (id1 <= num1value#) -> historically [0:num3temporal#] (id2 < num2value#) )
always ( id1 >= num1value# -> id2 >= num2value# )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 >= num1value#) since (not rise (id2 == id3)) -> (id4 > num2value#) until [num4temporala#:num4temporalb#] (rise (id5 >= num3valuea# and id5 <= num3valueb#)) )
always [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 <= num1value#) -> not rise ((id2 == num2value#) until [0:num4temporal#] (id3 < num3value#)) )
always ( historically (id1 == id2) -> always [0:num2temporal#] (id3 <= num1value#) )
eventually (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( not ((id1 == id2) since [num2temporala#:num2temporalb#] (not (id3 <= num1value#))) -> (not (id4 < num3value#)) until [0:num4temporal#] (rise (id5 == id6)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value# -> rise (id3 == num3value#) and id4 == num4value# )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 == id2) since [num1temporala#:num1temporalb#] (rise (id3 == id4)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id5 == num2value#))) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 > num1value#)
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 >= num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( id1 >= num1value# -> not fall (id2 > num2valuea# and id2 < num2valueb#) and not (id3 >= num3value#) )
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always (not (id1 > num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
eventually [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( not ((id1 > num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 == num2value#)) -> (id3 <= num4value#) until [num6temporala#:num6temporalb#] (rise (id4 > num5value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( not (id1 == num1value#) and rise (id2 > num2value#) -> not (id3 > num3value#) and id4 == id5 )
always (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( not (once (rise (id1 > num1value#))) -> not (eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not rise (id2 == id3) -> not rise (id4 == num2value#) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
always (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 == num1value#) -> once [0:num3temporal#] (id2 <= num2value#) )
always (not (id1 >= num1value#) and id2 < num2value#)
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (id4 == num2value#) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( rise (id1 > num1value#) -> rise (id2 == id3) )
always ( not (id1 < num1value#) and not (id2 > num2valuea# and id2 <= num2valueb#) -> (id3 > num3valuea# and id3 < num3valueb#) and rise (id4 >= num4value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value# and id2 == id3)
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always ( id1 > num1value# and id2 == id3 -> not (id4 == id5) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and rise (id2 == num2value#))
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> not (historically (not (id2 < num2value#))) )
always ( id1 == id2 -> always (eventually [0:num1temporal#] (id3 == id4)) )
always ( id1 == num1value# and id2 > num2value# -> eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually (rise (id2 == num2value#)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( not (id1 == id2) or id3 == num1value# -> (id4 > num2valuea# and id4 < num2valueb#) until [num4temporala#:num4temporalb#] (id5 > num3valuea# and id5 < num3valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> id3 >= num3valuea# and id3 < num3valueb# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 == num1value# and rise (id2 >= num2value#) -> always [0:num4temporal#] (not (id3 < num3value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 == id5 and (id6 >= num2valuea# and id6 < num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until (id3 == num3value#) )
always ( rise (id1 >= num1value#) -> not fall (id2 == id3) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 < num1value# or id2 > num2value# -> always [num4temporala#:num4temporalb#] (not fall (id3 == num3value#)) )
always ( historically [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (id3 > num2valuea# and id3 < num2valueb#) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 < num1value#) -> always (id2 == num2value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> rise (id2 == num2value#) or id3 > num3value# )
always ( id1 == id2 and id3 > num1value# -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id4 == id5)) )
always ( rise (id1 >= num1value#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( fall (id1 == num1value#) -> id2 < num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value# -> not (id3 <= num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not fall (id2 > num2valuea# and id2 < num2valueb#)) since (rise (id3 == num3value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (not (id3 == num1value#)) )
always ( rise (id1 <= num1value#) and not (id2 == id3) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (fall (id4 == id5))) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
always ( once [0:num2temporal#] (id1 > num1value#) -> (id2 == id3) until [0:num4temporal#] (id4 > num3value#) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (not rise (id3 >= num1value#))) )
always [num3temporala#:num3temporalb#] (not (id1 == num1value#) and id2 <= num2value#)
always ( rise (id1 == num1value#) -> rise (id2 == num2value#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 == id2 or id3 == id4)
always ( id1 > num1value# -> historically (not (id2 == num2value#)) )
always [0:num3temporal#] (id1 > num1value# and id2 <= num2value#)
always ( id1 > num1value# and id2 == num2value# -> fall (id3 == id4) )
always ( rise (id1 > num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( once (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num3temporal#] (fall (id1 == num1value#) and rise (id2 < num2value#))
always [0:num3temporal#] (id1 == num1value# or id2 < num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 >= num1value#) and id2 >= num2value# -> not (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == num1value#) -> eventually (always (not (id2 < num2value#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always (not (id2 >= num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually (id2 == id3)) )
always ( fall (id1 == id2) -> eventually (id3 <= num1value#) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
eventually (id1 == num1value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 <= num2value#))
always ( id1 == id2 -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( rise (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 <= num1value# and id2 == id3 -> rise (id4 > num2value#) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always (id1 == id2)
always ( id1 == id2 or id3 == id4 -> (id5 == id6) until (id7 >= num1value#) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) and not (id2 > num2valuea# and id2 < num2valueb#))
eventually (not fall (id1 == id2) and id3 == num1value#)
always (id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> not (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 == num1value#)) )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( not (id1 == num1value#) or id2 == id3 -> (id4 > num2valuea# and id4 <= num2valueb#) since (rise (id5 >= num3valuea# and id5 <= num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( not (id1 == id2) and id3 == id4 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id5 >= num1value#)) )
always ( not (id1 < num1value#) or id2 < num2value# -> id3 == id4 )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# and id2 == num2value# -> (id3 >= num3valuea# and id3 < num3valueb#) and rise (id4 == num4value#) )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 == id2) -> historically [0:num2temporal#] (id3 == num1value#) )
eventually [num2temporala#:num2temporalb#] (not (id1 < num1value#) and id2 == id3)
eventually [num3temporala#:num3temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
always ( id1 == id2 and fall (id3 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
eventually (rise (id1 > num1value#))
always ( fall (id1 == num1value#) -> rise (eventually (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> not rise (id2 > num2value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 >= num1value# or id2 > num2value# -> not (eventually [0:num4temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> (not (id2 < num2value#)) until (rise (id3 < num3value#)) )
always ( id1 < num1value# or id2 > num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == id2 or id3 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
eventually [0:num2temporal#] (id1 < num1value#)
eventually (id1 >= num1value#)
always [0:num3temporal#] (id1 > num1value# and not (id2 == num2value#))
always ( historically [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 > num3value#)) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> not ((id4 == id5) until [0:num3temporal#] (id6 >= num2value#)) )
always ( rise (id1 < num1value#) -> not (eventually [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always (id2 == num2value#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 < num1value# -> rise (id2 == id3) )
always ( id1 > num1value# -> rise (id2 <= num2value#) )
always ( id1 < num1value# -> not (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# or fall (id2 == num2value#) -> id3 == num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 == num2value#) )
always (id1 >= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2value#) until [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 == num1value#) -> id2 > num2value# or fall (id3 == num3value#) )
always ( once (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) -> historically [0:num5temporal#] (id3 < num4value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always (id3 >= num3value#)) )
always ( fall (id1 == num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (rise (id3 < num3value#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 < num1value#))
always ( rise (id1 == id2) -> not (always [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always (id1 <= num1value#)
always [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( (id1 < num1value#) since [0:num2temporal#] (id2 == id3) -> not fall (always (not (id4 < num3value#))) )
always ( id1 >= num1value# -> id2 <= num2value# or (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 <= num2value#)) until (id3 > num3value#) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 > num1valuea# and id1 < num1valueb# -> fall (eventually (id2 == id3)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 == id2 and id3 < num1value# -> always (eventually [0:num3temporal#] (id4 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == id2 and not (id3 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 < num2value#))) )
always ( rise (id1 == num1value#) -> not (id2 < num2value#) )
always ( fall (id1 == num1value#) -> not ((id2 > num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 >= num2valuea# and id2 < num2valueb#))
eventually (rise (id1 < num1value#) and id2 == id3)
always [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
always ( (id1 == id2) since [0:num2temporal#] (id3 < num1value#) -> eventually (fall (id4 == num3value#)) )
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> eventually (fall (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
eventually [num3temporala#:num3temporalb#] (not rise (id1 == num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == num1value# and id2 >= num2value# -> eventually (id3 < num3value#) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
always ( rise (id1 <= num1value#) -> not fall ((id2 == id3) until [num2temporala#:num2temporalb#] (rise (id4 == id5))) )
always ( not (id1 <= num1value#) and rise (id2 < num2value#) -> eventually [0:num4temporal#] (not (id3 == num3value#)) )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( once [0:num2temporal#] (id1 < num1value#) -> eventually [0:num4temporal#] (not (id2 == num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> not rise (id2 == id3) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> id2 >= num2value# or id3 == id4 )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> (id3 == id4) until (id5 == num3value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 < num1value#) and id2 == id3 -> always [0:num2temporal#] (not rise (id4 == id5)) )
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#) and not rise (id2 == id3))
always ( fall (id1 == num1value#) -> id2 == num2value# )
always [0:num3temporal#] (id1 == num1value# or not (id2 == num2value#))
always ( fall (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (rise (id4 > num2valuea# and id4 < num2valueb#)) )
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> historically (id3 == num3value#) )
eventually [0:num3temporal#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (fall (id2 == id3))) )
always ( not rise (id1 == id2) -> id3 >= num1value# )
always ( once [0:num1temporal#] (fall (id1 == id2)) -> not ((id3 >= num2value#) since [num4temporala#:num4temporalb#] (id4 > num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 < num2value#) )
always ( id1 > num1value# or id2 < num2value# -> eventually [0:num4temporal#] (id3 < num3value#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( id1 == num1value# -> rise (id2 >= num2value#) )
always ( rise (id1 >= num1value#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == id2) -> rise (id3 > num1value#) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always (id1 <= num1value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num3temporal#] (not (id1 == num1value#) or not fall (id2 >= num2value#))
always ( id1 == id2 -> historically [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( id1 == num1value# or id2 == num2value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 < num1value#))) )
always ( id1 > num1value# or id2 > num2value# -> not fall (always [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( id1 == id2 or id3 == id4 -> always (eventually (rise (id5 < num1value#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( not ((id1 == id2) since (id3 >= num1value#)) -> always [0:num2temporal#] (id4 == id5) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (not (id2 >= num2value#)) )
always ( id1 <= num1value# -> id2 == id3 and (id4 > num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not fall (id2 > num2valuea# and id2 < num2valueb#)) until (id3 < num3value#) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually (id1 < num1value#)
always [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
always ( rise (id1 >= num1value#) -> eventually (always [0:num3temporal#] (not (id2 >= num2value#))) )
always [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( not (id1 == id2) and id3 == id4 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id5 < num1value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id3 == num1value#))) )
always ( once [num1temporala#:num1temporalb#] (not (id1 == id2)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 > num2valuea# and id3 < num2valueb#)) )
always ( id1 <= num1value# or rise (id2 <= num2value#) -> id3 == num3value# )
always ( id1 == id2 or not (id3 == id4) -> not (eventually [0:num2temporal#] (rise (id5 == num1value#))) )
always ( id1 < num1value# and not (id2 == num2value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 <= num3value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 >= num1value#) -> rise (id2 < num2value#) and id3 == id4 )
always (id1 == num1value#)
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 <= num2value#))
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [0:num3temporal#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (not (id1 == id2) or (id3 > num1valuea# and id3 < num1valueb#))
always ( historically (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) and id2 > num2value# -> not (eventually (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
eventually [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( rise (id1 == id2) -> not (id3 <= num1value#) )
always ( not fall (id1 == num1value#) and not rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always ( fall (id1 == num1value#) -> (not fall (id2 == id3)) until [0:num3temporal#] (id4 == num2value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
eventually (not (id1 < num1value#) or id2 < num2value#)
always ( rise (id1 <= num1value#) -> (not (id2 == id3)) since [0:num2temporal#] (id4 == id5) )
eventually (rise (id1 >= num1value#) and id2 > num2value#)
always ( rise (id1 > num1value#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 < num1value#))
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( (id1 == id2) since [0:num2temporal#] (id3 >= num1value#) -> always [0:num4temporal#] (id4 > num3valuea# and id4 < num3valueb#) )
always ( not fall (id1 > num1value#) and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 > num2value#)
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 <= num3value# )
always ( rise (id1 < num1value#) -> historically [0:num3temporal#] (not (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> rise (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> id2 > num2value# or (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and not (id2 == num2value#))
always ( rise (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 == num3value#))) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (once [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 >= num1value# and id2 == num2value# -> always (eventually (id3 <= num3value#)) )
eventually (not (id1 >= num1value#) or id2 < num2value#)
eventually (id1 <= num1value# or id2 >= num2value#)
eventually (rise (id1 >= num1valuea# and id1 < num1valueb#))
always ( (id1 >= num1value#) since [0:num3temporal#] (not (id2 == num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (not (id3 >= num4value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 <= num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( id1 == num1value# and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( not (historically [0:num2temporal#] (id1 > num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 > num3value#))) )
always ( id1 == id2 -> rise (id3 > num1valuea# and id3 < num1valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num2temporal#] (not rise (id2 == id3)) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always (id1 == id2 or not fall (id3 > num1value#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) until (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( not fall (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3value#))) )
always ( not fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (id2 == id3) )
eventually [0:num2temporal#] (not (id1 > num1value#) and id2 == id3)
always ( id1 == num1value# or rise (id2 <= num2value#) -> id3 > num3value# or id4 >= num4value# )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( not (id1 == id2) or id3 == id4 -> id5 >= num1value# and id6 >= num2value# )
always ( rise (id1 < num1value#) -> (id2 == num2value#) until (not rise (id3 == id4)) )
always [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( once [0:num2temporal#] (not (id1 <= num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == id3)) )
eventually (rise (id1 > num1value#))
always ( not rise (id1 == num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always [0:num3temporal#] (id1 > num1value# or id2 == num2value#)
always [num2temporala#:num2temporalb#] (not rise (id1 == id2) and id3 <= num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( not (id1 > num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually (id1 == num1value# or id2 == id3)
eventually ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num2temporala#:num2temporalb#] (not rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (historically (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> rise (id2 >= num2valuea# and id2 < num2valueb#) or id3 <= num3value# )
always ( once [num2temporala#:num2temporalb#] (id1 < num1value#) -> (id2 > num3value#) until (id3 == id4) )
eventually (not (id1 == id2))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> not (eventually [num2temporala#:num2temporalb#] (id5 == id6)) )
always ( rise (id1 <= num1value#) -> rise (id2 == id3) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num3value#) until (id3 == num4value#) )
always ( id1 >= num1value# and fall (id2 == num2value#) -> (id3 == num3value#) until (id4 == id5) )
always ( not fall (id1 == num1value#) or rise (id2 <= num2value#) -> (id3 == id4) until [0:num4temporal#] (id5 <= num3value#) )
always ( id1 == num1value# or id2 >= num2value# -> id3 > num3value# or id4 > num4value# )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (not (id3 < num1value#))) )
eventually (id1 == id2 or id3 == num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 >= num1valuea# and id1 < num1valueb# -> id2 < num2value# )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always [0:num1temporal#] (id1 == id2)
always ( (id1 >= num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> eventually (always [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 > num3valuea# and id2 <= num3valueb#))) )
always ( fall (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually (rise (id2 == id3))) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 == num1value#)) )
always ( (id1 < num1value#) since (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [0:num3temporal#] (fall (id3 == id4)) )
always ( id1 < num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) since (not rise (id2 == id3))) -> eventually [0:num3temporal#] (rise (id4 >= num2value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always [num2temporala#:num2temporalb#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 == num1value#) and not (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 > num3value# )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( historically (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( not (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( once (rise (id1 >= num1value#)) -> always [num3temporala#:num3temporalb#] (not (id2 <= num2value#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> once [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> not (id2 < num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# or id2 == id3 -> always [0:num3temporal#] (eventually (rise (id4 < num2value#))) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always ( not (historically [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))) -> eventually [0:num4temporal#] (id2 == num3value#) )
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 < num3value#)) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually (id1 < num1value# and id2 < num2value#)
always ( rise (id1 == id2) -> id3 < num1value# )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> id3 < num3value# or rise (id4 > num4value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and id4 == id5 )
always ( id1 == num1value# -> id2 >= num2value# or id3 < num3value# )
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always ( rise (id1 >= num1value#) -> id2 > num2value# and not rise (id3 == id4) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 > num1value#) )
always ( fall (id1 == num1value#) -> not ((id2 == num2value#) until (id3 == id4)) )
always [0:num2temporal#] (id1 <= num1value# and not fall (id2 == id3))
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 and id5 == num3value# )
always ( fall (id1 == num1value#) -> eventually (always (id2 > num2value#)) )
always ( fall (id1 == id2) -> (id3 > num1value#) until [0:num3temporal#] (id4 >= num2value#) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 == id3) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) or id3 == num3value# )
always ( id1 >= num1value# -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( always (id1 < num1value#) -> (id2 > num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( id1 < num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (not (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 <= num3value#) )
eventually [0:num2temporal#] (not fall (id1 > num1value#))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( id1 == num1value# and id2 == id3 -> not ((not (id4 == id5)) until [0:num3temporal#] (rise (id6 <= num2value#))) )
always ( not ((not fall (id1 == num1value#)) since [num3temporala#:num3temporalb#] (id2 == num2value#)) -> always [0:num5temporal#] (id3 == num4value#) )
always ( id1 >= num1value# or fall (id2 == num2value#) -> (id3 == num3value#) until [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) or rise (id2 < num2value#))
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( id1 < num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always [0:num2temporal#] (id1 > num1value#)
always ( id1 == id2 and id3 <= num1value# -> always (eventually [num3temporala#:num3temporalb#] (rise (id4 == num2value#))) )
always ( fall (id1 == num1value#) -> eventually (rise (id2 <= num2value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( once [num1temporala#:num1temporalb#] (fall (id1 == id2)) -> eventually [0:num3temporal#] (id3 == num2value#) )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( not (once (not (id1 == num1value#))) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (eventually (not (id2 == id3))) )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually (id2 == num2value#)) )
always [0:num2temporal#] (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 == num1value# and not (id2 >= num2value#) -> not (id3 == id4) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( eventually (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> once [num4temporala#:num4temporalb#] (not (id3 == id4)) )
always [0:num2temporal#] (id1 == id2 or id3 >= num1value#)
eventually [0:num2temporal#] (not (id1 <= num1value#))
always ( id1 > num1value# or id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( not (once [0:num2temporal#] (id1 >= num1value#)) -> (id2 == id3) until (rise (id4 == id5)) )
always ( rise (id1 >= num1value#) -> id2 == id3 and (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 == id3) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( not (id1 <= num1value#) and id2 == id3 -> not (eventually [num3temporala#:num3temporalb#] (not (id4 >= num2valuea# and id4 <= num2valueb#))) )
always ( id1 >= num1value# and rise (id2 == num2value#) -> id3 == id4 )
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 > num2value#))
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually (id1 <= num1value# or id2 >= num2value#)
always ( rise (id1 == id2) -> id3 < num1value# and id4 == num2value# )
always ( not (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) and not fall (id2 == id3) -> always [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [0:num2temporal#] (id1 < num1value#)
always [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#))
always ( id1 <= num1value# or fall (id2 == num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 < num1value# -> (not rise (id2 > num2valuea# and id2 < num2valueb#)) until [0:num3temporal#] (fall (id3 == id4)) )
always ( not (id1 == num1value#) and id2 == num2value# -> always [0:num4temporal#] (id3 < num3value#) )
always ( id1 > num1value# -> not (id2 == num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always [0:num3temporal#] (not (id1 < num1value#) and id2 > num2value#)
always ( id1 == num1value# -> always [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( id1 < num1value# and id2 < num2value# -> not (once [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
eventually (id1 == num1value#)
always ( id1 == id2 -> not (always (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 >= num1value# and id2 == num2value# -> id3 >= num3value# and (id4 > num4valuea# and id4 < num4valueb#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always [num2temporala#:num2temporalb#] (id1 > num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> rise (eventually [num4temporala#:num4temporalb#] (id2 <= num3value#)) )
always (id1 == num1value# and id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 >= num2value#)
eventually [0:num2temporal#] (id1 == id2 or rise (id3 >= num1value#))
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always [0:num1temporal#] (id1 == id2)
eventually (not rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( id1 > num1value# -> id2 == id3 )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == num1value# or not rise (id2 > num2value#) -> historically [num3temporala#:num3temporalb#] (id3 == id4) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# or id2 < num2value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( (id1 == num1value#) since (id2 == id3) -> (id4 >= num2value#) until (id5 < num3value#) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3))
always [0:num1temporal#] (not (id1 == id2))
always ( id1 == num1value# or id2 == num2value# -> id3 == num3value# and not fall (id4 == num4value#) )
always ( fall (id1 == id2) -> (id3 < num1value#) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( rise (id1 == id2) -> not (id3 >= num1value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> rise (id3 >= num3value#) )
always ( not (once [0:num2temporal#] (rise (id1 >= num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == id3))) )
always ( rise (id1 > num1value#) -> not ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( id1 == num1value# -> rise (id2 > num2value#) and id3 > num3value# )
always ( id1 == num1value# or rise (id2 > num2value#) -> once [num4temporala#:num4temporalb#] (id3 > num3value#) )
always ( historically (not (id1 > num1valuea# and id1 < num1valueb#)) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually (rise (id1 < num1value#))
always ( id1 <= num1value# and rise (id2 >= num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 == id2 -> id3 == num1value# )
always ( not (once (rise (id1 < num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num2temporal#] (eventually (id2 == id3)) )
always [0:num2temporal#] (not (id1 == id2) or id3 >= num1value#)
always ( id1 <= num1value# or id2 < num2value# -> historically [0:num4temporal#] (not (id3 < num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 <= num3value# and rise (id4 < num4value#) )
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 < num3value#) until [0:num5temporal#] (rise (id4 < num4value#)) )
always ( id1 == num1value# and id2 >= num2value# -> (id3 < num3value#) since [0:num5temporal#] (id4 > num4value#) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 > num1valuea# and id3 <= num1valueb#))) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#))
always ( rise (id1 == id2) -> id3 == num1value# )
always ( id1 < num1value# -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num3temporal#] (rise (id1 == num1value#) or id2 < num2value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == num1value# -> always [0:num2temporal#] (eventually (rise (id2 == id3))) )
eventually (id1 > num1value#)
always ( fall (id1 == id2) -> id3 == id4 )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
always [0:num3temporal#] (id1 <= num1value# and not fall (id2 == num2value#))
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) -> id2 >= num2value# or (id3 >= num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 == id2 and not fall (id3 == num1value#))
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == num1value# and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (not (id3 == num3value#)) )
always ( rise (id1 == id2) -> (id3 == num1value#) until [0:num3temporal#] (id4 > num2value#) )
always ( rise (id1 == num1value#) or id2 == num2value# -> id3 < num3value# )
always ( id1 <= num1value# or id2 == num2value# -> id3 == id4 )
always ( id1 >= num1value# or id2 == num2value# -> historically (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( once (rise (id1 == num1value#)) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == num2value#) until (id3 <= num3value#)) )
always ( not rise (id1 == id2) -> not (eventually [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 <= num1valueb#)) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and not (id2 <= num2value#))
always ( rise (id1 > num1value#) -> id2 == num2value# or rise (id3 > num3value#) )
always ( not ((not (id1 <= num1value#)) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) -> historically [0:num5temporal#] (id3 >= num4value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> eventually (always (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))
always ( id1 == num1value# -> id2 > num2value# )
always ( not (id1 > num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
eventually (id1 >= num1value#)
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 == id2) -> not (eventually [0:num2temporal#] (rise (id3 < num1value#))) )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) and id2 == num2value# -> (not (id3 == num3value#)) until [0:num5temporal#] (id4 <= num4value#) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always (not rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
eventually (id1 == id2)
always ( not fall (id1 == id2) or id3 == id4 -> historically [num2temporala#:num2temporalb#] (id5 == num1value#) )
always ( not (id1 <= num1value#) and fall (id2 > num2valuea# and id2 <= num2valueb#) -> not (id3 <= num3value#) )
always ( rise (id1 == num1value#) -> eventually (id2 == id3) )
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually (id1 < num1value#)
always ( not (once [0:num2temporal#] (rise (id1 <= num1value#))) -> eventually (always [num4temporala#:num4temporalb#] (id2 > num3value#)) )
always ( fall (id1 == id2) -> id3 < num1value# )
always ( not ((id1 <= num1value#) since (id2 >= num2valuea# and id2 <= num2valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( (not (id1 < num1value#)) since (not (id2 > num2valuea# and id2 < num2valueb#)) -> eventually (always [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( rise (id1 > num1value#) or rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually (always [0:num4temporal#] (id3 <= num3value#)) )
always [0:num2temporal#] (not rise (id1 == id2) and id3 > num1value#)
always (not (id1 > num1value#) and not (id2 == id3))
always ( not (id1 <= num1value#) -> rise (id2 >= num2value#) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( fall (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( once (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (id2 >= num3valuea# and id2 < num3valueb#)) )
always [0:num1temporal#] (not (id1 == id2))
always ( not fall (id1 == num1value#) -> not (once [0:num3temporal#] (id2 == num2value#)) )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always (id4 == id5)) )
always (id1 == id2 or id3 <= num1value#)
always ( rise (id1 > num1value#) -> rise ((id2 < num2value#) until (not rise (id3 == id4))) )
always ( id1 == num1value# and id2 < num2value# -> not ((id3 == num3value#) until [0:num4temporal#] (id4 == id5)) )
always ( rise (id1 > num1value#) -> eventually (id2 > num2valuea# and id2 <= num2valueb#) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == id2) -> rise (id3 < num1value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> id4 == id5 )
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( not (id1 >= num1valuea# and id1 < num1valueb#) -> (not fall (id2 >= num2value#)) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> eventually (always [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (always (not (id2 >= num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 <= num3value#))) )
always ( rise (id1 < num1value#) -> always (eventually (id2 <= num2value#)) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> once [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2value#) -> eventually [0:num5temporal#] (id3 >= num4value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 >= num1value# and not (id2 == num2value#) -> id3 <= num3value# )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( id1 == id2 -> not fall (always [num2temporala#:num2temporalb#] (id3 > num1value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == id2 -> (id3 == id4) until [0:num2temporal#] (id5 == num1value#) )
always ( not ((id1 > num1value#) since (id2 < num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( id1 == num1value# and id2 == num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always (id1 < num1value#)
always ( once [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (not (id3 <= num2value#)) )
always ( id1 > num1value# or id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( not (id1 < num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( (id1 > num1value#) until [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3value#) )
always ( once [num2temporala#:num2temporalb#] (not (id1 < num1value#)) -> not (always (not (id2 <= num3value#))) )
always ( id1 == id2 -> not (eventually [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( eventually (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always ( id1 == id2 -> id3 == num1value# )
always ( id1 <= num1value# -> rise (id2 <= num2value#) )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always (id1 == num1value#)
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 == id2) -> fall (once [0:num1temporal#] (id3 == id4)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always (id2 > num2value#) )
always (id1 == num1value# or id2 < num2value#)
always ( fall (id1 == num1value#) -> id2 == id3 and not rise (id4 == id5) )
always ( rise (id1 == id2) -> (id3 == id4) until [0:num1temporal#] (rise (id5 == id6)) )
eventually (rise (id1 >= num1value#) and rise (id2 == num2value#))
eventually [0:num2temporal#] (id1 > num1value#)
always ( not fall (once (id1 == num1value#)) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 >= num1value# and id2 > num2value# -> always (eventually (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( id1 >= num1value# -> id2 <= num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) and rise (id4 < num2value#) )
always ( fall (id1 == num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until (id3 < num3value#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( not (id1 >= num1value#) or id2 == num2value# -> (id3 >= num3value#) until [0:num4temporal#] (id4 == id5) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 == num1value#) -> fall (always (id2 > num2value#)) )
always ( not rise (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 == num1value#)) )
always [0:num3temporal#] (id1 < num1value# and id2 > num2value#)
always ( rise (id1 > num1value#) -> not ((id2 < num2value#) until [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( id1 >= num1value# and id2 < num2value# -> not rise (id3 >= num3valuea# and id3 <= num3valueb#) or fall (id4 == num4value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 <= num2value#))) )
always [0:num3temporal#] (not fall (id1 == num1value#) and id2 == num2value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( id1 < num1value# -> rise (historically (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (rise (id2 == id3)) )
eventually [0:num2temporal#] (rise (id1 < num1value#) or id2 == id3)
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# or (id4 > num4valuea# and id4 < num4valueb#) )
always ( rise (id1 < num1value#) -> not ((not (id2 >= num2valuea# and id2 <= num2valueb#)) until [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( id1 == num1value# -> always [0:num3temporal#] (not (id2 > num2value#)) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 < num1value#) or id2 > num2value# -> (id3 < num3value#) until (id4 == id5) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> not (eventually [num2temporala#:num2temporalb#] (id3 == num1value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 >= num1value# and id2 == num2value# -> always (eventually (rise (id3 <= num3value#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (not (id2 == id3))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
eventually [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always ( id1 > num1value# -> (id2 >= num2value#) since [num3temporala#:num3temporalb#] (id3 == id4) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 <= num1value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (always [num4temporala#:num4temporalb#] (not fall (id3 == num3value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (not (id2 <= num2value#)) )
always (id1 >= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 <= num1value#) and id2 == id3 -> id4 < num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( not (historically [0:num2temporal#] (id1 >= num1value#)) -> fall ((id2 <= num3value#) until [num5temporala#:num5temporalb#] (id3 >= num4value#)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 == num1value# or id2 == id3 -> not (id4 == id5) )
eventually [0:num2temporal#] (rise (id1 <= num1value#) and id2 == id3)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( not (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( id1 <= num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually (always (id2 == num3value#)) )
always (not (id1 == id2) and not (id3 == num1value#))
eventually [0:num2temporal#] (id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) and not fall (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 > num1value# and id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 < num1value# and id2 < num2value# -> id3 > num3value# )
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == num1value#) -> (not (id2 < num2value#)) until [num3temporala#:num3temporalb#] (rise (id3 == id4)) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num3temporal#] (id1 == num1value# or (id2 > num2valuea# and id2 <= num2valueb#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (id2 <= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 <= num4value#)) )
always (id1 <= num1value# and id2 < num2value#)
always ( id1 == id2 and id3 > num1value# -> id4 == id5 )
always ( rise (id1 == id2) -> once (rise (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 == num1value#) -> always (eventually (id2 <= num2value#)) )
always (id1 <= num1value# or id2 == id3)
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 >= num3valuea# and id3 <= num3valueb#) until (id4 == num4value#) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# and id4 >= num4value# )
eventually (rise (id1 <= num1value#))
always [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1value# -> id2 == id3 or (id4 >= num2valuea# and id4 <= num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 <= num1value# or fall (id2 == num2value#) -> always [0:num3temporal#] (id3 == id4) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always ( not fall (id1 > num1value#) and id2 <= num2value# -> always (eventually (id3 < num3value#)) )
always ( id1 > num1value# or rise (id2 > num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually (id1 == num1value#)
always ( id1 <= num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( fall (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always [0:num2temporal#] (id1 > num1value# or not (id2 == id3))
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually [0:num3temporal#] (id1 <= num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num3temporal#] (id1 < num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> not fall (eventually [0:num3temporal#] (id2 >= num2value#)) )
always ( id1 < num1value# -> id2 > num2value# )
always ( id1 == id2 or rise (id3 < num1value#) -> always (not (id4 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (historically (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) or not (id2 <= num2value#) -> eventually (not fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 <= num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == id4)) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 <= num1value#) and id2 > num2value# -> always [0:num3temporal#] (not (id3 == id4)) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> not (id2 == id3) or rise (id4 == num2value#) )
always ( id1 > num1value# and id2 == id3 -> historically [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( once [0:num1temporal#] (id1 == id2) -> not ((id3 > num2valuea# and id3 <= num2valueb#) until [0:num4temporal#] (id4 < num3value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( once [0:num2temporal#] (id1 <= num1value#) -> always [num4temporala#:num4temporalb#] (eventually (rise (id2 == num3value#))) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually (rise (id2 == id3))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> historically [num3temporala#:num3temporalb#] (id2 < num2value#) )
eventually [0:num3temporal#] (id1 <= num1value# or not (id2 > num2value#))
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually [0:num1temporal#] (not (id1 == id2) and id3 == id4)
always ( id1 >= num1value# or rise (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id3 > num3value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> id4 == num2value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> id2 > num2value# )
always (id1 >= num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( once [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
always ( fall (id1 == id2) -> not ((id3 == id4) until [0:num2temporal#] (not (id5 > num1valuea# and id5 < num1valueb#))) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 == num3value# )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( fall ((id1 > num1value#) since [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) -> eventually [0:num5temporal#] (always [0:num6temporal#] (not fall (id3 >= num4valuea# and id3 <= num4valueb#))) )
always ( id1 == id2 and id3 == id4 -> eventually [0:num2temporal#] (always (id5 > num1value#)) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 < num2valueb#) -> id3 == id4 )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> always [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 > num1value# and rise (id2 >= num2value#) -> historically [num3temporala#:num3temporalb#] (id3 == id4) )
eventually (id1 == id2 and id3 == num1value#)
eventually [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#))
eventually (id1 == id2 and id3 == id4)
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 > num1value# -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always (id1 == id2 and id3 == num1value#)
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (not fall (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 >= num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == id2) -> rise (always (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( id1 <= num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> (not (id3 <= num3value#)) until (id4 <= num4value#) )
always ( id1 >= num1value# and id2 < num2value# -> fall (id3 == id4) )
always ( fall (id1 == id2) -> id3 == id4 and rise (id5 > num1valuea# and id5 < num1valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> rise (always (id4 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (rise (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always ( id1 <= num1value# or id2 <= num2value# -> id3 <= num3value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2value#) since [num4temporala#:num4temporalb#] (rise (id3 < num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( (not fall (id1 > num1valuea# and id1 < num1valueb#)) until [0:num3temporal#] (not (id2 >= num2value#)) -> not (always [0:num4temporal#] (id3 == id4)) )
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1value# -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (not (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually [0:num3temporal#] (id1 > num1value# or id2 > num2value#)
always (not (id1 == id2) and not (id3 >= num1value#))
always ( id1 <= num1value# and id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id4 < num2value#))) )
always ( id1 == num1value# -> always [0:num3temporal#] (id2 < num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (rise (id3 > num1value#)) -> (not (id4 == id5)) until [num4temporala#:num4temporalb#] (id6 >= num3valuea# and id6 <= num3valueb#) )
always (not (id1 <= num1value#))
eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#))
always ( id1 == id2 or fall (id3 == num1value#) -> id4 < num2value# )
eventually (id1 == num1value# and rise (id2 > num2value#))
always ( rise (id1 == id2) -> id3 > num1value# )
always ( id1 < num1value# or fall (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == num1value#) or id2 > num2value# -> id3 > num3value# )
always (id1 == num1value#)
always ( not (id1 <= num1value#) and id2 == num2value# -> eventually (always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num3temporal#] (not (id1 > num1value#) and id2 == num2value#)
always [num1temporala#:num1temporalb#] (id1 == id2 or id3 == id4)
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (id3 == id4) )
always ( rise (id1 == num1value#) -> eventually (always (id2 == num2value#)) )
eventually [0:num2temporal#] (not (id1 == num1value#))
always ( id1 == num1value# -> id2 == id3 )
always ( id1 <= num1value# and rise (id2 > num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 == num2value#)
always ( id1 < num1value# and id2 == num2value# -> not (eventually [num4temporala#:num4temporalb#] (rise (id3 < num3value#))) )
eventually (id1 > num1valuea# and id1 <= num1valueb#)
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) -> id2 == num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> not rise (eventually (id2 == id3)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (fall (id2 == num2value#))) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#)) -> not (eventually [0:num4temporal#] (not (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not rise (once [num3temporala#:num3temporalb#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 > num2value#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( not rise ((id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (not fall (id2 >= num2value#))) -> always [0:num5temporal#] (eventually [num6temporala#:num6temporalb#] (not (id3 == num4value#))) )
always ( once [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id3 >= num2valuea# and id3 < num2valueb#))) )
always ( once (rise (id1 <= num1value#)) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( always [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always (not (id3 == id4))) )
eventually [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( rise (id1 <= num1value#) or id2 < num2value# -> rise (id3 > num3value#) or not (id4 > num4valuea# and id4 <= num4valueb#) )
always ( not fall (id1 == num1value#) and id2 == id3 -> rise (id4 >= num2value#) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#) -> not (id3 >= num3value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> not ((id2 == id3) until (rise (id4 > num2valuea# and id4 < num2valueb#))) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (not (id2 > num3value#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 == num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num2temporal#] (eventually (id2 == id3)) )
always ( id1 == id2 -> id3 == num1value# and (id4 > num2valuea# and id4 < num2valueb#) )
eventually (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#))
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> (id2 > num2value#) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 < num2value#) since [num4temporala#:num4temporalb#] (fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# or id3 >= num3value# )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( once (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until (not (id3 == id4)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# -> always (eventually [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) )
always ( id1 < num1value# or id2 == num2value# -> id3 <= num3value# and id4 == id5 )
always [0:num3temporal#] (not (id1 == num1value#) or id2 < num2value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [0:num1temporal#] (id1 == id2 or not (id3 == id4))
always ( id1 < num1value# or rise (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 == num1value# -> id2 == num2value# )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( once [0:num2temporal#] (id1 < num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always [0:num2temporal#] (not (id1 == id2) and id3 < num1value#)
eventually [num2temporala#:num2temporalb#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == id2) -> id3 == num1value# )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( id1 == num1value# -> id2 >= num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (rise (id2 == num2value#)) -> eventually [0:num5temporal#] (rise (id3 >= num4value#)) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always (id1 == num1value# or id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# -> id2 <= num2value# )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num3temporal#] (id1 <= num1value# and not (id2 <= num2value#))
always ( fall (id1 == id2) -> not fall (id3 == num1value#) or rise (id4 <= num2value#) )
always ( rise (id1 == num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> once [num4temporala#:num4temporalb#] (rise (id3 < num3value#)) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( id1 <= num1value# and rise (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> (id2 == id3) since [0:num3temporal#] (id4 > num2value#) )
always [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# -> always [num2temporala#:num2temporalb#] (eventually (rise (id2 == id3))) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( rise (id1 == id2) -> not rise (id3 == id4) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (not (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 and rise (id4 > num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> not (always (id3 <= num3value#)) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 >= num2value# )
always ( id1 >= num1value# and id2 == num2value# -> always (eventually (rise (id3 < num3value#))) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( fall (id1 == num1value#) -> id2 <= num2value# and not (id3 == num3value#) )
always ( id1 == num1value# and id2 == id3 -> id4 == id5 )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (not rise (id3 > num3value#)) )
eventually [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always [0:num2temporal#] (id1 >= num1value# or id2 == id3)
always ( rise (id1 > num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( id1 <= num1value# or id2 == id3 -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id4 == id5))) )
always ( id1 == id2 and not (id3 <= num1value#) -> id4 == id5 )
always ( rise (id1 == id2) -> id3 >= num1value# and fall (id4 == num2value#) )
always ( rise (id1 < num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> (id2 > num3valuea# and id2 < num3valueb#) until (id3 == num4value#) )
always ( id1 == num1value# -> (id2 == num2value#) until [0:num4temporal#] (id3 < num3value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (not (id1 <= num1value#) and id2 < num2value#)
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) or id2 == id3 -> id4 > num2value# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually (rise (id1 >= num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( once (id1 == id2) -> (id3 >= num1value#) until [0:num3temporal#] (id4 < num2value#) )
always ( once (id1 == id2) -> always [0:num2temporal#] (eventually (id3 >= num1value#)) )
always ( not (id1 < num1value#) or fall (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 <= num1value#) -> not (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> rise (eventually [0:num2temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1value#) and id2 == id3 -> (id4 > num2value#) since [0:num4temporal#] (fall (id5 > num3valuea# and id5 < num3valueb#)) )
always ( rise (id1 == id2) -> rise (id3 > num1value#) )
always [0:num3temporal#] (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 < num1value#) -> rise (id2 > num2value#) )
always ( rise (id1 < num1value#) -> (id2 <= num2value#) until (id3 >= num3value#) )
always ( id1 == num1value# and id2 > num2value# -> eventually (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( once [0:num1temporal#] (rise (id1 == id2)) -> always [0:num3temporal#] (id3 > num2valuea# and id3 < num2valueb#) )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> always [num4temporala#:num4temporalb#] (id2 <= num3value#) )
always ( rise (id1 <= num1value#) -> (id2 >= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 >= num3valuea# and id2 <= num3valueb#) until (id3 == id4)) )
always ( not fall (id1 == num1value#) or id2 == id3 -> eventually (fall (id4 == id5)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise (eventually [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> not (once [0:num2temporal#] (fall (id2 == id3))) )
always ( not (id1 > num1value#) or id2 == id3 -> id4 <= num2value# )
always ( id1 == num1value# -> eventually (always (id2 == id3)) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( fall (id1 == num1value#) and rise (id2 == num2value#) -> always [0:num4temporal#] (not (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 > num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 <= num1value#) -> not (eventually [0:num3temporal#] (id2 >= num2value#)) )
eventually [0:num2temporal#] (rise (id1 >= num1value#) and not (id2 == id3))
always ( id1 > num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( rise (id1 == num1value#) -> id2 == num2value# and rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 -> always (eventually [0:num2temporal#] (rise (id3 >= num1value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always [0:num2temporal#] (id1 >= num1value# and not (id2 == id3))
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> always [0:num4temporal#] (eventually (id3 == num3value#)) )
always (id1 == id2)
always ( rise (id1 <= num1value#) -> eventually (id2 > num2valuea# and id2 <= num2valueb#) )
always ( id1 < num1value# or id2 < num2value# -> id3 >= num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 < num2value#) )
eventually (not (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 < num2value#))
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually (rise (id2 < num2value#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# and id2 >= num2value# -> id3 < num3value# )
always ( fall (id1 == num1value#) or id2 == id3 -> (id4 == id5) until [0:num3temporal#] (id6 >= num2value#) )
always (not (id1 >= num1value#) and (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> rise ((id2 <= num2value#) until [0:num4temporal#] (not fall (id3 >= num3value#))) )
eventually [0:num2temporal#] (not rise (id1 == num1value#))
always ( fall ((id1 == id2) until (id3 < num1value#)) -> eventually [0:num3temporal#] (id4 <= num2value#) )
eventually [num3temporala#:num3temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( fall (id1 == id2) -> (not (id3 >= num1valuea# and id3 <= num1valueb#)) until (id4 == id5) )
always (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
eventually (not fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( rise (id1 >= num1value#) -> rise (id2 > num2value#) )
always ( id1 <= num1value# -> (not fall (id2 >= num2value#)) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 <= num2value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( id1 >= num1value# -> (id2 > num2valuea# and id2 <= num2valueb#) since (rise (id3 > num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 > num1value#) -> id2 == id3 and rise (id4 == num2value#) )
always ( not fall (id1 >= num1value#) and id2 >= num2value# -> eventually [0:num4temporal#] (rise (id3 > num3value#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2value#)) -> historically (id3 >= num4value#) )
always ( id1 == num1value# -> (id2 >= num2value#) since [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (fall (id2 == id3)) )
always ( id1 <= num1value# -> id2 == id3 )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( id1 >= num1value# -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 > num1value#) and rise (id2 > num2value#) -> fall (always [num4temporala#:num4temporalb#] (id3 < num3value#)) )
eventually [num3temporala#:num3temporalb#] (not fall (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 > num1value# -> id2 < num2value# or not (id3 == id4) )
always [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
eventually (id1 == num1value# and not (id2 == num2value#))
always ( rise (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( (id1 == id2) since [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) -> not (once [0:num4temporal#] (rise (id4 >= num3valuea# and id4 <= num3valueb#))) )
always ( rise (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> not ((id3 >= num3value#) until [num5temporala#:num5temporalb#] (id4 >= num4value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( once [num2temporala#:num2temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#)) -> not (eventually [0:num3temporal#] (id2 == id3)) )
always ( historically (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 < num3value#))) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 == num1value#))) )
always [0:num2temporal#] (id1 < num1value#)
always ( not fall (id1 == num1value#) -> rise ((id2 == id3) since [num3temporala#:num3temporalb#] (id4 <= num2value#)) )
always ( rise (id1 > num1value#) -> rise (id2 < num2value#) and id3 < num3value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (not rise (id1 == id2) or id3 == num1value#)
always ( id1 > num1valuea# and id1 <= num1valueb# -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (not rise (id3 > num3value#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( id1 == num1value# and not (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not rise (id1 == num1value#) and id2 <= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1value#) -> historically [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 == id5 and (id6 > num2valuea# and id6 < num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 < num1value# or not (id2 == num2value#))
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# or fall (id2 == num2value#) -> fall (eventually (rise (id3 > num3value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
eventually (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3value#)) )
always ( eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 == num2value#)) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# or rise (id3 <= num3value#) )
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 <= num1value# and rise (id2 == num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) and rise (id4 < num4value#) )
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually (rise (id1 == num1value#))
always ( not rise (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#) -> (id4 < num2value#) until (id5 == num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 <= num1value#) -> (id2 == id3) until (id4 == num2value#) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
eventually [0:num2temporal#] (id1 == num1value# or id2 == id3)
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( id1 == num1value# and id2 < num2value# -> always [0:num4temporal#] (id3 == num3value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 <= num1value# and id2 == num2value# -> id3 == id4 )
always [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> once (id2 == id3) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always [0:num2temporal#] (not (id1 == id2) or id3 == num1value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# or (id2 > num2valuea# and id2 <= num2valueb#) -> (not (id3 >= num3value#)) until (id4 == num4value#) )
always ( rise (id1 > num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always (not rise (id1 == id2) or id3 > num1value#)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( id1 == id2 or rise (id3 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 <= num2value#)) )
always ( id1 >= num1value# and id2 < num2value# -> id3 == id4 and (id5 >= num3valuea# and id5 <= num3valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (rise (id3 <= num1value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (id2 >= num2value#) -> not (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always ( fall (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) and not (id4 >= num2valuea# and id4 < num2valueb#) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> not ((not (id3 > num2valuea# and id3 < num2valueb#)) until [num4temporala#:num4temporalb#] (id4 >= num3valuea# and id4 <= num3valueb#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (id2 < num3value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> not (id3 < num3value#) )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
always ( fall (id1 == id2) -> id3 <= num1value# )
always [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( id1 == id2 -> always (eventually [0:num2temporal#] (fall (id3 == num1value#))) )
always ( not (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == id3) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
eventually (id1 == id2)
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> (not fall (id2 == num3value#)) until [num5temporala#:num5temporalb#] (id3 < num4value#) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( once [0:num2temporal#] (not (id1 >= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#) -> eventually (always [0:num4temporal#] (not (id3 <= num3value#))) )
always ( rise (id1 > num1value#) and id2 <= num2value# -> (id3 >= num3value#) until [num5temporala#:num5temporalb#] (rise (id4 == num4value#)) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 >= num1value#))
always ( fall (id1 == id2) -> once [0:num2temporal#] (not (id3 == num1value#)) )
always ( not fall (id1 >= num1value#) or id2 > num2value# -> eventually [0:num4temporal#] (not (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( id1 == id2 and (id3 > num1valuea# and id3 <= num1valueb#) -> id4 > num2value# )
always ( (id1 > num1value#) since [0:num3temporal#] (id2 < num2value#) -> always (eventually (fall (id3 == num4value#))) )
eventually [0:num3temporal#] (not fall (id1 == num1value#) and id2 > num2value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always (eventually (rise (id2 < num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (fall (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( historically (id1 > num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
eventually (id1 <= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == id3))
always [num3temporala#:num3temporalb#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2value#))) )
always ( id1 <= num1value# and id2 >= num2value# -> id3 > num3value# )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
eventually (id1 == num1value#)
always ( (id1 >= num1value#) since (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 > num1value#) or id2 == id3 -> not rise (id4 == id5) or id6 <= num2value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 <= num1value#) -> not fall (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( not ((id1 > num1value#) since (id2 < num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
always ( id1 == num1value# -> not (id2 <= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> id3 <= num1value# and id4 <= num2value# )
always ( rise (id1 >= num1value#) and id2 == num2value# -> not (id3 >= num3valuea# and id3 <= num3valueb#) and (id4 > num4valuea# and id4 <= num4valueb#) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
always ( id1 == id2 -> id3 >= num1value# or not (id4 < num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> once (not (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( once [num2temporala#:num2temporalb#] (rise (id1 < num1value#)) -> not (always [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> not fall (id2 == num2value#) or rise (id3 >= num3value#) )
always ( fall (id1 == num1value#) -> not (historically [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
eventually (id1 == num1value# and rise (id2 < num2value#))
always ( rise (id1 > num1value#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) since [0:num4temporal#] (id3 > num3value#) )
always [0:num2temporal#] (not rise (id1 > num1value#))
always ( not rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) or id3 == id4 )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 > num2value#))
always ( historically (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (not (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not rise ((id2 < num2value#) until (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (fall (id2 == id3))) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1value#) -> always (id2 > num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> (id2 > num3valuea# and id2 < num3valueb#) since [0:num5temporal#] (id3 <= num4value#) )
always ( id1 >= num1value# and fall (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [0:num3temporal#] (not (id1 <= num1value#) and id2 > num2value#)
always ( id1 == id2 -> historically [num1temporala#:num1temporalb#] (id3 == id4) )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 > num2value#)
always (not rise (id1 == id2) or id3 == num1value#)
always (id1 > num1value# and not (id2 < num2value#))
always (id1 <= num1value#)
always ( id1 < num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 <= num2value# )
always (id1 < num1value# and id2 == id3)
always ( rise (id1 >= num1value#) or rise (id2 >= num2value#) -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 == num3value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( not (once [num2temporala#:num2temporalb#] (not (id1 < num1value#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 >= num3valuea# and id2 <= num3valueb#))) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> not (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
eventually [num3temporala#:num3temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not fall (historically [0:num2temporal#] (id1 > num1value#)) -> (not (id2 == num3value#)) until [0:num5temporal#] (not (id3 < num4value#)) )
always ( once (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> eventually (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 <= num2value#)) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (eventually [0:num5temporal#] (id3 == num4value#)) )
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 >= num1value#) and id2 <= num2value# -> eventually (id3 > num3value#) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 == num1value#) or id2 > num2value# -> id3 < num3value# or id4 == id5 )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( historically [0:num1temporal#] (id1 == id2) -> (id3 == num2value#) until (fall (id4 == num3value#)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (id2 > num3valuea# and id2 <= num3valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> not fall (id3 == id4) )
always ( not (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> not (id2 <= num2value#) and id3 < num3value# )
always [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))
always ( (id1 >= num1valuea# and id1 < num1valueb#) and not fall (id2 > num2valuea# and id2 < num2valueb#) -> not (id3 < num3value#) and id4 == id5 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( id1 == id2 -> fall (id3 == num1value#) or id4 > num2value# )
always ( rise (id1 == id2) -> (id3 > num1value#) until (fall (id4 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (id2 < num2value#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 <= num1value#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( id1 == num1value# and id2 == id3 -> (id4 < num2value#) until [num4temporala#:num4temporalb#] (id5 >= num3value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 == num1value#) -> rise (id2 < num2value#) and id3 <= num3value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 and id3 <= num1value# -> fall (once [num3temporala#:num3temporalb#] (rise (id4 > num2valuea# and id4 < num2valueb#))) )
eventually (id1 == id2 or not rise (id3 == id4))
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == id3))) )
always ( rise (id1 == id2) -> not fall (id3 > num1value#) )
always [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always ( id1 < num1value# -> eventually [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> not (once [0:num4temporal#] (not (id3 > num3value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( (id1 == id2) until [0:num2temporal#] (id3 == num1value#) -> once [0:num4temporal#] (id4 <= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) or id3 > num3value# )
always (id1 > num1value# or not rise (id2 == id3))
eventually (rise (id1 == id2))
always ( id1 == id2 and not fall (id3 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually (rise (id4 == id5))) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( id1 == num1value# and id2 <= num2value# -> eventually [0:num4temporal#] (always (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) -> (id2 == id3) since [0:num3temporal#] (id4 <= num2value#) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 > num2value#)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) or id3 > num3value# )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always (id1 == num1value# or id2 >= num2value#)
always ( id1 <= num1value# -> eventually (id2 < num2value#) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2value#)) )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
eventually (not (id1 == num1value#) or not rise (id2 == id3))
always ( rise (id1 < num1value#) -> (id2 == num2value#) until (id3 <= num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( eventually [0:num2temporal#] (not (id1 < num1value#)) -> (id2 <= num3value#) until [0:num5temporal#] (id3 > num4valuea# and id3 < num4valueb#) )
always ( rise (id1 == id2) -> id3 == num1value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
eventually (id1 < num1value# or id2 <= num2value#)
always ( id1 > num1value# -> id2 == num2value# )
always ( fall (id1 == id2) -> fall (eventually (id3 >= num1value#)) )
always ( rise (id1 == num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1value#) -> (not fall (id2 > num2valuea# and id2 < num2valueb#)) until [0:num4temporal#] (rise (id3 < num3value#)) )
always [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( not (id1 < num1value#) and id2 > num2value# -> always (not (id3 == num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3) -> always (eventually (rise (id4 > num2value#))) )
eventually (not (id1 >= num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> not fall (id2 == num2value#) )
always [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
eventually [0:num2temporal#] (id1 >= num1value#)
always (id1 > num1value#)
always ( id1 == num1value# and id2 < num2value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id3 == id4))) )
always ( fall (id1 == id2) -> always (eventually (rise (id3 <= num1value#))) )
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (rise (id2 == num2value#)) )
eventually (id1 < num1value# and id2 == num2value#)
always ( not (historically [0:num1temporal#] (id1 == id2)) -> historically [0:num3temporal#] (id3 == num2value#) )
eventually [0:num2temporal#] (id1 > num1value#)
eventually [0:num2temporal#] (rise (id1 == num1value#))
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 -> not fall (id3 == id4) )
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually (not (id1 >= num1value#))
always ( id1 == id2 and id3 >= num1value# -> not (eventually (id4 == num2value#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> always (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 < num1value#) -> not rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num3value#) until [num5temporala#:num5temporalb#] (id3 < num4value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (not fall (id2 > num2value#)) )
always ( id1 >= num1value# -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> not (once (fall (id2 == num3value#))) )
always ( not (id1 == id2) -> eventually (always [0:num2temporal#] (id3 >= num1value#)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 == id3)) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) or not (id2 == num2value#) -> eventually (always [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( rise (id1 > num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( (not (id1 == num1value#)) since [num3temporala#:num3temporalb#] (not (id2 <= num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 <= num4value#)) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> eventually [0:num4temporal#] (id3 > num3value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 > num1value# and id2 <= num2value# -> id3 > num3value# )
always ( not rise (id1 == id2) or id3 == id4 -> always (eventually [0:num1temporal#] (rise (id5 == id6))) )
always ( not ((id1 <= num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#)) -> fall (always (id3 == num4value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1value#) -> (id2 >= num3value#) until (id3 < num4value#) )
always ( id1 == id2 or not (id3 == id4) -> not fall (historically [num2temporala#:num2temporalb#] (id5 < num1value#)) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually (not (id1 < num1value#) and id2 == num2value#)
eventually (id1 == num1value#)
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
eventually (id1 == num1value#)
eventually (not fall (id1 >= num1value#) or id2 == num2value#)
always ( historically [0:num1temporal#] (not fall (id1 == id2)) -> always [0:num3temporal#] (id3 >= num2valuea# and id3 <= num2valueb#) )
always ( not (id1 > num1value#) and id2 == id3 -> id4 < num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( eventually [num2temporala#:num2temporalb#] (not (id1 < num1value#)) -> historically [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) until (id4 >= num2value#) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) or fall (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# or rise (id4 < num4value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (fall (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 > num2value#) and rise (id3 >= num3value#) )
always ( rise (id1 > num1value#) -> rise (id2 < num2value#) )
eventually [0:num2temporal#] (rise (id1 < num1value#) and id2 == id3)
eventually [0:num2temporal#] (id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( once [num2temporala#:num2temporalb#] (rise (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( id1 == num1value# or id2 == id3 -> id4 == num2value# and id5 == num3value# )
eventually (id1 == num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == num1value# and not (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (not (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 > num1value# -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [0:num3temporal#] (not rise (id3 == id4)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
always ( id1 <= num1value# -> historically [0:num3temporal#] (id2 >= num2valuea# and id2 < num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually (always [0:num4temporal#] (id2 == num3value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( not (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> historically [num4temporala#:num4temporalb#] (id2 >= num3value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until [0:num3temporal#] (id2 >= num2value#) -> (id3 >= num4value#) until [0:num6temporal#] (rise (id4 >= num5value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> rise (id3 > num3value#) and not (id4 > num4value#) )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( id1 == id2 or not (id3 >= num1valuea# and id3 <= num1valueb#) -> (not rise (id4 == id5)) until (id6 == num2value#) )
eventually (id1 == num1value# and id2 <= num2value#)
always ( id1 < num1value# -> eventually [0:num3temporal#] (not fall (id2 == num2value#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# -> (id2 == num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( historically (not fall (id1 == num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always [0:num2temporal#] (id1 == id2 and not (id3 > num1valuea# and id3 <= num1valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 == num2value#) -> not (always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 <= num1value# -> eventually (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( once [0:num2temporal#] (id1 > num1value#) -> not fall ((id2 >= num3valuea# and id2 <= num3valueb#) since (not (id3 == id4))) )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (fall (id2 == num2value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> rise (id3 == id4) )
always ( rise (id1 == num1value#) or rise (id2 <= num2value#) -> eventually [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 == id2) -> not ((not fall (id3 == num1value#)) until [0:num3temporal#] (id4 == num2value#)) )
always ( rise (id1 == num1value#) -> (id2 > num2value#) until [0:num3temporal#] (id3 == id4) )
always ( not (id1 <= num1value#) or id2 <= num2value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( fall (id1 == id2) -> id3 < num1value# or id4 < num2value# )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 < num2value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and not (id2 >= num2valuea# and id2 < num2valueb#))
always [0:num3temporal#] (not (id1 >= num1value#) or id2 >= num2value#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> id2 < num2value# or id3 <= num3value# )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( not (id1 == id2) -> id3 <= num1value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 < num1value# or rise (id2 < num2value#) -> id3 >= num3value# or rise (id4 <= num4value#) )
always [0:num2temporal#] (id1 > num1value#)
eventually [0:num1temporal#] (id1 == id2)
always (id1 > num1value# and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# and id3 == id4 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num3temporal#] (not rise (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 == id2) -> once [0:num2temporal#] (rise (id3 >= num1valuea# and id3 < num1valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 >= num3value#) or (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not (once (fall (id1 == num1value#))) -> (not fall (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 >= num1value# and id2 == num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 >= num1value# or not fall (id2 == num2value#) -> historically [num3temporala#:num3temporalb#] (id3 == id4) )
always ( fall (id1 == num1value#) -> always (eventually [num2temporala#:num2temporalb#] (rise (id2 == id3))) )
always (id1 < num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 < num2value# -> id3 == num3value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 >= num2valuea# and id2 <= num2valueb#) until (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( id1 == num1value# and id2 < num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) and (id4 >= num4valuea# and id4 <= num4valueb#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 == num2value#))
always ( rise (id1 == id2) -> not (eventually (id3 > num1value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (once (id1 == id2)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (not rise (id3 == num1value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 > num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> id3 == num3value# or id4 > num4value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
eventually (id1 <= num1value#)
always (id1 >= num1value# and id2 <= num2value#)
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( fall (historically [0:num2temporal#] (not (id1 < num1value#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 < num3valueb#)) )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( not (historically [num1temporala#:num1temporalb#] (id1 == id2)) -> always [num3temporala#:num3temporalb#] (id3 > num2value#) )
always ( not (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# and rise (id4 < num4value#) )
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
always ( rise (id1 == id2) -> id3 == num1value# and id4 >= num2value# )
always ( not ((id1 == id2) since (id3 == num1value#)) -> eventually [0:num2temporal#] (not rise (id4 == id5)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) or not (id2 <= num2value#) -> always (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (once [0:num3temporal#] (id2 == num2value#)) )
eventually (not rise (id1 == id2))
always ( id1 > num1value# -> not (always (id2 == id3)) )
always ( (id1 == id2) since [num1temporala#:num1temporalb#] (id3 == id4) -> not ((id5 >= num2value#) until (rise (id6 <= num3value#))) )
always ( id1 == id2 or not (id3 > num1value#) -> id4 == num2value# )
always ( id1 == id2 -> eventually (always [num2temporala#:num2temporalb#] (not rise (id3 > num1value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) )
eventually [0:num1temporal#] (id1 == id2)
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( id1 == id2 -> not rise ((not (id3 == num1value#)) until [num2temporala#:num2temporalb#] (rise (id4 == id5))) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( id1 >= num1value# -> always (eventually (rise (id2 <= num2value#))) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) or id2 > num2value#)
always ( id1 >= num1value# or rise (id2 < num2value#) -> eventually [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 <= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 >= num1value# or not (id2 == id3))
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == num2value#) )
always ( id1 > num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( not fall (id1 == num1value#) -> (not (id2 == num2value#)) until [0:num4temporal#] (id3 >= num3value#) )
always ( eventually [0:num2temporal#] (not (id1 <= num1value#)) -> (id2 == num3value#) until (rise (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( rise (id1 <= num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( once [num2temporala#:num2temporalb#] (id1 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3value#))) )
eventually [0:num3temporal#] (rise (id1 > num1value#) or id2 > num2value#)
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( once [0:num2temporal#] (rise (id1 >= num1valuea# and id1 < num1valueb#)) -> always (id2 == id3) )
always ( rise (id1 < num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> always [num5temporala#:num5temporalb#] (eventually [num6temporala#:num6temporalb#] (id3 == num4value#)) )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (fall (id3 == id4)) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) or not (id2 == id3))
always ( once [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (not (id2 == num3value#)) )
always ( rise (id1 == id2) -> not (id3 == num1value#) or id4 == num2value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 == num1value#) -> eventually (fall (id2 == id3)) )
always ( id1 > num1value# -> id2 == num2value# )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> always [0:num4temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> not (once [0:num3temporal#] (id2 > num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( not (always [0:num1temporal#] (id1 == id2)) -> always [num3temporala#:num3temporalb#] (eventually (id3 == num2value#)) )
always ( not rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) until (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (fall (id3 == num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (fall (id2 == num2value#)) -> always [num5temporala#:num5temporalb#] (eventually [num6temporala#:num6temporalb#] (rise (id3 == num4value#))) )
always ( (not (id1 == id2)) since [0:num2temporal#] (id3 == num1value#) -> not ((id4 < num3value#) until (rise (id5 >= num4valuea# and id5 <= num4valueb#))) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 == num2value#))) )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
eventually [0:num3temporal#] (fall (id1 == num1value#) and not (id2 <= num2value#))
always ( id1 > num1valuea# and id1 < num1valueb# -> once [0:num3temporal#] (not (id2 <= num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))
always ( rise (id1 >= num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 > num2value#) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( id1 == num1value# -> not rise (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 >= num3value#) since [0:num5temporal#] (id4 == num4value#) )
eventually [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 > num1value# -> id2 == id3 and id4 > num2value# )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
eventually [0:num3temporal#] (id1 <= num1value# and fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( historically (not rise (id1 > num1valuea# and id1 < num1valueb#)) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 == id2) -> (id3 == num1value#) until (id4 == num2value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 >= num2value# )
always ( id1 >= num1value# -> always (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == id2 -> not (always [0:num1temporal#] (id3 == id4)) )
always ( id1 == id2 and rise (id3 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 > num2valuea# and id4 < num2valueb#))) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> not ((id2 >= num3valuea# and id2 <= num3valueb#) until [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> id2 < num2value# and fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 < num1value# and fall (id2 == num2value#) -> always [0:num4temporal#] (eventually (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( id1 >= num1value# -> always [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 == num1value#) -> always (id2 > num2valuea# and id2 <= num2valueb#) )
eventually [0:num3temporal#] (id1 < num1value# or id2 >= num2value#)
always [num3temporala#:num3temporalb#] (not fall (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( always [0:num2temporal#] (id1 == num1value#) -> not (once (rise (id2 > num3value#))) )
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) )
always [num3temporala#:num3temporalb#] (not fall (id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2value#))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> eventually (always [num4temporala#:num4temporalb#] (id2 >= num3value#)) )
always [0:num3temporal#] (not (id1 < num1value#) and id2 > num2value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
always ( rise (id1 < num1value#) -> not (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# or id3 == num3value# )
always ( rise (id1 > num1value#) -> id2 >= num2value# or rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 or not (id3 == num1value#) -> not (id4 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( fall (id1 == num1value#) -> not (eventually [0:num3temporal#] (not (id2 <= num2value#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( rise (id1 > num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 < num1value#) -> once [0:num3temporal#] (id2 < num2value#) )
always ( id1 >= num1value# and id2 >= num2value# -> once [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == id2) -> always (id3 == id4) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (not (id3 == num1value#))) )
always ( rise (id1 == num1value#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
always [0:num2temporal#] (id1 > num1value#)
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( id1 == id2 -> rise (id3 <= num1value#) )
eventually [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 == id2) -> not (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (always (id2 > num2valuea# and id2 <= num2valueb#)) )
always [0:num3temporal#] (not (id1 > num1value#) or id2 == num2value#)
always ( once [0:num2temporal#] (id1 <= num1value#) -> (id2 < num3value#) until [0:num5temporal#] (rise (id3 >= num4value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( id1 == id2 -> always [0:num1temporal#] (id3 == id4) )
always [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 < num2value#) -> not ((not fall (id3 == num3value#)) until (fall (id4 == num4value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and id4 == id5 )
always [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( eventually [0:num2temporal#] (rise (id1 < num1value#)) -> (id2 <= num3value#) until (id3 == id4) )
always ( id1 == num1value# and id2 == id3 -> eventually (always (id4 == num2value#)) )
always ( once (not rise (id1 == id2)) -> (not (id3 == id4)) until (fall (id5 > num1valuea# and id5 < num1valueb#)) )
always ( rise (id1 > num1value#) -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
eventually (id1 == num1value# and id2 <= num2value#)
always [0:num2temporal#] (not fall (id1 >= num1value#))
always ( id1 < num1value# or rise (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( not (id1 <= num1value#) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 > num3value#) )
always ( id1 == num1value# -> id2 == num2value# )
always ( id1 <= num1value# and id2 == num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( once [num2temporala#:num2temporalb#] (id1 <= num1value#) -> always (eventually [0:num4temporal#] (rise (id2 >= num3value#))) )
always ( not fall (historically [0:num1temporal#] (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id3 > num2value#))) )
always ( rise ((id1 > num1value#) since [0:num2temporal#] (id2 == id3)) -> always [0:num4temporal#] (id4 > num3valuea# and id4 < num3valueb#) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> fall ((id2 <= num2value#) since [0:num3temporal#] (id3 == id4)) )
eventually (fall (id1 >= num1valuea# and id1 < num1valueb#))
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) since (id3 > num3value#) )
always ( rise (id1 == id2) -> not (eventually [0:num2temporal#] (id3 == num1value#)) )
always ( fall (id1 == id2) -> not (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( fall (id1 == num1value#) -> not (id2 > num2value#) )
always ( (not fall (id1 > num1value#)) since (id2 == id3) -> once (id4 >= num2value#) )
always ( fall (historically (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( id1 == num1value# and not (id2 > num2value#) -> fall (id3 == id4) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> once [0:num3temporal#] (rise (id2 < num2value#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( not (id1 > num1value#) and id2 > num2value# -> not (id3 > num3value#) )
always ( not (id1 == num1value#) and rise (id2 == num2value#) -> not ((id3 == num3value#) until (rise (id4 <= num4value#))) )
always (not (id1 == id2) or id3 == num1value#)
always ( id1 == num1value# -> fall ((id2 == id3) until [0:num3temporal#] (rise (id4 > num2value#))) )
always ( id1 >= num1value# and id2 >= num2value# -> not (eventually [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) or id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always [0:num2temporal#] (not (id1 < num1value#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 == num1value#) and id2 <= num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 > num1value#) )
always ( id1 > num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id2 == id3))) )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 < num3value#))) )
always ( fall (id1 == num1value#) -> id2 > num2value# and rise (id3 == num3value#) )
always ( not rise (once (id1 >= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> fall (once [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
eventually (rise (id1 > num1value#))
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) or not fall (id3 >= num3value#) )
always ( rise (id1 <= num1value#) -> rise (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( (id1 > num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 < num4value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# and id3 > num3value# )
always ( rise (id1 >= num1value#) or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) since [0:num3temporal#] (id4 < num2value#) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 >= num1value#) -> rise (id2 >= num2value#) )
always ( id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> fall (once (rise (id3 == id4))) )
eventually [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> historically (id3 > num1value#) )
always ( id1 == id2 -> id3 == num1value# )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually (rise (id1 > num1value#) or fall (id2 == num2value#))
always ( (not fall (id1 == num1value#)) until [0:num3temporal#] (id2 <= num2value#) -> not ((id3 < num4value#) until (rise (id4 < num5value#))) )
always ( once [num1temporala#:num1temporalb#] (fall (id1 == id2)) -> always [num2temporala#:num2temporalb#] (eventually (fall (id3 == id4))) )
always ( id1 > num1value# or id2 < num2value# -> id3 > num3value# )
always ( fall (id1 == id2) -> not (eventually [0:num2temporal#] (id3 >= num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 == id2) -> historically [0:num2temporal#] (id3 < num1value#) )
eventually (id1 == num1value#)
always ( fall (id1 == id2) -> not (id3 == num1value#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 >= num1value#) -> not (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not fall (id1 == id2) and id3 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id4 > num2value#))) )
eventually [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( id1 == id2 -> always [0:num2temporal#] (id3 > num1value#) )
always ( id1 <= num1value# or rise (id2 >= num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( id1 == num1value# or id2 == num2value# -> rise (id3 == num3value#) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) and id4 == id5 )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> (id2 == id3) until (id4 == num2value#) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (not rise (id3 >= num3value#)) )
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( id1 == num1value# and not (id2 >= num2value#) -> id3 == num3value# )
always ( rise (id1 <= num1value#) -> not (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 == id2) since [0:num2temporal#] (rise (id3 == num1value#)) -> eventually [0:num3temporal#] (always (id4 == id5)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> (not (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( not ((id1 < num1value#) since (id2 == id3)) -> always [0:num3temporal#] (eventually (not (id4 <= num2value#))) )
always ( rise (id1 < num1value#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( id1 <= num1value# and id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually (rise (id3 < num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( once (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
eventually [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( not (id1 == num1value#) and id2 == num2value# -> (id3 == num3value#) until (id4 == id5) )
always ( rise (id1 == id2) -> not fall (id3 == num1value#) )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (always [num2temporala#:num2temporalb#] (id1 >= num1value#)) -> fall (always [0:num4temporal#] (not (id2 < num3value#))) )
always ( once (id1 <= num1value#) -> (id2 == id3) since (rise (id4 > num2value#)) )
always ( id1 < num1value# and id2 >= num2value# -> once [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( not fall (id1 == num1value#) or id2 <= num2value# -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# and not rise (id2 == id3))
always ( once [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (id3 > num2value#) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 > num1value#)
eventually (id1 == id2)
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not rise (id2 == id3) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id4 == num2value#))) )
always ( id1 < num1value# or rise (id2 > num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 == id2) -> not (id3 >= num1value#) )
always ( id1 == id2 and id3 == num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id4 == num2value#)) )
always ( id1 >= num1value# -> (not fall (id2 > num2valuea# and id2 < num2valueb#)) since [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> not (id2 <= num2value#) or id3 <= num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 > num2value#) )
always ( fall (id1 == num1value#) -> (id2 >= num2value#) until [num3temporala#:num3temporalb#] (not fall (id3 == id4)) )
always ( id1 == id2 -> not (eventually (id3 == num1value#)) )
always [0:num3temporal#] (not (id1 == num1value#) and id2 < num2value#)
always [0:num2temporal#] (id1 <= num1value#)
always (id1 == num1value#)
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 < num1value# or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 > num1value#) -> not (always (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( rise (id1 == num1value#) -> (id2 < num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 <= num1value#) -> rise ((not (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (not (id3 == id4))) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
eventually (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 == id2) -> id3 > num1value# and id4 > num2value# )
always ( not fall (always [0:num1temporal#] (not fall (id1 == id2))) -> eventually [0:num3temporal#] (id3 < num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (id2 > num2value#)) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num3temporal#] (rise (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> not fall (id3 == num1value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> rise (id3 > num3value#) )
always ( id1 < num1value# and rise (id2 == num2value#) -> not fall (eventually (id3 >= num3value#)) )
always ( fall (id1 == id2) -> not rise (id3 > num1value#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num3temporal#] (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> rise (historically (id3 > num1value#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( fall (id1 == id2) -> id3 == id4 )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( rise (id1 > num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (id1 >= num1value# or fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 <= num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (not fall (id1 == num1value#))
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 >= num1value# or id2 == id3)
always ( not (id1 > num1value#) and (id2 > num2valuea# and id2 <= num2valueb#) -> (id3 > num3valuea# and id3 < num3valueb#) until [num5temporala#:num5temporalb#] (rise (id4 > num4value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually (fall (id2 == num2value#))) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 < num2value#)
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 <= num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> not (eventually (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( historically (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (not (id2 < num2value#))) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always (id1 == id2 or id3 <= num1value#)
always ( rise (id1 == id2) -> (id3 > num1value#) until (id4 == num2value#) )
always (id1 == num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 < num2value#))
always ( rise (id1 == id2) -> historically [num1temporala#:num1temporalb#] (id3 == id4) )
always ( id1 == num1value# and not (id2 < num2value#) -> (id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (id4 <= num4value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 == id2) -> id3 == id4 )
always ( fall (id1 == num1value#) -> not ((id2 > num2valuea# and id2 < num2valueb#) until (id3 < num3value#)) )
always ( rise (id1 == num1value#) -> (id2 > num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1value#) -> rise (id2 <= num2value#) )
always ( id1 == id2 -> id3 >= num1value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 > num2valuea# and id2 < num2valueb#) or id3 == id4 )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not (once [0:num3temporal#] (id2 > num2value#)) )
always [0:num2temporal#] (not (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 == id2) -> fall (eventually [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( fall ((not (id1 >= num1valuea# and id1 <= num1valueb#)) since (rise (id2 > num2value#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id3 == num3value#))) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( once (rise (id1 <= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( fall ((id1 >= num1valuea# and id1 <= num1valueb#) since (rise (id2 <= num2value#))) -> (not fall (id3 == id4)) until [0:num3temporal#] (id5 == id6) )
always [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value# -> always (eventually [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( once (not fall (id1 > num1value#)) -> fall ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 < num3value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( once [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 > num2value#))) )
eventually [num3temporala#:num3temporalb#] (not fall (id1 == num1value#) or id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually (always [num3temporala#:num3temporalb#] (not fall (id2 == num2value#))) )
always (id1 == id2)
eventually [0:num1temporal#] (rise (id1 == id2))
always ( fall (id1 == num1value#) -> (id2 >= num2value#) until (id3 == id4) )
always ( (id1 == id2) since (id3 == id4) -> (id5 == id6) since [0:num2temporal#] (id7 > num1value#) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 <= num2value#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (always (not (id3 <= num1value#))) )
always ( rise (id1 == num1value#) -> id2 <= num2value# or (id3 > num3valuea# and id3 < num3valueb#) )
always ( not (id1 >= num1value#) -> id2 > num2value# )
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
eventually [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always ( not (always (id1 >= num1value#)) -> historically (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) and fall (id3 == num3value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always [num2temporala#:num2temporalb#] (not rise (id1 >= num1value#) or id2 == id3)
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually (id3 >= num3value#)) )
always ( id1 > num1value# and rise (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 and not (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( not (id1 == num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always (id1 < num1value# or not (id2 == id3))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( historically [0:num2temporal#] (id1 > num1value#) -> once [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (not (id3 > num1valuea# and id3 <= num1valueb#)) )
always (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 <= num1value#) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
eventually (id1 >= num1value# and id2 > num2value#)
always ( rise (id1 > num1value#) -> rise (id2 > num2value#) or id3 == id4 )
always ( (id1 == id2) since (id3 == num1value#) -> always [0:num2temporal#] (not (id4 == id5)) )
eventually (not (id1 == id2))
always [0:num2temporal#] (id1 >= num1value#)
always ( not (once (fall (id1 >= num1valuea# and id1 <= num1valueb#))) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 >= num3value#)) )
always ( not (id1 == num1value#) and id2 == id3 -> (id4 == num2value#) since [num4temporala#:num4temporalb#] (not (id5 == num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
eventually [0:num3temporal#] (id1 >= num1value# or rise (id2 < num2value#))
always ( rise (id1 == id2) -> id3 > num1value# )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 == id2) -> always (eventually [0:num1temporal#] (not fall (id3 == id4))) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 == num2value#) )
always [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> always (not (id3 > num3value#)) )
always ( not (id1 <= num1value#) and rise (id2 < num2value#) -> historically [num4temporala#:num4temporalb#] (not fall (id3 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise ((id2 == id3) until [num3temporala#:num3temporalb#] (id4 >= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( not (id1 == id2) and id3 == id4 -> eventually [num2temporala#:num2temporalb#] (always (id5 > num1value#)) )
always ( not (eventually (id1 <= num1value#)) -> (id2 == id3) until [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( id1 < num1value# -> id2 >= num2value# or not (id3 < num3value#) )
always ( not (id1 == num1value#) and id2 == id3 -> always (id4 == num2value#) )
eventually [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( id1 >= num1value# and rise (id2 >= num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id3 == num1value#))) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)) -> always [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( id1 > num1value# and fall (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually (rise (id3 == num3value#))) )
always ( id1 == id2 and fall (id3 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id4 >= num2value#)) )
always ( fall (id1 == id2) -> (id3 == num1value#) until [num3temporala#:num3temporalb#] (rise (id4 <= num2value#)) )
always ( fall (id1 == num1value#) -> rise (id2 >= num2value#) and id3 == id4 )
always ( id1 == num1value# or id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always (id3 == num3value#)) )
always (id1 >= num1value# and id2 == num2value#)
always ( fall (id1 == num1value#) -> eventually (always (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( id1 == num1value# -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> id2 >= num2value# and fall (id3 == num3value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> not (always (id2 == num3value#)) )
always ( id1 == id2 -> rise (id3 < num1value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until [0:num3temporal#] (id2 <= num2value#) -> once [0:num5temporal#] (rise (id3 == num4value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# or id2 == id3 -> not (always [0:num3temporal#] (id4 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( not (id1 > num1value#) and id2 >= num2value# -> id3 <= num3value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 == num2value#))
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == id2 or id3 == num1value# -> not (eventually (rise (id4 > num2valuea# and id4 < num2valueb#))) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( id1 >= num1value# -> id2 < num2value# )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( not fall (historically (not (id1 == num1value#))) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 <= num1value#) -> id2 == id3 and (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always (id1 == id2)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( rise (id1 < num1value#) or fall (id2 == num2value#) -> id3 <= num3value# )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 == num2value#)
always ( rise (id1 >= num1value#) -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 < num2value#)
always ( id1 == id2 -> not (id3 == id4) and (id5 >= num1valuea# and id5 <= num1valueb#) )
always ( id1 == id2 -> id3 >= num1value# )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 < num1value#))) )
eventually [0:num3temporal#] (not (id1 > num1value#) and id2 <= num2value#)
always ( rise (id1 > num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( id1 < num1value# or id2 < num2value# -> always [0:num4temporal#] (not (id3 <= num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 == id2) -> rise (id3 >= num1value#) and id4 <= num2value# )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (id2 >= num2valuea# and id2 < num2valueb#)) )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 <= num1value#) -> id2 < num2value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) and id2 < num2value#)
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (rise (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 == num1value#) or id2 == id3 -> id4 > num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2value#) -> rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not fall (id2 == num2value#))) )
always ( not (id1 == id2) and id3 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
always ( rise (id1 >= num1value#) -> always (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> (id3 > num2value#) until [num4temporala#:num4temporalb#] (id4 <= num3value#) )
always ( rise (id1 < num1value#) -> not (id2 <= num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> (not (id3 <= num3value#)) until (rise (id4 == id5)) )
always ( id1 == num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (rise (id3 >= num3value#)) )
always (id1 == id2)
eventually (id1 > num1value# or id2 <= num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 <= num2value#))) )
always ( id1 < num1value# or id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (id3 > num3value#) )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always [0:num2temporal#] (not rise (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#))
always ( always (not rise (id1 == id2)) -> eventually (always [0:num2temporal#] (id3 == num1value#)) )
always ( id1 == num1value# -> id2 == num2value# )
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( once [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually [num4temporala#:num4temporalb#] (rise (id2 >= num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#))
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> not fall (id2 >= num2value#) or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( not (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( rise (id1 >= num1value#) -> not rise (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> always [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always (id1 >= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == id2 and id3 == num1value# -> id4 > num2value# )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until (id3 == id4) )
always ( id1 < num1value# and id2 == num2value# -> id3 == id4 )
always ( historically [0:num2temporal#] (id1 > num1value#) -> always (eventually (id2 <= num3value#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#))
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( rise (id1 == id2) -> eventually (always (id3 == num1value#)) )
always (id1 <= num1value# and not fall (id2 > num2value#))
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( id1 <= num1value# and id2 < num2value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 == id4)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> not fall ((id2 < num3value#) until [0:num5temporal#] (id3 <= num4value#)) )
eventually [0:num3temporal#] (id1 > num1value# and rise (id2 < num2value#))
eventually [0:num2temporal#] (id1 >= num1value# or id2 == id3)
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( not ((id1 >= num1value#) since (id2 > num2valuea# and id2 < num2valueb#)) -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) or not (id2 < num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> not ((not (id2 == id3)) until (id4 == id5)) )
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually (id1 <= num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (not rise (id2 == num2value#)) )
always ( id1 == id2 or rise (id3 >= num1valuea# and id3 <= num1valueb#) -> eventually (id4 > num2value#) )
always ( rise (id1 < num1value#) -> id2 < num2value# and id3 >= num3value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num1temporala#:num1temporalb#] (not rise (id1 == id2) and id3 == id4)
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num2temporala#:num2temporalb#] (id2 == id3) -> not (eventually [0:num3temporal#] (rise (id4 == id5))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 <= num2value#) since [0:num3temporal#] (rise (id3 == id4)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( not fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( historically [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 == num3value#) until [0:num5temporal#] (rise (id3 == num4value#)) )
always (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (once (not (id1 < num1value#))) -> always [0:num3temporal#] (id2 < num2value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2valuea# and id2 < num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 < num1value# and id2 < num2value# -> id3 == num3value# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually (rise (id2 >= num2value#))) )
eventually [num3temporala#:num3temporalb#] (not rise (id1 >= num1value#) or not (id2 >= num2value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (rise (id1 < num1value#) and rise (id2 < num2value#))
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always (id1 == num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
always [num2temporala#:num2temporalb#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 < num1value#) or id2 >= num2value# -> always (eventually [num4temporala#:num4temporalb#] (fall (id3 > num3valuea# and id3 <= num3valueb#))) )
always ( id1 < num1value# or id2 >= num2value# -> not (once [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( rise (id1 < num1value#) -> not (id2 == num2value#) and id3 == id4 )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually (rise (id3 == id4))) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( id1 < num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 > num2value#) -> always [0:num4temporal#] (eventually (rise (id3 == num3value#))) )
eventually (id1 >= num1value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> fall (eventually [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 == num1value# -> eventually (id2 == num2value#) )
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 >= num2value#)) -> once [num5temporala#:num5temporalb#] (id3 == num4value#) )
eventually (id1 >= num1value# or rise (id2 <= num2value#))
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always ( fall (id1 == num1value#) -> rise (id2 >= num2value#) or id3 == id4 )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> fall (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( not (id1 < num1value#) or id2 == num2value# -> not (eventually [num4temporala#:num4temporalb#] (id3 > num3value#)) )
eventually (id1 > num1value#)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( once [num2temporala#:num2temporalb#] (rise (id1 < num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == id3))) )
eventually [0:num1temporal#] (id1 == id2)
always ( not (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> not fall (id3 == id4) )
always ( rise (id1 <= num1value#) -> not (id2 <= num2value#) )
always ( id1 <= num1value# -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( fall ((id1 > num1value#) since (id2 == id3)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 == num2value#))) )
always [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 >= num2value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 == num1value# and not fall (id2 == id3) -> id4 == num2value# )
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 < num1valueb#) or rise (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always [0:num3temporal#] (id1 <= num1value# or id2 == num2value#)
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always (id1 == num1value# or id2 > num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) until (id2 == id3) -> (id4 == num2value#) until [0:num3temporal#] (not rise (id5 == id6)) )
always ( id1 == num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) or (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (not (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 == num1value#) -> (id2 > num2value#) until [0:num3temporal#] (not rise (id3 == id4)) )
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (eventually (fall (id2 == id3))) )
always ( id1 > num1value# and id2 >= num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) and id4 == id5 )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not ((id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) -> not (eventually [0:num5temporal#] (id3 <= num4value#)) )
always ( id1 == num1value# and id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) or rise (id4 <= num4value#) )
always ( rise (id1 == id2) -> once [num2temporala#:num2temporalb#] (id3 <= num1value#) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 == num1value#) -> not fall ((id2 < num2value#) since [0:num4temporal#] (id3 == num3value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always (id1 == num1value# or id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 < num2value#))) )
always ( fall (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 > num3value#) )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == num1value#) and id2 == num2value# -> fall ((id3 >= num3valuea# and id3 <= num3valueb#) until [0:num5temporal#] (rise (id4 <= num4value#))) )
always ( id1 > num1value# and id2 == id3 -> always (id4 == num2value#) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 <= num2value#)
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2value#)) -> always [0:num5temporal#] (id3 >= num4value#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( once [0:num1temporal#] (id1 == id2) -> (not fall (id3 > num2value#)) since [num3temporala#:num3temporalb#] (id4 == id5) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always ( (id1 == num1value#) until [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> eventually (always [num5temporala#:num5temporalb#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always (not (id1 <= num1value#) or id2 == id3)
always [num3temporala#:num3temporalb#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 == num2value#)
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 < num1value#))) )
always (id1 < num1value#)
eventually (not (id1 > num1value#))
always ( always (id1 >= num1value#) -> not (historically [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually (id2 < num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( id1 == id2 -> id3 == id4 )
always ( id1 < num1value# -> id2 == num2value# )
always ( fall (id1 == id2) -> rise (always (id3 == num1value#)) )
always ( fall (id1 == num1value#) -> (id2 >= num2value#) since [0:num4temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num2temporal#] (not (id4 == id5)) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (id3 >= num3value#) and id4 >= num4value# )
always ( not (historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (not (id2 <= num3value#))) )
always ( id1 <= num1value# or rise (id2 <= num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( id1 >= num1value# or id2 == id3 -> (id4 == num2value#) until (id5 > num3value#) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 == num2value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not rise (id3 == id4))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 >= num1value#) -> rise (id2 < num2value#) )
always ( rise (id1 >= num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) since [0:num3temporal#] (id3 == id4) )
always ( once (rise (id1 > num1valuea# and id1 < num1valueb#)) -> always (eventually [0:num3temporal#] (id2 <= num2value#)) )
always ( id1 == id2 and id3 == id4 -> always [0:num2temporal#] (id5 < num1value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (not (id2 <= num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# and not (id3 >= num3value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually (id2 > num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 < num1value#) -> rise (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always ( (id1 == id2) since (id3 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
eventually [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> not (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always [0:num1temporal#] (id1 == id2)
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 > num3valuea# and id2 <= num3valueb#) until [num5temporala#:num5temporalb#] (id3 == num4value#) )
always (id1 == id2 and not rise (id3 == id4))
always ( id1 > num1value# and not (id2 == num2value#) -> id3 == id4 )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 > num2valuea# and id2 <= num2valueb#) )
always ( historically (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#))
always ( rise (id1 == num1value#) -> always (eventually (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
eventually (not (id1 < num1value#) and id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 < num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( id1 == num1value# and id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> id3 == id4 )
always ( fall (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 < num3value#) )
always ( id1 >= num1value# or rise (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == id3) and id4 >= num2value# )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (rise (id3 <= num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( id1 == id2 or id3 == id4 -> id5 == num1value# )
always ( id1 <= num1value# and id2 > num2value# -> id3 == id4 and rise (id5 == num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# and id3 >= num3value# )
always ( rise (id1 >= num1value#) -> (not rise (id2 == id3)) until [0:num3temporal#] (id4 == num2value#) )
always ( id1 == num1value# or id2 == num2value# -> eventually [0:num4temporal#] (id3 == num3value#) )
always [num3temporala#:num3temporalb#] (not fall (id1 == num1value#) or id2 < num2value#)
always ( (id1 == id2) until [0:num2temporal#] (fall (id3 == num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id4 >= num3valuea# and id4 <= num3valueb#)) )
always [0:num2temporal#] (id1 < num1value#)
always [0:num3temporal#] (not (id1 == num1value#) and not (id2 == num2value#))
always ( fall (id1 == id2) -> eventually (always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 > num1value#) -> eventually (always (id2 <= num2value#)) )
always ( not (historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num3temporal#] (rise (id2 == id3)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (rise (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 < num1value#) )
always ( not (id1 > num1value#) or rise (id2 == num2value#) -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always (id1 > num1value# and id2 == num2value#)
always ( rise (id1 < num1value#) -> eventually (rise (id2 > num2value#)) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( fall (eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))) -> not (eventually [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( id1 > num1value# -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually (always [num4temporala#:num4temporalb#] (not (id2 == num3value#))) )
always ( id1 <= num1value# -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( always (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 >= num2value#)) )
always [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 >= num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or not (id2 < num2value#) -> rise (id3 == num3value#) )
eventually (rise (id1 == id2))
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == id3))
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( id1 == num1value# and id2 > num2value# -> (not (id3 > num3valuea# and id3 < num3valueb#)) since [num5temporala#:num5temporalb#] (rise (id4 > num4value#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 >= num1value# or id2 <= num2value# -> rise (id3 >= num3valuea# and id3 < num3valueb#) or id4 > num4value# )
always ( (id1 < num1value#) since [0:num3temporal#] (id2 >= num2value#) -> rise (always (id3 <= num4value#)) )
always ( fall (id1 == id2) -> id3 < num1value# and id4 <= num2value# )
eventually (not (id1 < num1value#) and id2 >= num2value#)
eventually [0:num3temporal#] (rise (id1 == num1value#) and id2 == num2value#)
always ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2value#))
always ( id1 > num1value# -> fall (id2 == num2value#) and id3 == num3value# )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 <= num2value#) -> not (eventually [num3temporala#:num3temporalb#] (not (id3 == id4))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
eventually (id1 == num1value#)
always ( rise (id1 == num1value#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) since [0:num3temporal#] (id4 <= num2value#) )
eventually (id1 >= num1value# and not (id2 <= num2value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num3temporala#:num3temporalb#] (not (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 == id2)
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 == num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == id2) -> historically (id3 <= num1value#) )
always ( rise (id1 == num1value#) -> eventually (rise (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> id2 <= num2value# and id3 >= num3value# )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> (id2 == id3) until (id4 >= num3valuea# and id4 <= num3valueb#) )
eventually (id1 == id2 and id3 <= num1value#)
always ( not (once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> eventually (always (not (id2 <= num3value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> not rise (once [0:num4temporal#] (id3 > num3value#)) )
always ( id1 == id2 -> id3 == num1value# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always [0:num2temporal#] (id1 == id2 or (id3 > num1valuea# and id3 <= num1valueb#))
always ( rise (id1 > num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 <= num3value# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( fall (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> fall (id2 >= num2valuea# and id2 <= num2valueb#) and id3 >= num3value# )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( id1 > num1value# and rise (id2 < num2value#) -> rise (id3 >= num3value#) )
always ( not fall (id1 >= num1value#) -> not rise (once (id2 >= num2value#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( not (id1 < num1value#) or not (id2 == num2value#) -> not (id3 < num3value#) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (not (id3 >= num1value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> always (eventually (id3 > num1value#)) )
always (id1 == id2)
always ( always [0:num2temporal#] (id1 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always [0:num3temporal#] (id1 > num1value# or id2 > num2value#)
always ( once (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually (not (id2 <= num2value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (id3 <= num2value#) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 <= num1value#) -> eventually (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> eventually (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 or not (id3 > num1value#))
eventually ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 <= num2value#))
always ( once [num1temporala#:num1temporalb#] (rise (id1 == id2)) -> eventually (id3 <= num2value#) )
always ( rise (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) and not fall (id4 == id5) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) or id2 == num2value#)
always ( id1 > num1value# or id2 > num2value# -> once (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (eventually [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] (rise (id1 > num1value#))
eventually (id1 > num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (not (id3 > num1value#)) )
always ( rise (id1 == num1value#) -> fall (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( id1 == num1value# or id2 > num2value# -> (not (id3 < num3value#)) since [0:num5temporal#] (id4 == num4value#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not ((id1 == id2) since (id3 >= num1valuea# and id3 <= num1valueb#)) -> eventually [num3temporala#:num3temporalb#] (always (id4 <= num2value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not fall (id2 > num2value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( (not (id1 == id2)) since [0:num1temporal#] (fall (id3 == id4)) -> always [num2temporala#:num2temporalb#] (eventually (fall (id5 == id6))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always (id1 == id2)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and not (id2 <= num2value#))
always ( rise (id1 == id2) -> not rise (always (id3 >= num1value#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> not ((id3 >= num3valuea# and id3 < num3valueb#) until [num5temporala#:num5temporalb#] (id4 >= num4valuea# and id4 <= num4valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 >= num2valuea# and id2 < num2valueb#) -> eventually (always (id3 == id4)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 > num1value# -> eventually [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (rise (id1 == num1value#) and not fall (id2 >= num2value#))
eventually [0:num3temporal#] (rise (id1 >= num1value#) and id2 >= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( (not rise (id1 > num1valuea# and id1 < num1valueb#)) since [0:num3temporal#] (id2 >= num2valuea# and id2 < num2valueb#) -> always (eventually [0:num4temporal#] (id3 == id4)) )
always ( id1 < num1value# or id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 > num3valuea# and id3 < num3valueb#))) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( not (id1 > num1value#) or id2 < num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == id2 -> (id3 < num1value#) until (not (id4 <= num2value#)) )
always [0:num3temporal#] (id1 >= num1value# or id2 == num2value#)
always ( id1 >= num1value# -> always [0:num3temporal#] (id2 >= num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and id2 >= num2value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2value#))) )
always ( id1 < num1value# and id2 == id3 -> eventually [0:num2temporal#] (id4 == id5) )
always ( rise (id1 >= num1value#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually (not (id1 == id2) or not (id3 <= num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> rise (id2 > num2value#) )
always ( id1 == id2 or id3 == id4 -> id5 <= num1value# )
always ( rise (id1 <= num1value#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 == num1value# and id2 == id3 -> always [num3temporala#:num3temporalb#] (id4 >= num2value#) )
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 <= num1value# and id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( rise (id1 > num1value#) -> not (eventually (rise (id2 >= num2value#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (fall (id2 == num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 <= num2value#) until [0:num4temporal#] (id3 > num3value#) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
eventually (id1 > num1valuea# and id1 < num1valueb#)
always (id1 > num1value#)
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
eventually (id1 == id2)
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 > num1value#)) )
always ( rise (id1 == num1value#) -> rise (id2 == num2value#) and not fall (id3 == num3value#) )
eventually [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (id3 >= num1value#)) )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always [0:num2temporal#] (id1 >= num1value#)
always ( not fall (id1 == num1value#) and id2 < num2value# -> eventually [0:num4temporal#] (id3 >= num3value#) )
always (id1 == num1value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
eventually [0:num2temporal#] (id1 == num1value#)
always ( not (id1 <= num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> always (id3 <= num3value#) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 >= num1value#) )
eventually [0:num2temporal#] (not (id1 < num1value#))
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( rise (id1 > num1value#) -> (id2 == num2value#) until (rise (id3 == id4)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) )
always [0:num2temporal#] (not (id1 <= num1value#))
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) since [0:num2temporal#] (id2 == id3)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == id5)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( fall (id1 == id2) -> id3 == id4 )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) until [0:num2temporal#] (id2 == id3) -> always [0:num4temporal#] (id4 <= num3value#) )
always ( id1 > num1value# or id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( historically (id1 >= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (not rise (id2 == num2value#))) )
always [0:num2temporal#] (id1 > num1value# or id2 == id3)
always ( id1 == num1value# or id2 > num2value# -> id3 == id4 )
always ( id1 > num1value# and id2 == id3 -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( not (id1 <= num1value#) and id2 < num2value# -> always (id3 == id4) )
always ( fall (id1 == num1value#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( always [num2temporala#:num2temporalb#] (not rise (id1 >= num1value#)) -> always [0:num4temporal#] (id2 < num3value#) )
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) )
always ( eventually [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#)) -> eventually [num3temporala#:num3temporalb#] (id2 == id3) )
always [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) and id3 == id4 )
always ( rise (id1 == num1value#) -> (id2 == id3) since (not fall (id4 == id5)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 > num2value#) since (rise (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> (not (id2 == id3)) since [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( id1 < num1value# -> always (eventually (rise (id2 > num2value#))) )
always ( rise (id1 == id2) -> (id3 <= num1value#) until [num3temporala#:num3temporalb#] (id4 >= num2value#) )
always ( not rise (once [num2temporala#:num2temporalb#] (rise (id1 == num1value#))) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (not rise (id2 == id3))) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually (always (id2 == num2value#)) )
always ( id1 == num1value# or id2 == id3 -> id4 == id5 )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (not (id1 >= num1value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> id3 == id4 )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> (id2 > num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (rise (id3 > num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 >= num1value#) -> (not (id2 >= num2value#)) until [0:num3temporal#] (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 < num1value# -> always [0:num2temporal#] (id2 == id3) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> (id4 == num2value#) until [0:num4temporal#] (id5 > num3value#) )
always ( rise (id1 >= num1value#) -> not fall (id2 == num2value#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( not (once (id1 == num1value#)) -> (id2 <= num2value#) until (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( eventually [0:num1temporal#] (not (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise ((id1 > num1value#) since [num2temporala#:num2temporalb#] (id2 == id3)) -> always [0:num4temporal#] (id4 > num3valuea# and id4 <= num3valueb#) )
always ( rise (id1 > num1value#) -> always (eventually (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always ( not fall (id1 == id2) and not fall (id3 == id4) -> id5 > num1value# )
always ( not rise (once [num2temporala#:num2temporalb#] (fall (id1 == num1value#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3value#)) )
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3))
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3value#) )
always [0:num3temporal#] (not (id1 <= num1value#) or not (id2 > num2value#))
always ( eventually [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 >= num2valuea# and id3 <= num2valueb#))) )
always ( rise (id1 == id2) -> not (eventually [num2temporala#:num2temporalb#] (id3 == num1value#)) )
always [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#) -> not fall (id4 == num2value#) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not ((id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( once [0:num2temporal#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 == num3value#))) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
eventually (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always (not (id1 < num1value#) or id2 == id3)
always ( (id1 >= num1value#) since [0:num2temporal#] (rise (id2 == id3)) -> (not rise (id4 >= num3valuea# and id4 <= num3valueb#)) since [0:num5temporal#] (id5 > num4value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# or rise (id2 > num2value#) -> (id3 <= num3value#) until [num5temporala#:num5temporalb#] (fall (id4 == num4value#)) )
eventually [0:num1temporal#] (not rise (id1 == id2))
eventually (id1 == num1value# and fall (id2 == num2value#))
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 <= num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 == num3value#) until [num4temporala#:num4temporalb#] (id4 == id5) )
always ( id1 < num1value# -> id2 == id3 )
always ( (id1 == num1value#) until [0:num3temporal#] (rise (id2 >= num2value#)) -> eventually [num5temporala#:num5temporalb#] (always (id3 == num4value#)) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( (id1 == id2) since [num1temporala#:num1temporalb#] (rise (id3 == id4)) -> eventually [0:num3temporal#] (id5 <= num2value#) )
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always (not (id2 >= num2value#)) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 < num1value#) -> rise (id2 > num2value#) or id3 == id4 )
always ( rise (once [0:num2temporal#] (fall (id1 >= num1valuea# and id1 < num1valueb#))) -> eventually [0:num4temporal#] (id2 >= num3value#) )
eventually [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> not ((id3 == id4) until [num2temporala#:num2temporalb#] (id5 >= num1value#)) )
always ( id1 < num1value# -> id2 <= num2value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( historically (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( fall (once (id1 == num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( rise (id1 <= num1value#) -> fall ((id2 > num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> not rise ((id2 == num2value#) until [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( id1 == id2 and id3 == num1value# -> id4 <= num2value# )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always ( fall (id1 == num1value#) and id2 == num2value# -> once [num4temporala#:num4temporalb#] (fall (id3 == num3value#)) )
always ( once (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (not (id3 > num1value#))) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always (id1 <= num1value# or not (id2 <= num2value#))
always (id1 > num1value# and not (id2 == id3))
always ( rise (id1 < num1value#) -> eventually (id2 == id3) )
always ( not fall (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == id3) until (id4 >= num2valuea# and id4 <= num2valueb#)) )
eventually [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# or not (id2 == id3) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (not (id3 > num1valuea# and id3 < num1valueb#))) )
always ( id1 == num1value# -> id2 == num2value# )
always ( rise (id1 == num1value#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) until [0:num4temporal#] (id3 <= num3value#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 or id3 < num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id4 == id5))) )
always ( rise (id1 <= num1value#) or not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always [0:num3temporal#] (id1 <= num1value# and not (id2 == num2value#))
always ( (not fall (id1 >= num1value#)) since (rise (id2 > num2value#)) -> eventually [0:num3temporal#] (fall (id3 == id4)) )
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (id3 == num2value#) )
always ( id1 == id2 and id3 < num1value# -> always [0:num3temporal#] (id4 <= num2value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# or id3 == num3value# )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
eventually [0:num3temporal#] (id1 < num1value# or rise (id2 == num2value#))
always ( id1 == id2 -> not (id3 < num1value#) or rise (id4 < num2value#) )
always ( id1 >= num1value# -> fall (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( id1 == num1value# or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( eventually [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 >= num2valuea# and id3 < num2valueb#))) )
always ( rise (id1 == num1value#) -> not rise (id2 == num2value#) or id3 < num3value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (rise (id2 > num2value#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( id1 == num1value# and rise (id2 <= num2value#) -> fall (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) or rise (id2 > num2valuea# and id2 <= num2valueb#) -> not (id3 < num3value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> rise (id2 <= num2value#) )
eventually [0:num3temporal#] (id1 <= num1value# or id2 < num2value#)
always [0:num3temporal#] (not (id1 < num1value#) and id2 > num2value#)
eventually [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) and id2 == num2value#)
eventually [0:num2temporal#] (rise (id1 > num1value#) and id2 == id3)
always ( fall (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
eventually (id1 == id2)
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (not (id3 >= num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 == id2) since (not rise (id3 > num1valuea# and id3 < num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 >= num2valuea# and id4 <= num2valueb#))) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> eventually (always (id2 < num3value#)) )
always ( rise (id1 > num1value#) and rise (id2 <= num2value#) -> (id3 == num3value#) until [num4temporala#:num4temporalb#] (fall (id4 == id5)) )
always ( id1 >= num1value# -> once [0:num3temporal#] (rise (id2 == num2value#)) )
always ( id1 > num1value# and id2 == id3 -> fall ((id4 >= num2value#) until [0:num4temporal#] (rise (id5 == num3value#))) )
always (not fall (id1 > num1value#) and id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( id1 == id2 and id3 > num1value# -> fall (id4 == num2value#) and id5 >= num3value# )
always ( id1 == num1value# or not (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (not (id2 >= num2value#))) )
eventually [num1temporala#:num1temporalb#] (not rise (id1 == id2))
always ( id1 > num1value# or rise (id2 > num2value#) -> eventually [0:num3temporal#] (not (id3 == id4)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 >= num2value# )
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> not (always [0:num3temporal#] (id4 == num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 == id2) -> id3 >= num1value# )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 == id2)
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> historically [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( (not fall (id1 > num1value#)) until (id2 == num2value#) -> once [0:num4temporal#] (id3 > num3value#) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> (id2 > num3value#) since (id3 == id4) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1value#) -> eventually (id2 > num2value#) )
always ( id1 == num1value# or rise (id2 >= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( fall ((id1 > num1value#) since [num2temporala#:num2temporalb#] (id2 == id3)) -> eventually [0:num4temporal#] (not (id4 > num3valuea# and id4 < num3valueb#)) )
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) or rise (id4 > num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) since [num4temporala#:num4temporalb#] (id3 < num3value#) )
eventually (id1 > num1value#)
always ( rise (id1 == id2) -> not (id3 < num1value#) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not fall (once (id2 > num2value#)) )
always ( fall (id1 == id2) -> id3 > num1value# )
always ( id1 < num1value# and id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
always ( rise (id1 == id2) -> fall (always [num2temporala#:num2temporalb#] (not (id3 == num1value#))) )
eventually [0:num3temporal#] (not fall (id1 == num1value#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> not fall ((id2 < num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( once [0:num2temporal#] (id1 < num1value#) -> not (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 == id2 and id3 == num1value# -> id4 == id5 )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( id1 > num1value# or id2 <= num2value# -> once (rise (id3 >= num3value#)) )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> not (id4 > num2value#) )
always ( id1 >= num1value# or rise (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (id3 >= num3value#) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
eventually (id1 == id2)
eventually (not fall (id1 == num1value#) and not (id2 < num2value#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 > num3value#) )
always ( historically (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
eventually [0:num2temporal#] (rise (id1 >= num1value#) or id2 == id3)
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (fall (id2 == id3)) )
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == id2 and id3 == id4 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id5 < num1value#)) )
always [0:num3temporal#] (id1 >= num1value# or id2 < num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) or not (id2 >= num2valuea# and id2 <= num2valueb#))
eventually (id1 == num1value# or id2 < num2value#)
always ( once [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
eventually [0:num2temporal#] (id1 < num1value#)
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == id2 -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( (id1 <= num1value#) until (id2 == id3) -> always [0:num3temporal#] (id4 < num2value#) )
always ( rise (id1 == num1value#) -> rise (once [0:num3temporal#] (not rise (id2 > num2value#))) )
always ( not (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 < num3value#)) )
always ( not (id1 == num1value#) -> eventually (rise (id2 < num2value#)) )
always ( not ((id1 <= num1value#) since [0:num3temporal#] (not (id2 > num2value#))) -> eventually [num5temporala#:num5temporalb#] (always [num6temporala#:num6temporalb#] (id3 == num4value#)) )
always ( once [0:num1temporal#] (id1 == id2) -> eventually (always [0:num2temporal#] (id3 == id4)) )
always ( id1 <= num1value# or fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (id1 >= num1value# and id2 == id3)
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (not rise (id2 >= num2value#)) )
always ( rise (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 <= num2value#)
always ( once [0:num2temporal#] (rise (id1 <= num1value#)) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (not (id2 == num3value#))) )
always ( id1 > num1value# -> not rise (id2 > num2value#) )
always ( id1 == id2 and rise (id3 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
always ( not (id1 == num1value#) and fall (id2 == num2value#) -> (id3 >= num3value#) until (not fall (id4 > num4value#)) )
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always [0:num2temporal#] (id1 == id2 and not fall (id3 >= num1valuea# and id3 <= num1valueb#))
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always [0:num3temporal#] (id1 > num1value# and not (id2 < num2value#))
always ( id1 < num1value# and id2 == num2value# -> always [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
eventually [0:num3temporal#] (id1 >= num1value# and fall (id2 == num2value#))
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always ( id1 >= num1value# or id2 <= num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (historically (id1 == num1value#)) -> historically [0:num3temporal#] (not (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 == num3value#) )
eventually [0:num1temporal#] (id1 == id2)
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always (not (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#))
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( (id1 == num1value#) since (not rise (id2 >= num2valuea# and id2 <= num2valueb#)) -> always (eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (historically [0:num3temporal#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (fall (id3 == num1value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always ( not (historically (id1 == num1value#)) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 < num3value#)) )
always ( id1 <= num1value# -> not (always (id2 == id3)) )
always [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (id1 == id2 or id3 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> rise (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (id3 > num1value#)) )
always ( eventually [0:num2temporal#] (rise (id1 == num1value#)) -> not (always [0:num4temporal#] (id2 > num3value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> eventually (id2 > num2value#) )
always ( rise (id1 > num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (not (id2 == num2value#))) )
always ( rise (id1 > num1value#) and id2 >= num2value# -> (id3 == id4) until [0:num4temporal#] (rise (id5 >= num3value#)) )
always ( id1 >= num1value# -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until (not fall (id3 == num3value#))) )
always [0:num2temporal#] (id1 <= num1value#)
always (not (id1 <= num1value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 < num2value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> fall ((id2 >= num2valuea# and id2 <= num2valueb#) until [num3temporala#:num3temporalb#] (rise (id3 == id4))) )
always ( id1 < num1value# or rise (id2 >= num2value#) -> id3 > num3value# or id4 <= num4value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
eventually [0:num2temporal#] (not (id1 <= num1value#))
always ( id1 > num1value# -> fall (id2 >= num2valuea# and id2 <= num2valueb#) or id3 == id4 )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) or id2 <= num2value# -> not fall (id3 == id4) and id5 <= num3value# )
always ( not (id1 < num1value#) -> id2 == num2value# )
always ( id1 > num1value# and id2 >= num2value# -> id3 >= num3value# or id4 == id5 )
always ( id1 <= num1value# -> once [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always [0:num3temporal#] (id1 > num1value# or id2 == num2value#)
always ( id1 <= num1value# or id2 == id3 -> id4 > num2value# )
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num2temporal#] (not (id1 > num1value#) and id2 == id3)
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 == id3) until (id4 > num3value#) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( id1 >= num1value# and id2 <= num2value# -> id3 >= num3value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 < num1value#)) )
always (id1 >= num1value# and id2 == id3)
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> (not (id2 == id3)) until [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 < num1value#) -> not (always (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 or id3 == id4 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id5 <= num1value#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 >= num1value#)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num1temporal#] (id1 == id2)
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 >= num2value#)
always [0:num1temporal#] (id1 == id2)
always (id1 > num1value#)
always ( rise (id1 == id2) -> id3 == id4 )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 >= num1value#) and id2 == id3 -> not (id4 >= num2valuea# and id4 < num2valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 < num2valueb#) )
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always ( fall (id1 == id2) -> not (eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always [0:num2temporal#] (not fall (id1 >= num1value#))
always ( id1 >= num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> historically (id2 <= num2value#) )
always ( fall (id1 == id2) -> eventually (always [0:num2temporal#] (id3 == num1value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( (id1 == num1value#) since [0:num3temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> (id3 == num4value#) until [0:num6temporal#] (id4 > num5value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> id3 == id4 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num3temporal#] (id2 >= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise ((id2 == num2value#) until [0:num3temporal#] (rise (id3 == id4))) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> not fall (eventually [0:num3temporal#] (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> eventually (always (id2 > num2value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 == num1value#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) or id2 == id3 -> id4 == num2value# )
always ( not (id1 == num1value#) and id2 == num2value# -> (id3 > num3value#) until (id4 < num4value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> fall (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 > num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( not fall (once [0:num1temporal#] (not (id1 == id2))) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 == id4)) )
eventually (id1 <= num1value#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 <= num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( once [0:num2temporal#] (id1 == num1value#) -> once [0:num3temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 <= num1value#) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and rise (id2 >= num2value#))
always ( rise (id1 == num1value#) -> fall ((not (id2 >= num2valuea# and id2 <= num2valueb#)) until (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> id2 > num2value# or rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 < num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 < num1value#) and not (id2 < num2value#) -> (id3 == id4) until [0:num4temporal#] (id5 < num3value#) )
always ( rise (id1 > num1value#) and id2 == num2value# -> not (once [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 >= num4valuea# and id3 < num4valueb#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> id2 == id3 and fall (id4 == num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( not ((not (id1 > num1valuea# and id1 < num1valueb#)) since [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 == id4)) )
always ( rise (id1 >= num1value#) -> fall (id2 == id3) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id3 > num1valuea# and id3 < num1valueb#))) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 < num2value#)) -> not fall ((id3 >= num4value#) until [0:num6temporal#] (rise (id4 < num5value#))) )
always ( not (id1 < num1value#) or id2 == id3 -> id4 < num2value# )
always ( id1 == num1value# or not fall (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> historically (id2 == id3) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) or id2 < num2value#)
always ( id1 > num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num3temporal#] (id1 >= num1value# or not (id2 <= num2value#))
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( id1 == num1value# and id2 <= num2value# -> eventually [num3temporala#:num3temporalb#] (rise (id3 == id4)) )
always ( id1 < num1value# or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == id2) or id3 < num1value#)
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( id1 >= num1value# -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> not ((not (id2 >= num3value#)) until [num5temporala#:num5temporalb#] (id3 <= num4value#)) )
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 == id2) -> id3 == id4 and id5 < num1value# )
always ( not (historically [0:num2temporal#] (id1 == num1value#)) -> always (eventually [0:num4temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num3temporal#] (id1 == num1value# or id2 < num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 <= num1value#) -> fall ((id2 == num2value#) until (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 >= num1value#) -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1value# or fall (id2 == num2value#) -> id3 == id4 )
always ( not (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> id3 == num3value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> not rise (once [num4temporala#:num4temporalb#] (fall (id2 == num3value#))) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 == id2) -> fall (id3 == id4) )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (rise (id3 < num3value#)) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3)
eventually [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1value#) and rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
eventually (rise (id1 > num1value#) or not (id2 >= num2value#))
always ( rise (id1 > num1value#) -> rise (id2 == id3) )
always ( rise (id1 < num1value#) -> (id2 == id3) since (id4 > num2valuea# and id4 < num2valueb#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> once (id2 == id3) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always (id2 >= num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) or rise (id3 >= num3value#) )
always ( id1 == num1value# or id2 == id3 -> not rise (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( once (id1 > num1valuea# and id1 < num1valueb#) -> eventually (fall (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 >= num2value#))) )
always ( rise (id1 > num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) or id3 < num3value# )
always ( id1 > num1value# or id2 <= num2value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( id1 == num1value# -> id2 > num2value# )
always ( historically (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# or id2 == id3 -> eventually [0:num3temporal#] (fall (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( once (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( not (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2value#))) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#))
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always (id2 == num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> eventually (id3 == id4) )
always [num3temporala#:num3temporalb#] (not fall (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == id2) -> id3 == id4 )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 >= num1value#) -> rise ((id2 >= num2value#) since (id3 >= num3value#)) )
always ( (not (id1 < num1value#)) until [0:num2temporal#] (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == id5)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
eventually (id1 <= num1value#)
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( id1 == id2 or not (id3 == id4) -> not fall ((id5 > num1value#) until [num3temporala#:num3temporalb#] (id6 == num2value#)) )
always ( rise (id1 == id2) -> not rise (eventually [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
eventually (id1 == num1value# or rise (id2 == num2value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 >= num2valuea# and id2 < num2valueb#) -> (id3 >= num3value#) since [num5temporala#:num5temporalb#] (rise (id4 >= num4value#)) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
eventually [0:num2temporal#] (rise (id1 > num1value#) or id2 == id3)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( not (id1 == id2) -> (id3 >= num1valuea# and id3 < num1valueb#) and id4 == num2value# )
always ( id1 < num1value# -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> rise (id2 > num2valuea# and id2 < num2valueb#) or rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always [0:num3temporal#] (not (id1 == num1value#) or id2 > num2value#)
always ( once (fall (id1 > num1valuea# and id1 < num1valueb#)) -> once (rise (id2 < num2value#)) )
always ( rise (id1 == num1value#) and not (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 == num1value# and rise (id2 > num2value#) -> id3 == num3value# )
always [0:num3temporal#] (not (id1 == num1value#) and not (id2 == num2value#))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# -> id2 <= num2value# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (not (id3 > num3value#)) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) )
always ( not rise ((id1 >= num1valuea# and id1 <= num1valueb#) since (id2 == id3)) -> not (eventually [0:num3temporal#] (id4 == num2value#)) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (rise (id3 <= num1value#))) )
always ( not (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 < num1value# and not (id2 == num2value#) -> always (eventually [0:num4temporal#] (id3 >= num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> (not rise (id2 == num2value#)) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num1temporal#] (id1 == id2)
always ( not (id1 == id2) -> eventually (always (id3 == id4)) )
always [0:num2temporal#] (id1 < num1value# and id2 == id3)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( id1 == id2 -> id3 > num1valuea# and id3 < num1valueb# )
always [0:num3temporal#] (id1 > num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> not ((not (id2 >= num2valuea# and id2 <= num2valueb#)) until (not (id3 > num3value#))) )
always ( rise (id1 >= num1value#) -> once [num2temporala#:num2temporalb#] (id2 == id3) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( fall (id1 == num1value#) -> (id2 == id3) since [0:num2temporal#] (id4 == id5) )
always ( eventually [0:num1temporal#] (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not (id2 == num2value#) -> eventually (always (not rise (id3 == id4))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( id1 == num1value# -> not ((id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always ( (id1 == id2) since (id3 <= num1value#) -> (id4 > num2valuea# and id4 < num2valueb#) until (fall (id5 == id6)) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and id2 == num2value#)
always ( rise (id1 == num1value#) and id2 == id3 -> id4 == id5 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 >= num2value# )
always ( eventually [0:num2temporal#] (not (id1 < num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( id1 == id2 -> historically [num2temporala#:num2temporalb#] (id3 == num1value#) )
eventually (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always (id1 == id2 and id3 == id4)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 == id2) -> rise (id3 == id4) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (rise (id2 > num2value#))) )
always ( id1 >= num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> eventually (always [0:num2temporal#] (not (id2 == id3))) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 < num1value#) or id2 == num2value# -> id3 >= num3value# )
always ( (id1 > num1valuea# and id1 <= num1valueb#) and fall (id2 == num2value#) -> (id3 > num3value#) since [0:num4temporal#] (id4 == id5) )
always ( not fall (id1 == num1value#) -> not (always (id2 >= num2value#)) )
always ( not ((id1 == num1value#) since [0:num3temporal#] (rise (id2 < num2value#))) -> historically [0:num5temporal#] (not (id3 > num4valuea# and id3 < num4valueb#)) )
always ( fall (once (rise (id1 > num1valuea# and id1 < num1valueb#))) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 <= num2value#)
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 <= num1value# -> id2 == num2value# )
always ( rise (id1 < num1value#) -> not (id2 == id3) and rise (id4 <= num2value#) )
always ( id1 > num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
eventually (id1 <= num1value#)
always (id1 <= num1value#)
always ( id1 == num1value# and id2 < num2value# -> (id3 == num3value#) since [0:num5temporal#] (rise (id4 >= num4valuea# and id4 <= num4valueb#)) )
always ( id1 >= num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( historically (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually [num2temporala#:num2temporalb#] (rise (id3 == id4))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> rise ((id2 < num2value#) until (rise (id3 <= num3value#))) )
always ( id1 < num1value# or id2 < num2value# -> not (historically [0:num4temporal#] (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise ((id1 == num1value#) since [0:num3temporal#] (id2 < num2value#)) -> fall (always (id3 == num4value#)) )
eventually (rise (id1 > num1value#) and rise (id2 >= num2value#))
always ( id1 == id2 or id3 <= num1value# -> id4 > num2value# )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( id1 == id2 -> always (eventually [num2temporala#:num2temporalb#] (id3 > num1value#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( once [0:num2temporal#] (id1 >= num1value#) -> not (always (not fall (id2 > num3value#))) )
eventually [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
eventually (id1 == id2 or id3 == num1value#)
always ( id1 == id2 and id3 <= num1value# -> id4 >= num2value# or id5 == id6 )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( (not rise (id1 >= num1value#)) until [0:num3temporal#] (not (id2 == num2value#)) -> (id3 >= num4valuea# and id3 <= num4valueb#) until (not (id4 >= num5valuea# and id4 <= num5valueb#)) )
always ( not rise (id1 == num1value#) or id2 >= num2value# -> (id3 > num3valuea# and id3 < num3valueb#) or not (id4 == id5) )
always ( id1 >= num1value# or fall (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always [0:num2temporal#] (id1 > num1value#)
always (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 <= num1value#) -> historically [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 <= num2value#))
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 > num2value#) )
eventually [0:num2temporal#] (not (id1 <= num1value#))
eventually [0:num3temporal#] (not (id1 >= num1value#) and fall (id2 == num2value#))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> once (rise (id2 == id3)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> not fall (id2 == num2value#) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> not (id2 >= num2value#) )
eventually [0:num2temporal#] (not (id1 == num1value#))
always [0:num2temporal#] (id1 >= num1value#)
always [0:num2temporal#] (id1 <= num1value#)
eventually (id1 == num1value# or not rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> id3 <= num3value# )
always ( rise (id1 <= num1value#) -> not (id2 <= num2value#) )
always ( historically (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> not (always [0:num2temporal#] (not rise (id2 == id3))) )
eventually [0:num3temporal#] (id1 < num1value# and fall (id2 == num2value#))
always ( rise (id1 < num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 <= num2value#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 > num1valuea# and id1 < num1valueb# -> not ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
eventually (id1 == id2)
eventually (not (id1 <= num1value#) or id2 <= num2value#)
always (not (id1 == id2) or id3 > num1value#)
always ( fall (id1 == id2) -> not (historically [0:num1temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( rise (id1 <= num1value#) -> eventually (always (not (id2 > num2value#))) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
always ( once [0:num2temporal#] (not rise (id1 > num1value#)) -> always (id2 <= num3value#) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) or id2 <= num2value#)
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> eventually (always (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> eventually [num3temporala#:num3temporalb#] (always (id3 == id4)) )
eventually (id1 == id2)
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( once [num1temporala#:num1temporalb#] (fall (id1 == id2)) -> not ((id3 >= num2value#) until (id4 >= num3valuea# and id4 <= num3valueb#)) )
always [0:num2temporal#] (not (id1 == num1value#) or id2 == id3)
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#))
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (id2 == id3) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always (not fall (id1 > num1value#))
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and id2 < num2value#)
always ( id1 < num1value# or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not fall (id3 >= num3value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) and rise (id2 > num2value#) -> not rise ((id3 == num3value#) since [num4temporala#:num4temporalb#] (not (id4 == id5))) )
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 > num2value#) or (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == id2 and id3 == id4 -> eventually (fall (id5 == id6)) )
always (id1 == id2)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (not fall (id2 == num2value#)) since [0:num4temporal#] (not (id3 <= num3value#)) )
always ( id1 == num1value# and id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) and not (id4 == id5) )
eventually (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> once [num3temporala#:num3temporalb#] (id2 < num2value#) )
eventually (rise (id1 < num1value#) or id2 == id3)
always ( id1 == id2 and (id3 > num1valuea# and id3 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 < num2valueb#) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always (eventually [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 == num2value#) )
always ( always (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( rise (id1 <= num1value#) -> always (eventually (rise (id2 >= num2value#))) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 < num2value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 >= num1value#) -> not (id2 < num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually (rise (id3 == num3value#))) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [num4temporala#:num4temporalb#] (eventually (not (id2 < num3value#))) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( id1 < num1value# and not (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
eventually [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( fall (id1 == id2) -> rise (id3 >= num1value#) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (eventually (id3 > num3value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id2 == id3))) )
always ( fall (id1 == num1value#) or rise (id2 < num2value#) -> always [0:num4temporal#] (id3 < num3value#) )
always ( not (once (rise (id1 == id2))) -> not (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always (id1 == id2)
always ( id1 == num1value# and id2 == num2value# -> always (not fall (id3 == id4)) )
always ( id1 <= num1value# and id2 > num2value# -> always [num3temporala#:num3temporalb#] (id3 == id4) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (id3 == num2value#) )
always ( id1 > num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == id2 and id3 == id4 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id5 > num1valuea# and id5 <= num1valueb#))) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num3temporal#] (id1 > num1value# or rise (id2 >= num2value#))
always ( rise (id1 <= num1value#) -> id2 == id3 )
always [0:num2temporal#] (not (id1 > num1value#))
always ( (id1 == num1value#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> (id3 >= num4valuea# and id3 <= num4valueb#) until [0:num5temporal#] (not (id4 == id5)) )
always ( rise (id1 > num1value#) -> not (always (id2 == num2value#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always ( rise (id1 <= num1value#) and rise (id2 <= num2value#) -> not fall (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> once [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> rise (id2 == num2value#) or not fall (id3 == num3value#) )
always ( fall (id1 == id2) -> id3 > num1value# )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 <= num3value# )
always ( rise (id1 <= num1value#) -> fall (historically [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> id2 >= num2value# or rise (id3 <= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( once [num2temporala#:num2temporalb#] (id1 < num1value#) -> not (always [0:num4temporal#] (id2 >= num3value#)) )
always ( once (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( id1 == id2 -> always (eventually [0:num2temporal#] (id3 < num1value#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually (not (id3 == num3value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 <= num2value#)
always ( rise (id1 < num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( fall (id1 == id2) -> eventually (not fall (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 > num1value#) or (id2 > num2valuea# and id2 <= num2valueb#) -> not rise ((not fall (id3 >= num3value#)) until [0:num5temporal#] (rise (id4 == num4value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 == id2 and not fall (id3 > num1value#) -> id4 > num2valuea# and id4 < num2valueb# )
always ( once [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually [0:num4temporal#] (id2 <= num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 >= num2valuea# and id3 <= num2valueb#)) )
always (id1 < num1value# and id2 == id3)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
eventually [0:num3temporal#] (rise (id1 == num1value#) or id2 == num2value#)
always ( id1 > num1value# and id2 == id3 -> not (always [0:num2temporal#] (id4 == id5)) )
always ( fall (once (id1 >= num1value#)) -> (not (id2 == num2value#)) until [0:num4temporal#] (not (id3 > num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
eventually (not fall (id1 == num1value#) or not (id2 == id3))
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( rise (once [0:num2temporal#] (id1 < num1value#)) -> always [0:num4temporal#] (id2 < num3value#) )
always ( id1 >= num1value# -> not (eventually [0:num3temporal#] (rise (id2 <= num2value#))) )
always ( fall (id1 == id2) -> not (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( id1 <= num1value# and id2 == id3 -> always (eventually (fall (id4 == id5))) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 == num1value# -> rise (id2 > num2value#) )
always (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
always ( id1 <= num1value# -> (id2 == id3) since [0:num3temporal#] (id4 == num2value#) )
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always (id3 == id4)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( fall (id1 == id2) -> not ((id3 >= num1value#) until [0:num3temporal#] (id4 >= num2value#)) )
always (id1 < num1value#)
always ( rise (id1 > num1value#) -> (id2 > num2value#) since [0:num4temporal#] (not fall (id3 == num3value#)) )
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> eventually [0:num3temporal#] (id5 > num2value#) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> once [0:num4temporal#] (not rise (id2 > num3value#)) )
always ( not (once [0:num2temporal#] (id1 <= num1value#)) -> not ((not rise (id2 > num3valuea# and id2 < num3valueb#)) until [0:num5temporal#] (rise (id3 > num4value#))) )
always [0:num2temporal#] (not (id1 > num1value#))
always ( (not (id1 >= num1value#)) since [0:num3temporal#] (fall (id2 == num2value#)) -> eventually [0:num5temporal#] (rise (id3 > num4valuea# and id3 < num4valueb#)) )
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#))
always [0:num2temporal#] (not (id1 >= num1value#))
always ( id1 <= num1value# and id2 > num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> (id2 == id3) until [0:num4temporal#] (not (id4 >= num3valuea# and id4 <= num3valueb#)) )
always (id1 > num1value# and id2 == num2value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 <= num1value#) -> not (id2 >= num2value#) or not fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( fall (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# and id2 <= num2value# -> (id3 <= num3value#) since [0:num5temporal#] (id4 > num4value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> eventually (always [num4temporala#:num4temporalb#] (not (id3 < num3value#))) )
always ( not (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( always (id1 == id2) -> not (always [0:num1temporal#] (id3 == id4)) )
always ( (id1 == num1value#) since (id2 == id3) -> always [num3temporala#:num3temporalb#] (not (id4 <= num2value#)) )
always ( id1 <= num1value# -> eventually (rise (id2 > num2value#)) )
eventually (id1 == num1value# and rise (id2 == num2value#))
always ( rise (id1 > num1value#) -> fall (historically [num3temporala#:num3temporalb#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( (id1 == id2) since (not (id3 == num1value#)) -> (id4 <= num2value#) since (id5 == num3value#) )
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) and not (id2 < num2value#))
always ( (id1 == num1value#) since (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( (not fall (id1 >= num1valuea# and id1 <= num1valueb#)) since [num3temporala#:num3temporalb#] (id2 >= num2value#) -> not (once (id3 == id4)) )
always ( not (always [0:num2temporal#] (id1 <= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
eventually (id1 == num1value#)
always [0:num1temporal#] (id1 == id2)
always ( always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 < num3value#)) until [0:num4temporal#] (rise (id3 == id4)) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 == id2 or id3 >= num1value# -> (id4 > num2value#) until [0:num3temporal#] (fall (id5 == id6)) )
always ( (not (id1 == id2)) since (rise (id3 == id4)) -> eventually [0:num2temporal#] (id5 >= num1valuea# and id5 <= num1valueb#) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always (id1 == num1value# and id2 > num2value#)
always ( once [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> always (eventually [num4temporala#:num4temporalb#] (rise (id2 > num3value#))) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 < num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) or id3 == num3value# )
eventually [0:num2temporal#] (not (id1 <= num1value#))
always ( not (id1 < num1value#) and id2 == id3 -> (id4 == id5) until (id6 >= num2valuea# and id6 <= num2valueb#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( id1 == num1value# -> always (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (id1 < num1value#) or id2 == num2value# -> id3 == id4 )
always ( not (id1 < num1value#) or id2 == id3 -> (not (id4 <= num2value#)) until [0:num3temporal#] (id5 == id6) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
eventually [0:num2temporal#] (not fall (id1 == num1value#))
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) or id3 == num3value# )
always ( (id1 == num1value#) until [num3temporala#:num3temporalb#] (id2 < num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
eventually (rise (id1 > num1value#))
always ( id1 > num1value# and id2 == num2value# -> eventually [0:num3temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [0:num3temporal#] (rise (id1 == num1value#) and rise (id2 >= num2value#))
always ( rise (id1 > num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) and id2 == num2value# -> id3 >= num3value# )
always ( id1 < num1value# -> (id2 == num2value#) until [0:num4temporal#] (id3 > num3value#) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# and id2 == id3 -> rise (id4 > num2value#) and id5 == num3value# )
always ( historically [0:num2temporal#] (id1 > num1value#) -> not ((id2 > num3value#) until (id3 >= num4value#)) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always ( (id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3 -> rise (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( not (id1 <= num1value#) or not (id2 <= num2value#) -> eventually (always (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> not ((id2 <= num2value#) since (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num3temporal#] (not (id1 > num1value#) and id2 == num2value#)
always ( fall (id1 == num1value#) -> (not fall (id2 == num2value#)) until (rise (id3 < num3value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) or rise (id2 > num2value#) -> (id3 == id4) until [0:num3temporal#] (not (id5 == id6)) )
always ( once [0:num2temporal#] (id1 > num1value#) -> rise (eventually [num4temporala#:num4temporalb#] (not fall (id2 >= num3value#))) )
always ( rise (id1 >= num1value#) -> rise (id2 <= num2value#) and id3 == num3value# )
eventually [num2temporala#:num2temporalb#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always (id1 == id2)
always ( fall (id1 == id2) -> id3 == id4 )
always ( (id1 == num1value#) since [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 >= num4value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
eventually [0:num1temporal#] (not (id1 == id2))
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 > num2value#)) until [0:num4temporal#] (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 < num1value# -> id2 <= num2value# )
always ( id1 == num1value# -> fall (id2 > num2valuea# and id2 < num2valueb#) or (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == id2) -> not (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1value#) since [num2temporala#:num2temporalb#] (id2 == id3) -> not (eventually (fall (id4 >= num3valuea# and id4 <= num3valueb#))) )
eventually (id1 == id2)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# or rise (id3 > num3value#) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> id3 < num3value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# and id2 >= num2value# -> eventually (always (not (id3 >= num3value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id3 > num1value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) or rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 -> always (eventually [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( not (id1 == num1value#) or id2 <= num2value# -> id3 >= num3value# )
always (id1 == id2)
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise ((id2 < num2value#) until [num4temporala#:num4temporalb#] (not (id3 == num3value#))) )
always ( rise (id1 == num1value#) -> rise (id2 < num2value#) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 < num1value#) -> id2 == num2value# and id3 == num3value# )
always ( historically (id1 == num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always (not (id1 == num1value#))
always (id1 > num1value# and id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 > num1value# -> rise (id2 <= num2value#) )
eventually (id1 < num1value#)
always [0:num2temporal#] (not fall (id1 >= num1value#) and id2 == id3)
always [0:num2temporal#] (id1 <= num1value#)
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( not fall (id1 == id2) and rise (id3 > num1valuea# and id3 < num1valueb#) -> id4 >= num2value# )
always ( rise (id1 > num1value#) and not rise (id2 == id3) -> id4 < num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 and not (id3 == num1value#) -> always [0:num3temporal#] (not fall (id4 >= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 < num2value#) until [num4temporala#:num4temporalb#] (rise (id3 >= num3value#))) )
always ( (id1 <= num1value#) until [num3temporala#:num3temporalb#] (id2 == num2value#) -> (id3 <= num4value#) since [0:num6temporal#] (id4 < num5value#) )
always ( (id1 <= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2value#) -> not rise ((not fall (id3 >= num4value#)) until (id4 == id5)) )
always ( id1 > num1value# -> rise (id2 < num2value#) )
eventually (id1 <= num1value# and id2 == id3)
always ( id1 <= num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (rise (id2 > num2value#))) )
always ( rise (id1 <= num1value#) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (not fall (id3 > num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (not (id1 > num1value#))
always ( fall (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (not (id2 == id3))) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (fall (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (rise (id3 == num1value#)) )
always ( id1 == num1value# -> (id2 == num2value#) until (id3 == id4) )
eventually [0:num1temporal#] (rise (id1 == id2))
always (id1 < num1value# or id2 == num2value#)
always ( id1 == id2 -> rise (id3 >= num1value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 == id3 or not (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (always (id2 < num2value#)) )
always (id1 == id2 and id3 < num1value#)
always (id1 >= num1value# and id2 < num2value#)
always (id1 >= num1value# or id2 == id3)
always (id1 == num1value#)
always ( historically [num2temporala#:num2temporalb#] (not (id1 > num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 < num3value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 == num2value#) and rise (id3 >= num3value#) )
always ( rise (id1 == num1value#) and id2 < num2value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (id2 >= num2value#) )
always ( id1 == num1value# -> not (id2 == num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not (id1 > num1value#) or id2 <= num2value# -> not fall ((id3 == num3value#) until [num4temporala#:num4temporalb#] (not (id4 == id5))) )
always (id1 >= num1value#)
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (always (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == id2) -> rise ((id3 == num1value#) until [num2temporala#:num2temporalb#] (id4 == id5)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
eventually [num3temporala#:num3temporalb#] (not (id1 == num1value#) or id2 == num2value#)
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) since [num3temporala#:num3temporalb#] (rise (id4 < num2value#)) )
always ( (not (id1 <= num1value#)) since (id2 == id3) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( id1 == id2 and rise (id3 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id3 >= num1valuea# and id3 < num1valueb#))) )
always [0:num2temporal#] (id1 < num1value#)
always [0:num2temporal#] (id1 == id2 or not fall (id3 > num1valuea# and id3 < num1valueb#))
always ( id1 > num1value# and not (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( id1 > num1value# and not (id2 >= num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id3 == id4))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) and rise (id3 <= num3value#) )
always ( rise (id1 > num1value#) -> eventually (id2 == num2value#) )
always ( once [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#)) -> not ((id2 == id3) until (id4 == num3value#)) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 > num1value#)) -> once [0:num3temporal#] (rise (id2 == id3)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall ((not (id1 < num1value#)) until [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) -> historically [0:num5temporal#] (id3 < num4value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 < num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (fall (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( id1 < num1value# -> id2 <= num2value# )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( id1 == id2 -> id3 > num1value# )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id3 <= num2value#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not ((id2 == num2value#) until (id3 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 == num1value# and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 == id3)) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (not (id3 < num1value#)) )
always ( id1 >= num1value# or id2 > num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always ( id1 > num1value# -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually (rise (id3 >= num3value#))) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 > num2value#)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 > num1value# and rise (id2 > num2value#) -> once [0:num3temporal#] (id3 == id4) )
always ( fall (id1 == num1value#) -> (id2 == id3) until (not (id4 >= num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 < num1value#) -> fall (always (id2 < num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( once [0:num2temporal#] (id1 == num1value#) -> always [num4temporala#:num4temporalb#] (id2 > num3value#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always (id1 == num1value# and id2 >= num2value#)
always (id1 == num1value#)
eventually [0:num3temporal#] (id1 >= num1value# or id2 == num2value#)
always ( id1 < num1value# or id2 < num2value# -> rise (id3 == num3value#) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( not (id1 == id2) and id3 == num1value# -> rise (id4 == id5) )
eventually [0:num1temporal#] (id1 == id2)
always ( once [0:num2temporal#] (id1 == num1value#) -> always (id2 > num3value#) )
always ( id1 < num1value# and not (id2 >= num2valuea# and id2 < num2valueb#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( fall (id1 == num1value#) -> historically (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( id1 == id2 and id3 == id4 -> id5 == num1value# )
always ( id1 > num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( (not fall (id1 > num1valuea# and id1 < num1valueb#)) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (rise (id3 >= num4valuea# and id3 < num4valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually [0:num3temporal#] (id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until (not rise (id3 == id4)) )
always ( id1 > num1value# or id2 >= num2value# -> id3 < num3value# )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 > num1value# and id2 > num2value# -> (id3 >= num3value#) until [0:num4temporal#] (id4 == id5) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#))
always ( once [0:num2temporal#] (not (id1 <= num1value#)) -> (id2 <= num3value#) until (id3 == id4) )
always [0:num3temporal#] (id1 >= num1value# and not (id2 == num2value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> eventually [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always (id1 == id2)
always (id1 == id2 and not rise (id3 > num1value#))
always ( id1 >= num1value# -> (id2 < num2value#) until (id3 <= num3value#) )
always ( id1 < num1value# and id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (not (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always [0:num2temporal#] (id1 <= num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( not fall (id1 > num1value#) or rise (id2 > num2value#) -> eventually [0:num4temporal#] (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( (id1 == id2) since [0:num1temporal#] (not (id3 == id4)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id5 >= num2value#)) )
always ( fall (id1 == id2) -> eventually (always (id3 >= num1value#)) )
always [0:num2temporal#] (not (id1 > num1value#))
eventually (id1 >= num1value# and id2 == id3)
always ( once [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id2 > num3valuea# and id2 < num3valueb#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( id1 <= num1value# and id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( rise (id1 > num1value#) -> not rise (id2 == id3) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 < num1valueb#))
always ( id1 == num1value# and not (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num3temporala#:num3temporalb#] (id3 == id4) )
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) or id2 >= num2value#)
always ( rise (id1 < num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> not (id3 == id4) )
always ( not rise (id1 == id2) and rise (id3 < num1value#) -> id4 >= num2valuea# and id4 <= num2valueb# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (not (id3 < num1value#)) )
always ( id1 == num1value# and not (id2 == id3) -> always [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 == num1value#) and not (id2 < num2value#) -> rise (id3 > num3value#) and fall (id4 > num4valuea# and id4 < num4valueb#) )
eventually (rise (id1 > num1value#) or id2 < num2value#)
always ( fall (id1 == id2) -> not (once [num2temporala#:num2temporalb#] (not (id3 > num1value#))) )
always ( rise (id1 < num1value#) -> (id2 > num2value#) until [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
eventually [0:num3temporal#] (id1 == num1value# or fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#) -> always (eventually (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 >= num2value#)
eventually ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#))
always ( not rise (id1 == id2) -> id3 <= num1value# and id4 == num2value# )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 > num3value# )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
eventually (fall (id1 == id2))
always ( rise (id1 < num1value#) -> (id2 == id3) until (id4 < num2value#) )
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always [0:num3temporal#] (id1 > num1value# or id2 < num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( id1 == num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id3 == id4))) )
always (id1 > num1value#)
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 <= num3value#))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 < num1value#) -> not (id2 > num2value#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) and id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) since [num5temporala#:num5temporalb#] (id4 >= num4value#) )
always ( id1 == num1value# or id2 >= num2value# -> id3 <= num3value# and not (id4 < num4value#) )
always (id1 > num1value# and id2 <= num2value#)
eventually [0:num2temporal#] (id1 <= num1value#)
always ( (id1 < num1value#) since [0:num2temporal#] (id2 == id3) -> eventually (id4 <= num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( not ((id1 < num1value#) since (rise (id2 <= num2value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
eventually (id1 == id2 or id3 == num1value#)
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 <= num2value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (not (id1 < num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually (fall (id1 == num1value#) and (id2 > num2valuea# and id2 <= num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( not (once [num2temporala#:num2temporalb#] (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 <= num3value#))) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( (not (id1 > num1valuea# and id1 <= num1valueb#)) since (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num3temporal#] (id3 == id4) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 == id2) -> always (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( once [0:num2temporal#] (rise (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( id1 == num1value# and rise (id2 == num2value#) -> rise (id3 > num3valuea# and id3 < num3valueb#) and (id4 > num4valuea# and id4 < num4valueb#) )
always ( (not fall (id1 >= num1value#)) until (not (id2 < num2value#)) -> (id3 == num3value#) since [num5temporala#:num5temporalb#] (id4 >= num4value#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually (rise (id2 == id3))) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not (id2 >= num2value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == id3))) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( not (once [0:num2temporal#] (not (id1 < num1value#))) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( rise (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 == id2) -> not (id3 == num1value#) )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually (id1 == id2 or id3 <= num1value#)
always ( id1 == num1value# and id2 == id3 -> not ((id4 > num2valuea# and id4 <= num2valueb#) until [num4temporala#:num4temporalb#] (fall (id5 > num3valuea# and id5 < num3valueb#))) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) or id4 > num2value# )
always ( id1 > num1value# -> id2 >= num2value# )
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 < num2value#) -> not (always [0:num4temporal#] (id3 == num3value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (not (id2 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> (not (id3 == num3value#)) since [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 == id2) -> rise (id3 > num1valuea# and id3 < num1valueb#) and id4 == id5 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [0:num4temporal#] (not (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( id1 > num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( id1 == num1value# and id2 < num2value# -> eventually (always (id3 >= num3value#)) )
always ( fall (id1 == id2) -> eventually (always [0:num1temporal#] (id3 == id4)) )
always ( id1 < num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 <= num1value#) -> rise ((id2 == num2value#) until [0:num4temporal#] (id3 > num3value#)) )
always ( id1 == num1value# and id2 < num2value# -> always (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 <= num1value# and rise (id2 > num2value#) -> id3 == id4 )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always (id3 >= num1value#)) )
always ( id1 == num1value# or rise (id2 < num2value#) -> always [0:num4temporal#] (id3 > num3value#) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 <= num2value#)
always ( eventually [0:num1temporal#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (not (id3 < num2value#)) )
always ( rise (id1 == num1value#) -> always (eventually (id2 == id3)) )
always ( id1 == id2 and id3 <= num1value# -> id4 < num2value# or rise (id5 > num3value#) )
eventually [0:num2temporal#] (not fall (id1 > num1value#) or not (id2 == id3))
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 == num1value# -> not fall (id2 > num2value#) and rise (id3 == num3value#) )
always ( id1 == num1value# -> id2 <= num2value# and id3 > num3value# )
always ( id1 == num1value# and id2 == id3 -> always (id4 >= num2valuea# and id4 <= num2valueb#) )
always [num1temporala#:num1temporalb#] (not fall (id1 == id2))
always ( id1 == id2 and id3 >= num1value# -> always [0:num3temporal#] (not (id4 < num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always [num1temporala#:num1temporalb#] (not fall (id1 == id2))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1value#) )
always [0:num3temporal#] (not (id1 < num1value#) or id2 <= num2value#)
eventually [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( not rise (eventually [0:num2temporal#] (id1 == num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always (id1 <= num1value#)
always ( fall (id1 == num1value#) -> always (eventually (rise (id2 == num2value#))) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not rise (id3 >= num3value#))) )
always ( historically [0:num2temporal#] (not (id1 >= num1value#)) -> always [num4temporala#:num4temporalb#] (eventually (rise (id2 >= num3value#))) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# or rise (id4 == num4value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always (id2 == id3) )
always ( once (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 < num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# -> (not (id2 == num2value#)) until (rise (id3 == id4)) )
always ( id1 <= num1value# or id2 == num2value# -> id3 == num3value# )
always [0:num2temporal#] (id1 >= num1value# or not fall (id2 == id3))
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always ( always [0:num2temporal#] (id1 == num1value#) -> (id2 >= num3valuea# and id2 <= num3valueb#) until (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( fall (id1 == id2) -> always (eventually [0:num1temporal#] (id3 == id4)) )
always [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always [0:num2temporal#] (id1 >= num1value#)
always ( (id1 < num1value#) since [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) -> always [num5temporala#:num5temporalb#] (id3 <= num4value#) )
always ( id1 == num1value# and id2 <= num2value# -> fall (always (not rise (id3 == id4))) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and not rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 < num3value#)) )
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( fall (id1 == num1value#) -> id2 < num2value# or id3 == num3value# )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1value#) -> (id2 == id3) until [num4temporala#:num4temporalb#] (id4 > num3valuea# and id4 < num3valueb#) )
always ( id1 == id2 and id3 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 == num2value#))) )
always ( rise (id1 == num1value#) -> id2 < num2value# or id3 == num3value# )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) or not rise (id2 > num2value#) -> not fall (eventually [0:num4temporal#] (not (id3 == num3value#))) )
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 > num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> not (id2 < num2value#) and id3 < num3value# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) until [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num5temporala#:num5temporalb#] (eventually [0:num6temporal#] (rise (id3 < num4value#))) )
always ( not (id1 < num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id3 == num3value#))) )
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value#)
eventually [0:num3temporal#] (fall (id1 == num1value#) and id2 == num2value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> once [0:num4temporal#] (id3 > num3value#) )
always ( fall (id1 == num1value#) -> not ((id2 == num2value#) since (rise (id3 > num3value#))) )
always ( rise (id1 > num1value#) or id2 == id3 -> not (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 == id2 and id3 == num1value# -> (id4 <= num2value#) until [num4temporala#:num4temporalb#] (id5 > num3valuea# and id5 < num3valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( eventually [0:num2temporal#] (id1 > num1value#) -> (id2 == num3value#) since (id3 > num4valuea# and id3 < num4valueb#) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> id3 > num3value# )
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> not ((id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (id4 == num4value#)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( not rise (id1 == id2) -> not fall (id3 > num1value#) )
always ( rise (id1 >= num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( id1 < num1value# or id2 <= num2value# -> eventually (id3 == num3value#) )
always ( rise (id1 == id2) -> id3 == id4 and id5 <= num1value# )
always ( rise (id1 == num1value#) -> not rise (historically (id2 < num2value#)) )
always (id1 > num1valuea# and id1 < num1valueb#)
always (id1 == id2 and not (id3 > num1value#))
always ( fall (id1 == id2) -> id3 == num1value# or fall (id4 >= num2valuea# and id4 < num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 > num2value#)
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( (id1 <= num1value#) since [num2temporala#:num2temporalb#] (id2 == id3) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id4 <= num3value#)) )
always ( id1 == id2 -> id3 < num1value# )
always (id1 == num1value# or id2 <= num2value#)
always ( rise (id1 > num1value#) or id2 == num2value# -> not (always [0:num4temporal#] (id3 == num3value#)) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> id3 >= num3value# )
always ( rise (id1 == id2) -> fall (id3 == num1value#) )
always ( rise (id1 == id2) -> not (once (id3 == num1value#)) )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 > num1value# and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always (id3 == num3value#)) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> eventually (always (id2 == id3)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (rise (id2 == num2value#)) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 == id4))) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> id3 < num3value# )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 == id2) -> id3 >= num1value# )
eventually [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always [0:num2temporal#] (id1 == id2 and not (id3 > num1value#))
always ( rise (id1 == num1value#) or id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 < num2value#))
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( eventually (rise (id1 < num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1value#) -> always (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 == id4) )
always ( rise (historically (id1 >= num1valuea# and id1 <= num1valueb#)) -> always (eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 == id2) -> not (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
eventually [num2temporala#:num2temporalb#] (id1 < num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 <= num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always (id1 > num1value#)
eventually (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (rise (id2 >= num2value#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (not (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( id1 <= num1value# and not (id2 <= num2value#) -> id3 == id4 or (id5 > num3valuea# and id5 < num3valueb#) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( id1 == id2 -> (not (id3 == num1value#)) until (rise (id4 == num2value#)) )
always [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 -> eventually [0:num2temporal#] (not fall (id3 > num1value#)) )
eventually (id1 == num1value#)
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
eventually (id1 == id2 and rise (id3 > num1valuea# and id3 <= num1valueb#))
always (id1 < num1value# or id2 > num2value#)
always ( rise (id1 == num1value#) -> not rise ((not (id2 == num2value#)) until [num4temporala#:num4temporalb#] (rise (id3 >= num3value#))) )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( historically (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> id4 > num2valuea# and id4 < num2valueb# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( id1 == num1value# or not (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always [0:num2temporal#] (id1 == id2 or not (id3 > num1value#))
always ( rise (id1 < num1value#) -> (id2 > num2value#) until (id3 >= num3valuea# and id3 < num3valueb#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not (once [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (id1 == id2 or id3 < num1value#)
always ( rise (id1 == id2) -> not (id3 == id4) and id5 == id6 )
always ( id1 == id2 -> not fall (always [0:num2temporal#] (id3 == num1value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) or (id2 >= num2valuea# and id2 < num2valueb#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == id2 -> rise (id3 == num1value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
eventually (not fall (id1 == id2) or id3 >= num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 <= num2value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 >= num1value# and id2 < num2value# -> not ((id3 == num3value#) since [num5temporala#:num5temporalb#] (id4 == num4value#)) )
eventually (id1 == num1value# and id2 < num2value#)
always ( rise (id1 > num1value#) -> fall (id2 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since (id2 <= num2value#) -> not fall (always [num4temporala#:num4temporalb#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 == id2) -> id3 < num1value# )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> always (eventually [0:num3temporal#] (rise (id2 == num2value#))) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 <= num1value# and id2 < num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> not ((id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 <= num2value#))) )
eventually (id1 == id2 and id3 == id4)
always (id1 == id2)
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> (not (id2 <= num3value#)) since [num5temporala#:num5temporalb#] (id3 >= num4value#) )
eventually [0:num2temporal#] (not (id1 == id2) and id3 >= num1value#)
always ( id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> not fall (once [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always (id1 > num1value# and id2 == num2value#)
always ( id1 == num1value# -> rise ((id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == id4)) )
always ( rise (id1 >= num1value#) -> not (id2 >= num2value#) or not (id3 <= num3value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( id1 <= num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 < num2value#))) )
eventually [0:num3temporal#] (id1 < num1value# and rise (id2 >= num2valuea# and id2 < num2valueb#))
eventually [0:num1temporal#] (fall (id1 == id2))
always ( not (once [0:num2temporal#] (rise (id1 > num1value#))) -> eventually [0:num4temporal#] (id2 == num3value#) )
always ( id1 >= num1value# and id2 == num2value# -> (id3 >= num3value#) until [0:num5temporal#] (id4 >= num4value#) )
always ( id1 == id2 -> always [num1temporala#:num1temporalb#] (eventually (not (id3 == id4))) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 >= num1value# -> id2 == id3 )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> fall (id2 == num2value#) and rise (id3 <= num3value#) )
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
always ( not (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#) -> always [0:num2temporal#] (id4 == id5) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (not (id2 < num2value#))) )
always ( id1 > num1value# or rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or not fall (id2 == num2value#) -> id3 < num3value# )
eventually (id1 > num1value#)
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 > num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 >= num1value#) )
always ( (not (id1 == id2)) since [num2temporala#:num2temporalb#] (not (id3 == num1value#)) -> (id4 < num3value#) until [num4temporala#:num4temporalb#] (not (id5 == id6)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) until [0:num4temporal#] (rise (id3 > num3value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [0:num3temporal#] (id1 <= num1value# or id2 > num2value#)
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> rise (id2 == id3) )
always ( not (historically [0:num2temporal#] (not (id1 < num1value#))) -> eventually [num3temporala#:num3temporalb#] (always (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (not (id3 == id4))) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always (not fall (id1 == num1value#) and not (id2 <= num2value#))
always [0:num2temporal#] (not (id1 == num1value#))
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> always (id2 >= num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> fall (id2 == id3) )
always (id1 == num1value# and id2 < num2value#)
always ( rise (id1 >= num1value#) -> historically (not (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# and id2 <= num2value# -> id3 >= num3value# )
always [0:num2temporal#] (id1 >= num1value#)
always [0:num2temporal#] (id1 < num1value#)
always ( fall ((id1 == num1value#) since [0:num3temporal#] (fall (id2 == num2value#))) -> (id3 >= num4value#) until [num6temporala#:num6temporalb#] (rise (id4 <= num5value#)) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( (id1 <= num1value#) since [0:num3temporal#] (fall (id2 >= num2valuea# and id2 < num2valueb#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 <= num4value#)) )
always (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( once [num2temporala#:num2temporalb#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 <= num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 <= num1value#) and id2 >= num2value# -> id3 == id4 )
always (id1 >= num1value# or id2 == id3)
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 == num2value#) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( fall (id1 == id2) -> not (id3 >= num1value#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 == id2) -> (id3 < num1value#) until (id4 == num2value#) )
always ( fall (id1 == id2) -> eventually (fall (id3 == id4)) )
always ( id1 == num1value# -> fall ((id2 >= num2value#) since [0:num4temporal#] (id3 < num3value#)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> always (not (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( fall (id1 == num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always (not (id1 > num1value#) or id2 == num2value#)
eventually [0:num3temporal#] (rise (id1 > num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
eventually [0:num3temporal#] (not (id1 == num1value#) and id2 == num2value#)
always ( id1 == id2 or rise (id3 == num1value#) -> not rise ((id4 >= num2value#) since [0:num3temporal#] (not (id5 == id6))) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( rise (id1 > num1value#) -> always (eventually [num2temporala#:num2temporalb#] (fall (id2 == id3))) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) until [0:num3temporal#] (rise (id4 < num2value#)) )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) until (id2 > num2valuea# and id2 <= num2valueb#) -> (id3 >= num3value#) until [0:num5temporal#] (id4 > num4value#) )
always ( fall (id1 == id2) -> (id3 == num1value#) until [num2temporala#:num2temporalb#] (id4 == id5) )
always [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 > num1value# and not (id2 == id3))
always [0:num3temporal#] (id1 <= num1value# and id2 <= num2value#)
always ( id1 <= num1value# or (id2 > num2valuea# and id2 <= num2valueb#) -> eventually (always (id3 == id4)) )
always (id1 == num1value#)
eventually (id1 >= num1value# and not (id2 < num2value#))
always [0:num2temporal#] (id1 < num1value#)
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( id1 > num1value# and rise (id2 == num2value#) -> historically [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> id3 == id4 or fall (id5 >= num1valuea# and id5 <= num1valueb#) )
always ( id1 == num1value# and id2 <= num2value# -> id3 == id4 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (rise (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 >= num2value#))
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (not rise (id3 == id4)) )
always (id1 <= num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 <= num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> once (id3 > num3value#) )
always ( rise (id1 == num1value#) or rise (id2 >= num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num2temporal#] (fall (id2 == id3)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id4 == num3value#)) )
always ( once [0:num2temporal#] (id1 < num1value#) -> (not fall (id2 == num3value#)) until [0:num5temporal#] (rise (id3 < num4value#)) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (id3 == id4) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 >= num1value# or not (id2 > num2value#) -> eventually (rise (id3 == id4)) )
always ( not fall (id1 == num1value#) or not (id2 == id3) -> always [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 <= num2valueb#) )
always [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not rise (id2 == id3))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( historically (id1 == id2) -> not fall (once [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 <= num1value# -> (id2 > num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually (id1 > num1value#)
always ( once [0:num2temporal#] (rise (id1 >= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 )
eventually [0:num3temporal#] (rise (id1 == num1value#) and fall (id2 == num2value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
eventually (rise (id1 == id2))
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (not (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( historically [0:num1temporal#] (id1 == id2) -> not rise (once (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (fall (id2 == id3)) )
always ( fall (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [0:num2temporal#] (not (id3 == id4))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num2temporal#] (always (not (id2 == id3))) )
always ( rise (id1 == id2) -> not ((id3 < num1value#) until [0:num3temporal#] (id4 == num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == id2) -> not fall ((id3 >= num1value#) until [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always ( id1 > num1value# -> always (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == id2 and rise (id3 >= num1value#) -> not (id4 == id5) )
always ( once (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
eventually (id1 > num1value# and id2 > num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#) and id2 == id3)
always [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> id3 < num3value# )
always ( rise (id1 == id2) -> id3 == id4 )
always ( id1 >= num1value# -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 < num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always [0:num2temporal#] (id1 <= num1value# and not (id2 == id3))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == num1value# and id2 > num2value# -> always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( not (historically [0:num1temporal#] (id1 == id2)) -> always [num3temporala#:num3temporalb#] (id3 <= num2value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always [0:num3temporal#] (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 -> not (eventually (id3 >= num1value#)) )
always ( fall (id1 == id2) -> fall (id3 == num1value#) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> not ((id3 == num3value#) until [0:num4temporal#] (id4 == id5)) )
always ( rise (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> id3 < num1value# or (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 == num1value#) and id2 <= num2value# -> historically [num3temporala#:num3temporalb#] (id3 == id4) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 == id2 or rise (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (id4 > num2value#) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> eventually (id2 <= num2value#) )
always ( fall (id1 == id2) -> not (always [num1temporala#:num1temporalb#] (id3 == id4)) )
always [num2temporala#:num2temporalb#] (id1 == id2 and not fall (id3 == num1value#))
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
eventually (id1 <= num1value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> id2 == num2value# and id3 == id4 )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 > num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( not fall (historically (id1 > num1valuea# and id1 < num1valueb#)) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always (id1 == id2 or not fall (id3 > num1value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always [0:num3temporal#] (id1 == num1value# or not (id2 < num2value#))
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> id2 < num2value# )
always ( fall (id1 == num1value#) or not rise (id2 == num2value#) -> (id3 == num3value#) until [num5temporala#:num5temporalb#] (rise (id4 > num4valuea# and id4 < num4valueb#)) )
eventually [0:num3temporal#] (id1 >= num1value# or rise (id2 <= num2value#))
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 -> always [0:num1temporal#] (id3 == id4) )
always (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( (id1 < num1value#) since [0:num2temporal#] (id2 == id3) -> once [num3temporala#:num3temporalb#] (rise (id4 == id5)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( id1 > num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 == num2value#))) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 and rise (id3 < num1value#) -> not ((id4 == num2value#) until [0:num3temporal#] (fall (id5 == id6))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( id1 == id2 -> id3 == id4 )
always ( not fall (id1 > num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
always [0:num3temporal#] (id1 > num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> not ((not fall (id2 >= num2valuea# and id2 <= num2valueb#)) until (id3 >= num3valuea# and id3 <= num3valueb#)) )
always (id1 > num1value#)
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> rise (id2 >= num2value#) or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == id2) -> not rise (historically [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> (id3 < num1value#) until [0:num3temporal#] (id4 < num2value#) )
always ( eventually [0:num2temporal#] (rise (id1 > num1value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> fall (id2 == id3) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num2temporal#] (not rise (id1 > num1value#))
always ( rise (id1 == num1value#) -> id2 < num2value# )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 == num1value# and id2 == id3 -> always (id4 == id5) )
always (not fall (id1 == id2) or id3 == num1value#)
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1value#) and id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( not rise (id1 == num1value#) and id2 >= num2value# -> always (eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always [0:num2temporal#] (not (id1 <= num1value#))
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( fall (id1 == id2) -> always (eventually [0:num1temporal#] (rise (id3 == id4))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not rise (id2 >= num2value#) )
eventually (id1 <= num1value# or (id2 >= num2valuea# and id2 < num2valueb#))
always ( not ((id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#)) -> fall (always (id3 > num4value#)) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
eventually (id1 <= num1value# or id2 == id3)
always ( fall (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 <= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( id1 > num1value# and not (id2 >= num2value#) -> id3 >= num3value# and id4 == num4value# )
always ( fall ((not (id1 == id2)) since [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) -> not rise ((not (id4 > num3valuea# and id4 <= num3valueb#)) until (id5 == num4value#)) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 > num2value#)
always (id1 == num1value#)
always ( rise (id1 < num1value#) -> historically [num2temporala#:num2temporalb#] (id2 == id3) )
always ( fall (id1 == id2) -> id3 <= num1value# and id4 <= num2value# )
always ( rise (id1 == id2) -> always (not (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 == id2) -> eventually (id3 >= num1value#) )
always ( rise (id1 == num1value#) and not (id2 <= num2value#) -> once (rise (id3 == num3value#)) )
always ( not (once (rise (id1 > num1value#))) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> always (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( id1 == num1value# -> not (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 == num1value#) -> always (eventually [0:num2temporal#] (rise (id2 == id3))) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise ((id2 >= num2value#) until (rise (id3 == num3value#))) )
always ( id1 <= num1value# and rise (id2 >= num2value#) -> id3 == id4 )
always ( id1 <= num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3valuea# and id3 < num3valueb#)) )
eventually (id1 == num1value# and id2 == num2value#)
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == id2) -> not fall (id3 == num1value#) )
always ( id1 >= num1value# and id2 <= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 == id5 )
always [0:num2temporal#] (id1 == num1value#)
always ( not fall (historically (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( rise (id1 == id2) -> historically [num1temporala#:num1temporalb#] (not (id3 == id4)) )
always ( rise (always (not (id1 > num1valuea# and id1 < num1valueb#))) -> always [0:num3temporal#] (not (id2 > num2value#)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always [num3temporala#:num3temporalb#] (not fall (id1 > num1value#) and id2 == num2value#)
always ( id1 == id2 and rise (id3 > num1value#) -> id4 == id5 and (id6 >= num2valuea# and id6 <= num2valueb#) )
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num2temporal#] (not fall (id1 >= num1value#) or id2 == id3)
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 == num1value#) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always ( not (always [num2temporala#:num2temporalb#] (id1 < num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == id3)) )
always [0:num2temporal#] (not (id1 < num1value#))
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually (fall (id2 == num3value#))) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( id1 >= num1value# -> not (id2 > num2value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id3 <= num1value#))) )
eventually (id1 >= num1value# or rise (id2 == num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 > num1value# -> not (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) and id2 <= num2value# -> (id3 == id4) since [0:num4temporal#] (rise (id5 <= num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually (rise (id1 > num1valuea# and id1 <= num1valueb#))
always ( not (once (fall (id1 == num1value#))) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always (id1 == id2)
always ( id1 < num1value# -> id2 == id3 )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> id2 >= num2value# )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 > num1value# or rise (id2 >= num2value#) -> eventually (always [0:num4temporal#] (id3 < num3value#)) )
always ( rise (id1 == num1value#) -> not (id2 > num2value#) )
always ( rise (id1 == id2) -> id3 < num1value# or id4 <= num2value# )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num2temporal#] (id2 == id3) -> eventually (always [num4temporala#:num4temporalb#] (not fall (id4 > num3valuea# and id4 < num3valueb#))) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> id2 >= num2value# and id3 == id4 )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always (id1 == num1value#)
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (eventually (rise (id2 == id3))) )
always (not fall (id1 == id2) and id3 == num1value#)
always ( once [0:num2temporal#] (id1 == num1value#) -> rise ((id2 >= num3value#) until (rise (id3 < num4value#))) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( fall (id1 == num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 >= num2value#) )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until [0:num3temporal#] (not rise (id3 == id4)) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually (rise (id1 < num1value#) and id2 <= num2value#)
always ( fall (historically [0:num1temporal#] (id1 == id2)) -> eventually [0:num3temporal#] (id3 >= num2value#) )
always ( id1 == num1value# -> fall ((not fall (id2 == num2value#)) until (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( fall (id1 == id2) -> id3 > num1value# and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> (id3 <= num3value#) until [num4temporala#:num4temporalb#] (id4 == id5) )
always (id1 == num1value#)
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 < num1value# -> not rise (id2 >= num2value#) and not (id3 < num3value#) )
eventually [0:num3temporal#] (rise (id1 == num1value#) or id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( fall (id1 == num1value#) -> rise (eventually (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) and not (id2 == num2value#) -> not ((id3 > num3valuea# and id3 < num3valueb#) until [0:num4temporal#] (id4 == id5)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until (id2 == id3) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id4 > num2value#)) )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always ( rise (id1 == num1value#) and rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 == id2) -> once [0:num2temporal#] (rise (id3 == num1value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always [num1temporala#:num1temporalb#] (id1 == id2 or id3 == id4)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [num2temporala#:num2temporalb#] (id3 == id4)) )
always ( id1 >= num1value# or id2 == id3 -> id4 == id5 )
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 >= num3value# )
eventually (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 -> always (eventually [num2temporala#:num2temporalb#] (id3 > num1value#)) )
always ( once [0:num2temporal#] (rise (id1 <= num1value#)) -> (id2 <= num3value#) until (id3 >= num4valuea# and id3 <= num4valueb#) )
always (id1 > num1value# and id2 < num2value#)
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 < num1value#))) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and rise (id2 > num2value#))
always (id1 <= num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 <= num2value#) -> eventually [0:num5temporal#] (id3 > num4valuea# and id3 < num4valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1value# or fall (id2 >= num2valuea# and id2 <= num2valueb#) -> not rise (eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num4temporala#:num4temporalb#] (not fall (id2 >= num3valuea# and id2 <= num3valueb#)) )
eventually (id1 == num1value# and id2 <= num2value#)
always ( id1 == num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 == num3value#))) )
always ( id1 == id2 or id3 >= num1value# -> fall (id4 == id5) )
always (id1 > num1value#)
always ( not (once [0:num2temporal#] (id1 > num1value#)) -> (id2 >= num3valuea# and id2 < num3valueb#) until [0:num5temporal#] (id3 == num4value#) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> id4 == num2value# )
always ( fall (id1 == id2) -> not (always [0:num1temporal#] (not rise (id3 == id4))) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 <= num2value#)
always ( id1 < num1value# -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( (not (id1 >= num1value#)) since [0:num3temporal#] (id2 == num2value#) -> always [num5temporala#:num5temporalb#] (not fall (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always (id1 <= num1value# and id2 == id3)
always ( rise (id1 == id2) -> id3 >= num1value# )
always [num2temporala#:num2temporalb#] (not (id1 > num1value#) and id2 == id3)
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not fall (eventually [0:num2temporal#] (not fall (id2 == id3))) )
always ( rise (id1 > num1value#) -> not (id2 <= num2value#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# and id3 == num3value# )
always [0:num1temporal#] (not (id1 == id2))
always ( id1 > num1valuea# and id1 <= num1valueb# -> id2 == num2value# and id3 == num3value# )
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 == num1value# or id2 >= num2value# -> id3 == id4 )
always ( id1 <= num1value# or not (id2 <= num2value#) -> rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == id2) -> fall (id3 == num1value#) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( rise (id1 >= num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
eventually (id1 == num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == num1value# -> not (eventually [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always ( id1 == id2 and id3 >= num1value# -> (id4 <= num2value#) until [0:num3temporal#] (not (id5 == id6)) )
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 == num2value#)
always ( rise ((id1 == id2) since [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 <= num3value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (not (id2 <= num2value#)) )
always ( fall (id1 == num1value#) -> always (eventually (fall (id2 == id3))) )
always [0:num2temporal#] (id1 == id2 and not rise (id3 >= num1valuea# and id3 <= num1valueb#))
always ( id1 == num1value# -> not fall ((id2 > num2value#) until (id3 == id4)) )
always [0:num3temporal#] (id1 <= num1value# and id2 < num2value#)
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( historically (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( not ((id1 == id2) until [0:num2temporal#] (id3 > num1value#)) -> not (always [num4temporala#:num4temporalb#] (not (id4 == num3value#))) )
always ( rise (id1 == num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
eventually [0:num1temporal#] (id1 == id2)
always ( once (rise (id1 >= num1value#)) -> eventually [0:num3temporal#] (not fall (id2 >= num2value#)) )
always ( not rise (id1 == id2) -> (id3 == num1value#) since [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> (not (id2 >= num2value#)) until [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 <= num1value# or id2 == id3 -> eventually [0:num3temporal#] (id4 > num2value#) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (historically [0:num2temporal#] (id1 >= num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 > num3value#)) )
always [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
always ( (id1 < num1value#) since (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == id2) -> id3 == num1value# or id4 <= num2value# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> rise (id3 <= num3value#) )
always ( fall (id1 == num1value#) -> not (id2 == num2value#) or id3 <= num3value# )
always (id1 <= num1value# or id2 > num2value#)
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 > num1value# and id2 > num2value# -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 > num3valuea# and id3 <= num3valueb#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3) -> not (always [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always ( not (id1 == id2) -> (not (id3 > num1valuea# and id3 < num1valueb#)) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
eventually (not (id1 < num1value#))
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 == id4) until (rise (id5 >= num4valuea# and id5 <= num4valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (not (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> not (eventually [0:num3temporal#] (rise (id2 >= num2value#))) )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
eventually [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( rise (id1 > num1value#) -> not (once [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> eventually (id2 >= num2value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# or id2 <= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (id4 == id5) )
eventually (id1 > num1value# and id2 < num2value#)
always ( fall (id1 == id2) -> always (id3 <= num1value#) )
always (not (id1 == num1value#) or id2 == num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> not rise ((id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( rise ((id1 > num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 == num2value#)) -> eventually [0:num5temporal#] (not (id3 == num4value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 <= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# -> id2 <= num2value# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 == num3value#) )
always ( id1 == num1value# and rise (id2 == num2value#) -> not (id3 <= num3value#) )
always ( rise (id1 == id2) -> (id3 == id4) until [0:num1temporal#] (id5 == id6) )
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( once [0:num2temporal#] (id1 >= num1value#) -> always [0:num4temporal#] (id2 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 < num1value#) and id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
always ( once (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( id1 > num1valuea# and id1 <= num1valueb# -> not rise (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( once (id1 < num1value#) -> eventually (always [num2temporala#:num2temporalb#] (not (id2 == id3))) )
always ( fall (id1 == num1value#) -> (id2 <= num2value#) since [num4temporala#:num4temporalb#] (not (id3 > num3valuea# and id3 <= num3valueb#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> historically (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( id1 > num1value# -> always [0:num3temporal#] (id2 < num2value#) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( id1 <= num1value# or id2 < num2value# -> always (eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == num1value#) -> once (id2 > num2valuea# and id2 <= num2valueb#) )
always ( always (not (id1 == num1value#)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( rise (id1 <= num1value#) and rise (id2 > num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id3 == id4))) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 >= num1value# -> id2 == num2value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (not (id3 < num1value#)) )
eventually (id1 == num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num2temporal#] (rise (id2 == id3)) -> (id4 == num3value#) until [0:num5temporal#] (rise (id5 <= num4value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> not fall ((id2 >= num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 > num3value#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 == num2value#))
always ( id1 >= num1value# -> id2 >= num2value# and fall (id3 == num3value#) )
always ( id1 == num1value# and id2 > num2value# -> (id3 <= num3value#) until (rise (id4 < num4value#)) )
always ( id1 < num1value# -> id2 == num2value# )
always ( rise (id1 == id2) -> always (eventually (id3 == id4)) )
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( id1 == num1value# or id2 == id3 -> not ((id4 > num2valuea# and id4 < num2valueb#) until (id5 == num3value#)) )
always ( id1 >= num1value# and id2 >= num2value# -> id3 == num3value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 < num1value#) -> eventually (always (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 == id3) )
always ( id1 < num1value# or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 <= num1value#) -> id2 == id3 and id4 > num2value# )
eventually (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( not (id1 < num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> not fall (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and id2 > num2value#)
always ( rise (id1 == num1value#) -> id2 == id3 and rise (id4 <= num2value#) )
always ( fall (id1 == num1value#) -> not (eventually [0:num3temporal#] (not (id2 >= num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == num1value#) -> eventually (always [0:num3temporal#] (not (id2 <= num2value#))) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> always (eventually (rise (id2 <= num2value#))) )
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num3temporal#] (id1 == num1value# or not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( not rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
always ( rise (id1 == num1value#) -> eventually (id2 == id3) )
always ( id1 > num1value# or id2 > num2value# -> id3 == id4 or id5 <= num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num3temporal#] (always (id3 == id4)) )
always (id1 >= num1value#)
always ( not (once [0:num2temporal#] (id1 > num1value#)) -> not (always [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always (id1 < num1value#)
always ( id1 == num1value# -> eventually [0:num2temporal#] (id2 == id3) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) and not fall (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 <= num3value#) and not (id4 == id5) )
always ( once (rise (id1 >= num1value#)) -> (not (id2 < num2value#)) until [num4temporala#:num4temporalb#] (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> eventually (always (id2 >= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not (eventually [0:num2temporal#] (id1 == num1value#)) -> always (id2 >= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 >= num2valuea# and id2 < num2valueb#) )
always ( not (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 <= num1value#) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 >= num1value#))
always ( id1 <= num1value# and not (id2 < num2value#) -> id3 == id4 )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> eventually (id3 > num1valuea# and id3 < num1valueb#) )
always (id1 == num1value#)
always ( id1 == num1value# or fall (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 <= num2value#) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( rise (id1 == id2) -> (id3 == id4) until [num2temporala#:num2temporalb#] (id5 <= num1value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> not ((id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always (not rise (id1 > num1value#) and not (id2 > num2value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == id3) since [num3temporala#:num3temporalb#] (id4 > num2value#)) )
always ( rise (id1 > num1value#) -> once (id2 > num2value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> (not rise (id3 == num1value#)) since [num2temporala#:num2temporalb#] (fall (id4 == id5)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( id1 == num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 < num1value# or id2 < num2value# -> id3 < num3value# )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 == num3value#) until [0:num4temporal#] (not (id4 == id5)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> not rise (always [0:num4temporal#] (id3 >= num3value#)) )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( once [num2temporala#:num2temporalb#] (id1 < num1value#) -> always (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num3value#))) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( once [0:num2temporal#] (not (id1 < num1value#)) -> eventually [0:num4temporal#] (id2 == num3value#) )
always ( historically [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3value#))) )
always ( fall (id1 == num1value#) -> not (once (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always (id1 == id2)
always ( rise (id1 == id2) -> rise (eventually [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( (id1 == num1value#) until [0:num3temporal#] (not fall (id2 > num2value#)) -> not ((id3 == num4value#) until (id4 > num5valuea# and id4 < num5valueb#)) )
always ( id1 < num1value# -> id2 == num2value# or rise (id3 <= num3value#) )
always ( rise (id1 < num1value#) -> not (eventually (id2 <= num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (fall (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> id2 <= num2value# or id3 < num3value# )
always ( rise (id1 == num1value#) -> id2 < num2value# )
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 == id2) -> rise (id3 > num1valuea# and id3 < num1valueb#) or rise (id4 >= num2value#) )
always ( rise (id1 >= num1value#) or id2 == id3 -> (id4 >= num2valuea# and id4 <= num2valueb#) until [num4temporala#:num4temporalb#] (rise (id5 <= num3value#)) )
always ( rise (id1 <= num1value#) -> rise (id2 == num2value#) or rise (id3 >= num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == id2) -> rise (id3 == id4) )
always ( rise (id1 == id2) -> (id3 >= num1valuea# and id3 < num1valueb#) and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 == num1value#))) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always ( id1 == id2 -> eventually (id3 > num1value#) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [num2temporala#:num2temporalb#] (id3 == id4)) )
always [0:num1temporal#] (id1 == id2)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( id1 == num1value# and id2 == id3 -> always [0:num3temporal#] (not (id4 == num2value#)) )
eventually [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
eventually (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> id3 <= num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 <= num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 >= num2value#) )
always [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( id1 > num1value# and id2 == num2value# -> id3 == num3value# )
eventually [0:num2temporal#] (rise (id1 < num1value#))
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 <= num2value#)
always ( not (id1 >= num1value#) -> id2 > num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (not (id3 <= num4value#))) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( rise (id1 > num1value#) -> (id2 >= num2value#) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 <= num1value#) -> (id2 == id3) until (rise (id4 == id5)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (not (id1 >= num1value#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( not rise (always [num2temporala#:num2temporalb#] (id1 > num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically (id2 == num2value#) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> id3 == id4 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 < num2value#) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 == num2value#) -> id3 == num3value# )
eventually (not fall (id1 == id2) and id3 == id4)
always ( rise (id1 >= num1value#) -> (id2 == num2value#) since (id3 <= num3value#) )
always ( id1 == num1value# and rise (id2 <= num2value#) -> id3 <= num3value# and id4 >= num4value# )
always ( rise (id1 > num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (id3 <= num3value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 < num3value#) )
always ( rise (id1 == id2) -> always (eventually [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 < num1value#) -> not fall (eventually [0:num3temporal#] (id2 == num2value#)) )
always (id1 < num1value# and id2 >= num2value#)
always ( not ((id1 < num1value#) since [num3temporala#:num3temporalb#] (id2 < num2value#)) -> always (eventually (rise (id3 < num4value#))) )
always ( fall (eventually [num1temporala#:num1temporalb#] (id1 == id2)) -> eventually [0:num3temporal#] (id3 == num2value#) )
eventually [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always [0:num2temporal#] (not fall (id1 == id2) and not rise (id3 >= num1valuea# and id3 <= num1valueb#))
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> not (eventually [0:num4temporal#] (id3 == num3value#)) )
eventually [0:num2temporal#] (not (id1 > num1value#))
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> (not fall (id3 == num3value#)) until (rise (id4 == num4value#)) )
always ( id1 > num1value# -> fall ((not (id2 > num2valuea# and id2 < num2valueb#)) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 or not fall (id3 >= num1value#))
always ( not (id1 <= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2value#))) )
always ( rise (id1 < num1value#) -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 >= num2value#)
always ( once [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 < num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 or not rise (id3 == num1value#))
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( id1 > num1value# and id2 == num2value# -> eventually [0:num4temporal#] (id3 > num3value#) )
always ( (id1 < num1value#) until [0:num3temporal#] (id2 == num2value#) -> eventually (always (id3 <= num4value#)) )
always [0:num3temporal#] (not fall (id1 >= num1value#) or id2 <= num2value#)
always ( id1 == id2 or id3 <= num1value# -> not (id4 <= num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 == num2value# )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( (id1 > num1value#) since [0:num3temporal#] (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (id3 == id4) )
eventually (id1 == num1value# or id2 > num2value#)
always ( id1 >= num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( (id1 == num1value#) since [0:num3temporal#] (id2 < num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 == num4value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (id2 == id3) )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( id1 >= num1value# -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( id1 == id2 -> id3 == id4 or id5 > num1value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or not (id2 <= num2value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 >= num1value# and id2 == num2value# -> rise (eventually [0:num4temporal#] (not (id3 < num3value#))) )
always ( rise (id1 < num1value#) -> fall (eventually [0:num3temporal#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 > num1value# or (id2 >= num2valuea# and id2 < num2valueb#) -> not (id3 < num3value#) )
always ( fall (id1 == num1value#) -> not (eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (not (id2 == id3))) )
always ( id1 == id2 and id3 < num1value# -> id4 >= num2valuea# and id4 <= num2valueb# )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) or id2 >= num2value#)
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always (eventually [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 == num1value#) -> eventually (always (not (id2 == num2value#))) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( id1 > num1value# -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (not rise (id2 == id3))) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (historically [0:num1temporal#] (not (id1 == id2))) -> eventually (always [num3temporala#:num3temporalb#] (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( not (once [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 >= num3value# )
always ( id1 > num1value# or not (id2 == id3) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id4 == id5)) )
always [0:num2temporal#] (id1 == num1value#)
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
eventually (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 == id2) -> not (once [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 >= num1value# -> id2 == num2value# )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 > num1value#) -> (id2 == num2value#) since [num4temporala#:num4temporalb#] (id3 == num3value#) )
eventually (rise (id1 >= num1value#) and id2 == num2value#)
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 <= num1valueb#))
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == id2) -> always (eventually (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually (id1 == num1value#)
always (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 >= num1value#) -> fall (id2 == id3) )
always ( rise (id1 == id2) -> eventually (always [0:num1temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 <= num2value#))) )
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (not fall (id3 >= num3value#))) )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always (eventually (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 < num1value# or id2 == num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == id2 -> not (eventually (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( (id1 == id2) since [0:num2temporal#] (rise (id3 > num1value#)) -> (id4 == id5) until [0:num4temporal#] (id6 >= num3value#) )
always ( id1 == num1value# and id2 < num2value# -> id3 > num3value# )
eventually [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
eventually [0:num3temporal#] (not (id1 >= num1value#) and id2 > num2value#)
always ( id1 == num1value# and id2 == num2value# -> id3 >= num3value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 >= num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always (id1 == num1value# and id2 <= num2value#)
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( id1 > num1value# -> eventually (id2 < num2value#) )
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 >= num2valuea# and id2 < num2valueb#) -> eventually (always (id3 <= num3value#)) )
always ( rise (id1 > num1value#) -> not rise (id2 > num2value#) or id3 <= num3value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 == num3value#) )
always (id1 <= num1value# or id2 == id3)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> not rise (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (not (id1 <= num1value#))
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] (not (id1 > num1value#))
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 > num1value#) -> rise (id2 > num2value#) and id3 < num3value# )
eventually [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( id1 > num1valuea# and id1 < num1valueb# -> always (eventually [0:num3temporal#] (rise (id2 <= num2value#))) )
always ( always [num2temporala#:num2temporalb#] (id1 < num1value#) -> always (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 < num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> not (id2 == num2value#) or id3 == num3value# )
always ( rise (id1 >= num1value#) -> fall (eventually [num2temporala#:num2temporalb#] (fall (id2 == id3))) )
always (not rise (id1 >= num1value#) and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> always [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 == num1value#) and id2 <= num2value# -> (id3 == num3value#) until (rise (id4 < num4value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 == id2 or not (id3 >= num1valuea# and id3 < num1valueb#))
always ( rise (id1 < num1value#) or rise (id2 > num2value#) -> (id3 == id4) since (id5 == id6) )
always [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 < num2value#))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> rise (id2 > num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always ( not (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 > num1value#))) )
always ( rise (id1 == id2) -> id3 == num1value# )
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
eventually (id1 > num1valuea# and id1 < num1valueb#)
eventually (fall (id1 > num1valuea# and id1 < num1valueb#))
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 == num1value#) or rise (id2 == num2value#) -> not (id3 == num3value#) )
always ( id1 == num1value# or fall (id2 == num2value#) -> not (id3 == id4) )
always [0:num3temporal#] (id1 >= num1value# or id2 > num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually (id3 == id4)) )
always (id1 > num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 == id2) -> eventually (always (id3 > num1valuea# and id3 < num1valueb#)) )
eventually (id1 <= num1value#)
always ( rise (id1 < num1value#) -> rise (id2 >= num2value#) )
always [num2temporala#:num2temporalb#] (not (id1 > num1value#) and id2 == id3)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [num1temporala#:num1temporalb#] (not (id1 == id2))
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == id2) -> (id3 == id4) since [num2temporala#:num2temporalb#] (rise (id5 >= num1value#)) )
always ( id1 < num1value# or rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 == num3value#))) )
always ( not (eventually [0:num2temporal#] (rise (id1 <= num1value#))) -> eventually [num4temporala#:num4temporalb#] (id2 >= num3value#) )
eventually (not (id1 == num1value#))
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until (rise (id3 >= num3value#)) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
eventually [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always ( rise (id1 > num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( eventually (rise (id1 >= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (id1 == id2 and not fall (id3 > num1value#))
always ( once [0:num1temporal#] (not (id1 == id2)) -> fall ((id3 > num2value#) until [0:num4temporal#] (id4 == num3value#)) )
always ( id1 == id2 or not (id3 == num1value#) -> eventually (id4 >= num2value#) )
always ( (id1 == num1value#) since (id2 > num2valuea# and id2 < num2valueb#) -> eventually (fall (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( historically [0:num1temporal#] (id1 == id2) -> historically [0:num3temporal#] (id3 == num2value#) )
eventually [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
eventually (id1 == id2)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( once [0:num2temporal#] (id1 < num1value#) -> eventually (not rise (id2 > num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 or id4 < num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually (not (id1 == num1value#))
eventually [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 <= num1value#) or rise (id2 == num2value#) -> historically [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
eventually (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 and rise (id3 == num1value#) -> id4 < num2value# )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( id1 <= num1value# and rise (id2 >= num2value#) -> always (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( id1 <= num1value# or id2 == num2value# -> eventually (id3 == id4) )
always ( not ((id1 == num1value#) since [0:num3temporal#] (rise (id2 >= num2value#))) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 > num4valuea# and id3 <= num4valueb#)) )
always ( id1 == id2 and id3 == id4 -> once [0:num2temporal#] (rise (id5 > num1value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#) and id2 == id3)
always ( fall (id1 == id2) -> always (id3 == id4) )
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (id3 <= num1value#)) )
always ( id1 < num1value# and not (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( id1 == num1value# and id2 <= num2value# -> id3 > num3value# )
always ( once [0:num1temporal#] (id1 == id2) -> (id3 > num2value#) until (rise (id4 <= num3value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> fall (eventually (rise (id2 >= num2value#))) )
always ( rise (id1 == id2) -> id3 == num1value# and not (id4 == id5) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) until [0:num3temporal#] (id3 == id4) )
always ( not (historically [0:num2temporal#] (not (id1 <= num1value#))) -> always (id2 <= num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( id1 < num1value# and not (id2 == num2value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id3 == id4))) )
always ( id1 >= num1value# and id2 == id3 -> not rise (id4 == id5) and id6 > num2value# )
always ( (id1 == id2) since (id3 == id4) -> not fall ((id5 < num1value#) since [0:num2temporal#] (not rise (id6 == id7))) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( rise (id1 == num1value#) or not fall (id2 == num2value#) -> eventually (always [num4temporala#:num4temporalb#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( fall (id1 == num1value#) -> not rise (id2 == id3) )
always ( fall (id1 == num1value#) and id2 == num2value# -> rise (id3 >= num3value#) or not (id4 > num4value#) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> once [0:num4temporal#] (id2 > num3value#) )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 == num2value#) -> always [0:num4temporal#] (eventually (id3 == id4)) )
always ( fall (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 < num1value#) )
always (id1 == id2 and id3 == id4)
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( not (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( not (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 <= num1value#) -> id2 == id3 or id4 == num2value# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) and not fall (id4 == num4value#) )
always (not (id1 < num1value#) and id2 == id3)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 >= num1value#))) )
always ( fall (id1 == num1value#) -> rise (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> historically [num3temporala#:num3temporalb#] (not rise (id2 >= num2value#)) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not fall (id3 > num3value#))) )
always ( (id1 == num1value#) since [num2temporala#:num2temporalb#] (id2 == id3) -> fall (eventually [num4temporala#:num4temporalb#] (id4 == num3value#)) )
always ( rise (id1 == num1value#) -> not (eventually (rise (id2 == num2value#))) )
always ( once (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( not (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1value# -> id2 <= num2value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num3temporal#] (id1 == num1value# or not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( not ((not fall (id1 == id2)) since [0:num2temporal#] (id3 == num1value#)) -> always [0:num4temporal#] (id4 == num3value#) )
eventually (rise (id1 == num1value#))
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( id1 == id2 and id3 == id4 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id5 == num1value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (always (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( not (id1 < num1value#) -> fall (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> (not fall (id3 == num1value#)) until [num2temporala#:num2temporalb#] (fall (id4 == id5)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# or id2 == id3)
always ( rise (id1 >= num1value#) -> (not (id2 == id3)) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> rise ((id3 <= num1value#) since [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always ( not ((id1 == id2) since [0:num2temporal#] (not (id3 >= num1valuea# and id3 <= num1valueb#))) -> (not (id4 >= num3valuea# and id4 <= num3valueb#)) until (rise (id5 > num4value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (not (id2 >= num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 <= num2value# )
always ( rise (id1 >= num1value#) and id2 == id3 -> fall ((id4 > num2value#) until [num4temporala#:num4temporalb#] (id5 > num3valuea# and id5 < num3valueb#)) )
always ( rise (id1 > num1value#) -> once (id2 == num2value#) )
always (not (id1 < num1value#) or id2 > num2value#)
always ( (id1 < num1value#) since [0:num3temporal#] (id2 <= num2value#) -> always (eventually [0:num5temporal#] (id3 == num4value#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num3temporal#] (id2 == id3) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# and id3 >= num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (id2 == id3) )
eventually [0:num1temporal#] (not (id1 == id2))
always ( not (id1 < num1value#) and id2 == id3 -> eventually [0:num2temporal#] (always (id4 == id5)) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 == num2value#))
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
eventually (id1 > num1value# and id2 <= num2value#)
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (not (id2 == id3)) )
always ( rise (once (id1 <= num1value#)) -> (id2 >= num2valuea# and id2 <= num2valueb#) since (id3 > num3value#) )
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 == id2 and rise (id3 > num1value#) -> id4 <= num2value# )
always ( not rise (id1 == id2) -> rise (always [0:num2temporal#] (id3 == num1value#)) )
always ( not rise (id1 == id2) and id3 > num1value# -> eventually [0:num3temporal#] (id4 == num2value#) )
always ( not (id1 == id2) or id3 == id4 -> always (eventually (not (id5 > num1valuea# and id5 <= num1valueb#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) or rise (id2 == num2value#) -> not (id3 == num3value#) or fall (id4 >= num4valuea# and id4 <= num4valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 > num1value# -> rise (id2 <= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == id2 and id3 >= num1value# -> (id4 >= num2value#) until (fall (id5 >= num3valuea# and id5 <= num3valueb#)) )
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 > num1value#) -> always [0:num4temporal#] (eventually (fall (id4 >= num3valuea# and id4 <= num3valueb#))) )
eventually (not (id1 <= num1value#) or id2 >= num2value#)
always ( rise (id1 > num1value#) -> once (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> rise (always [0:num3temporal#] (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 == id3) until [0:num3temporal#] (not (id4 >= num2valuea# and id4 <= num2valueb#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( once [0:num2temporal#] (id1 == num1value#) -> not (eventually [0:num4temporal#] (id2 >= num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always [0:num1temporal#] (not (id1 == id2))
always ( id1 < num1value# -> historically (not fall (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 == num2value#) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( id1 == num1value# and rise (id2 >= num2value#) -> always (id3 == id4) )
eventually [0:num3temporal#] (id1 >= num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) or id2 == id3 -> historically [0:num3temporal#] (id4 < num2value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( always [0:num2temporal#] (id1 < num1value#) -> historically [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and (id2 >= num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> id2 == id3 and id4 == id5 )
always [0:num2temporal#] (not (id1 == num1value#))
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 < num3value#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2 or id3 == id4)
always ( not fall (id1 >= num1value#) or not (id2 == num2value#) -> (id3 == num3value#) until [0:num4temporal#] (id4 == id5) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (rise (id2 < num2value#))) )
always ( (not fall (id1 >= num1valuea# and id1 <= num1valueb#)) until [0:num2temporal#] (fall (id2 == id3)) -> eventually (fall (id4 == id5)) )
always [0:num3temporal#] (not fall (id1 == num1value#) and id2 < num2value#)
always ( id1 >= num1value# and not (id2 <= num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
always ( fall (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [num2temporala#:num2temporalb#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 >= num1value# -> not ((id2 <= num2value#) since [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always [0:num3temporal#] (not (id1 == num1value#) or id2 == num2value#)
always ( not rise ((id1 >= num1value#) since [0:num3temporal#] (id2 <= num2value#)) -> (id3 == num4value#) since [num6temporala#:num6temporalb#] (id4 > num5value#) )
always (id1 == num1value# and id2 <= num2value#)
always ( (id1 > num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 <= num3value#))) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2value#))) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( (id1 >= num1value#) since (not (id2 < num2value#)) -> not fall ((id3 == num3value#) until [0:num5temporal#] (rise (id4 <= num4value#))) )
always ( rise (id1 == num1value#) and rise (id2 > num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 >= num3value#)) )
always (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually (id2 == num3value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> not ((id2 > num2value#) until [num4temporala#:num4temporalb#] (not (id3 == num3value#))) )
always ( rise (id1 == id2) -> not rise (eventually (id3 == id4)) )
always ( rise (id1 <= num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == num1value#) -> rise ((id2 > num2value#) until (rise (id3 == num3value#))) )
always ( id1 == num1value# and id2 < num2value# -> id3 == id4 )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> not ((not (id2 <= num2value#)) until (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
eventually (id1 == num1value#)
eventually (id1 == num1value#)
always ( rise (id1 >= num1value#) or not fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 <= num4value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 == num2value#) since [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( id1 == num1value# or rise (id2 < num2value#) -> always [num3temporala#:num3temporalb#] (eventually (id3 == id4)) )
always ( id1 < num1value# or id2 > num2value# -> id3 > num3value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (id2 == num2value#) )
always ( fall (id1 == num1value#) -> not (once [num2temporala#:num2temporalb#] (fall (id2 == id3))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( id1 == id2 or rise (id3 < num1value#) -> id4 >= num2value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# and id3 < num3value# )
always ( rise (id1 < num1value#) -> id2 == id3 )
always [0:num3temporal#] (id1 <= num1value# and not fall (id2 == num2value#))
always ( always [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (not fall (id2 == id3)) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 == num1value#) -> not rise ((id2 > num2valuea# and id2 <= num2valueb#) until (id3 < num3value#)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( id1 > num1value# and id2 == num2value# -> id3 == num3value# and not (id4 == num4value#) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id2 == id3))) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 == num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and id2 < num2value#)
always ( always [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> not (once [0:num3temporal#] (rise (id2 <= num2value#))) )
always ( id1 <= num1value# or id2 == id3 -> always [0:num3temporal#] (id4 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 >= num2value#) and id3 == num3value# )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 <= num1value#) -> (not (id2 == num2value#)) until [0:num3temporal#] (fall (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 <= num2value#)
always ( rise (id1 == num1value#) -> not fall (id2 == id3) )
always ( historically (id1 == id2) -> always (eventually [num1temporala#:num1temporalb#] (not (id3 == id4))) )
always ( id1 <= num1value# and id2 == num2value# -> eventually (always [0:num4temporal#] (id3 <= num3value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 < num3value#) and rise (id4 >= num4value#) )
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == id4 )
always (id1 == num1value#)
always ( id1 == id2 and id3 == num1value# -> eventually (always [num3temporala#:num3temporalb#] (not (id4 >= num2value#))) )
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) and id3 >= num3value# )
always ( rise (id1 <= num1value#) -> rise (always (id2 <= num2value#)) )
always ( rise (id1 < num1value#) or rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( rise (id1 >= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( id1 < num1value# -> rise (id2 <= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) until (id3 == num3value#) )
always ( rise (id1 <= num1value#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 == num2value#))
always [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 == num2value#) )
always ( fall (id1 == id2) -> id3 >= num1value# or rise (id4 < num2value#) )
always ( id1 == num1value# and id2 == id3 -> not (eventually [0:num3temporal#] (fall (id4 == num2value#))) )
always ( id1 <= num1value# or rise (id2 == num2value#) -> not (id3 == id4) )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> not (id4 < num2value#) or id5 <= num3value# )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> not ((not (id3 >= num1valuea# and id3 <= num1valueb#)) until [0:num3temporal#] (id4 > num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (id2 > num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 == id2 or id3 >= num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id4 == num2value#))) )
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) or id4 == num2value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 >= num1value#) -> id2 <= num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> eventually (rise (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 <= num1value# and id2 <= num2value# -> eventually (always (id3 >= num3value#)) )
always [0:num3temporal#] (id1 >= num1value# or id2 == num2value#)
always ( id1 == num1value# and id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (rise (id4 >= num4valuea# and id4 <= num4valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 < num2value#) -> (not (id3 > num4valuea# and id3 < num4valueb#)) until (id4 > num5valuea# and id4 < num5valueb#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( id1 == num1value# and id2 >= num2value# -> always (id3 > num3value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (historically [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# and id3 == id4 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> not (id3 == id4) )
always [0:num2temporal#] (id1 >= num1value#)
always (id1 <= num1value# and id2 > num2value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == id2) or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( not (id1 < num1value#) and id2 <= num2value# -> rise (id3 > num3valuea# and id3 <= num3valueb#) or rise (id4 <= num4value#) )
always ( rise (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( id1 >= num1value# -> id2 == num2value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 < num1value#) -> not (id2 > num2value#) )
always ( historically (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually (always [num3temporala#:num3temporalb#] (not (id2 > num2value#))) )
always [0:num3temporal#] (not (id1 > num1value#) and not rise (id2 >= num2value#))
always ( rise (id1 > num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( fall (id1 == id2) -> rise (id3 > num1value#) or id4 == num2value# )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always (id1 >= num1value# and id2 == id3)
always ( rise (id1 <= num1value#) -> not (eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( historically [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (not (id2 == id3)) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( fall (id1 == id2) -> not (once [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( fall (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
always ( always [num2temporala#:num2temporalb#] (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == id3))) )
always ( id1 == id2 and rise (id3 <= num1value#) -> eventually [0:num3temporal#] (id4 >= num2value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 < num1value#) -> not (id2 < num2value#) )
eventually [0:num3temporal#] (id1 <= num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> id2 < num2value# )
always [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) and rise (id2 > num2valuea# and id2 < num2valueb#) -> always (eventually [0:num4temporal#] (not fall (id3 == num3value#))) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( id1 > num1value# -> id2 == num2value# )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( id1 >= num1value# -> id2 == id3 or id4 == id5 )
always ( id1 == num1value# and id2 > num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) until [num5temporala#:num5temporalb#] (id4 > num4value#) )
always ( not (historically [0:num2temporal#] (id1 >= num1value#)) -> eventually (always (id2 > num3value#)) )
always (id1 == num1value#)
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until [0:num3temporal#] (id2 <= num2value#) -> (id3 == id4) until [0:num5temporal#] (id5 == num4value#) )
always ( once [num2temporala#:num2temporalb#] (id1 <= num1value#) -> eventually [num4temporala#:num4temporalb#] (always (id2 == num3value#)) )
always ( id1 <= num1value# -> rise (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 == id2 -> not (id3 > num1valuea# and id3 < num1valueb#) )
always [0:num2temporal#] (not (id1 > num1value#))
always ( id1 == num1value# -> rise (id2 <= num2value#) or (id3 >= num3valuea# and id3 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (historically [0:num1temporal#] (not (id1 == id2))) -> eventually [0:num2temporal#] (always (not (id3 == id4))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (id1 == id2)
always ( fall (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 < num1value#) and id2 > num2value# -> id3 <= num3value# )
eventually [num3temporala#:num3temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 <= num2value#)
always ( rise (id1 == id2) -> (id3 == num1value#) since (rise (id4 > num2value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> not (always [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) since (id3 > num3value#) )
always [0:num3temporal#] (id1 >= num1value# or id2 >= num2value#)
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> rise (eventually [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always [num2temporala#:num2temporalb#] (not rise (id1 > num1value#))
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 >= num2value#)
always (not fall (id1 > num1value#))
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> historically [num3temporala#:num3temporalb#] (id2 <= num2value#) )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) and id2 <= num2value#)
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually (id2 == id3)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) until (not (id3 == id4)) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
eventually (id1 > num1value#)
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == id2) -> id3 == num1value# or (id4 > num2valuea# and id4 < num2valueb#) )
always ( always [num2temporala#:num2temporalb#] (id1 < num1value#) -> always (id2 > num3value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( rise (id1 < num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# or not (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (rise (id2 <= num2value#))) )
always ( (id1 > num1value#) until (id2 == num2value#) -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually (id1 == id2)
always ( not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (rise (id2 == num2value#)) )
always ( id1 <= num1value# or id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> not rise (eventually [num2temporala#:num2temporalb#] (id3 > num1value#)) )
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) and id2 > num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( always (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 <= num3value#))) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> always (id2 == num3value#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( id1 == num1value# or not (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id3 == id4))) )
always ( id1 == num1value# and id2 == num2value# -> id3 >= num3value# )
always ( rise (id1 == id2) -> id3 == num1value# and id4 > num2value# )
eventually (not (id1 <= num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# and not fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# and id2 > num2value# -> fall (eventually (not (id3 == id4))) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 > num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num2temporal#] (not (id1 >= num1value#))
always ( id1 == num1value# -> not fall (id2 == num2value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (id1 == id2)
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 >= num1value# -> id2 > num2value# )
always ( id1 < num1value# or not (id2 < num2value#) -> always (eventually [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
eventually (id1 <= num1value#)
always ( rise (id1 < num1value#) -> not (once [0:num3temporal#] (id2 == num2value#)) )
always (id1 == num1value# and id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( always [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> not rise (id3 >= num3value#) )
always ( rise (id1 == num1value#) -> always (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 > num3value#))) )
always ( not (eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num3temporal#] (id2 == id3) )
always ( (not (id1 <= num1value#)) since [num3temporala#:num3temporalb#] (id2 <= num2value#) -> once [num5temporala#:num5temporalb#] (id3 > num4valuea# and id3 <= num4valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not rise (eventually [0:num2temporal#] (id2 == id3)) )
always ( not ((id1 <= num1value#) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) -> eventually (not (id3 > num4valuea# and id3 < num4valueb#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> fall ((id2 == num3value#) until (rise (id3 < num4value#))) )
always ( rise (id1 < num1value#) -> always (eventually [0:num3temporal#] (rise (id2 >= num2value#))) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> not (once [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( id1 == num1value# or id2 > num2value# -> fall (eventually [0:num4temporal#] (rise (id3 == num3value#))) )
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 < num1value#) -> eventually (id2 == id3) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id2 == id3))) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#))
always ( once (id1 < num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) and rise (id2 < num2value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id3 == id4))) )
always ( id1 > num1value# and id2 == id3 -> eventually [num2temporala#:num2temporalb#] (id4 == id5) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and not (id2 < num2value#))
always ( id1 < num1value# -> (id2 > num2value#) until (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 >= num1value# or id2 == num2value# -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> not (eventually [0:num3temporal#] (id5 <= num2value#)) )
always ( id1 == id2 and id3 < num1value# -> eventually [0:num3temporal#] (always (not (id4 < num2value#))) )
always ( fall (id1 == num1value#) or not (id2 < num2value#) -> not (eventually [0:num4temporal#] (not (id3 == num3value#))) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
eventually [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> eventually [0:num3temporal#] (always (id4 >= num2valuea# and id4 < num2valueb#)) )
eventually [0:num3temporal#] (id1 >= num1value# and fall (id2 > num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (rise (id1 == num1value#) and id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( not (once [0:num1temporal#] (id1 == id2)) -> (id3 == id4) until [0:num2temporal#] (not fall (id5 == id6)) )
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 == num2value#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (always [num3temporala#:num3temporalb#] (not fall (id2 > num2value#))) )
always ( fall (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
always ( fall (id1 == num1value#) -> not rise (id2 == id3) )
always ( rise (id1 == id2) -> not (eventually (not (id3 == id4))) )
always ( rise (id1 >= num1value#) -> not (id2 == num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> not fall (id2 >= num2value#) )
always ( rise (id1 > num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> once (rise (id2 >= num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 < num1value# -> (id2 == num2value#) until [0:num3temporal#] (id3 == id4) )
always ( not (historically [0:num2temporal#] (not (id1 <= num1value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3value#))) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( id1 <= num1value# and id2 >= num2value# -> (id3 == id4) until [num3temporala#:num3temporalb#] (id5 == id6) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (once (rise (id2 >= num2value#))) )
always ( id1 >= num1value# -> id2 < num2value# and id3 <= num3value# )
always ( rise (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
eventually (id1 >= num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 < num1valueb#) until [num2temporala#:num2temporalb#] (id4 == id5) )
always ( rise (id1 < num1value#) -> always (eventually (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> rise (id3 == num3value#) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 > num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 < num1value#) -> (id2 <= num2value#) since (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
eventually (id1 == num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> id3 < num3value# )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always ( fall (id1 == num1value#) -> always (eventually (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
eventually [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) and id2 == id3 -> id4 > num2valuea# and id4 <= num2valueb# )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 < num2value# and id3 == id4 )
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (id3 > num2value#) )
always ( not (id1 == num1value#) -> id2 == num2value# and id3 >= num3value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) since (rise (id2 == id3)) -> eventually (id4 > num2valuea# and id4 <= num2valueb#) )
always ( rise (historically [0:num2temporal#] (not (id1 > num1value#))) -> always [num4temporala#:num4temporalb#] (eventually (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> not (id2 < num2value#) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and id2 <= num2value#)
always ( rise (id1 == id2) -> id3 == num1value# )
always [0:num1temporal#] (id1 == id2)
always ( id1 > num1value# -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> eventually [0:num3temporal#] (not rise (id3 == id4)) )
always ( id1 > num1value# or id2 >= num2value# -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 == id2 and rise (id3 >= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 == num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# or id3 == num3value# )
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 > num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
eventually (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) since [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( id1 == num1value# or id2 == num2value# -> (id3 < num3value#) until [num5temporala#:num5temporalb#] (fall (id4 >= num4valuea# and id4 <= num4valueb#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == id2 and id3 == num1value# -> always (eventually [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always ( rise (id1 < num1value#) -> eventually (id2 > num2value#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 < num1value#) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> eventually [num5temporala#:num5temporalb#] (id3 < num4value#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (not (id3 == num1value#)) )
always ( eventually [num2temporala#:num2temporalb#] (id1 > num1value#) -> (id2 > num3value#) since (id3 == id4) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> always (id2 == id3) )
always ( id1 > num1value# and id2 == id3 -> eventually (id4 <= num2value#) )
always ( rise (id1 < num1value#) -> id2 == num2value# and id3 == num3value# )
always (id1 == id2)
always ( rise (id1 >= num1value#) -> not (historically [num3temporala#:num3temporalb#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == num1value#) -> id2 == id3 and not (id4 <= num2value#) )
always ( rise (id1 <= num1value#) or rise (id2 > num2value#) -> not (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == id2 or id3 == num1value# -> (id4 > num2valuea# and id4 < num2valueb#) or (id5 > num3valuea# and id5 <= num3valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 and id3 == num1value# -> id4 > num2valuea# and id4 < num2valueb# )
always ( rise (id1 == num1value#) or id2 > num2value# -> id3 == num3value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == id2) -> once [0:num2temporal#] (id3 > num1value#) )
always ( rise (id1 == id2) -> id3 == id4 )
always [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# and id2 < num2value# -> (id3 == id4) since [num4temporala#:num4temporalb#] (id5 >= num3value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( once (fall (id1 == num1value#)) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
eventually [0:num3temporal#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [num2temporala#:num2temporalb#] (id2 == id3) )
always ( not (once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( not (id1 <= num1value#) and id2 == num2value# -> rise (id3 < num3value#) )
always (id1 == id2)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 >= num3valuea# and id3 <= num3valueb#) and id4 == num4value# )
always ( always [0:num2temporal#] (id1 == num1value#) -> not (always [0:num4temporal#] (not (id2 == num3value#))) )
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( id1 == id2 or id3 == id4 -> not ((not (id5 >= num1valuea# and id5 < num1valueb#)) until [0:num3temporal#] (rise (id6 <= num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3) -> always (id4 == num2value#) )
always (id1 == id2)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( (id1 > num1value#) until [num3temporala#:num3temporalb#] (id2 < num2value#) -> not ((not fall (id3 == num4value#)) until (id4 == id5)) )
always ( rise (id1 >= num1value#) -> eventually (always (id2 > num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always (not (id3 == num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and rise (id2 >= num2value#))
always ( fall (id1 == id2) -> not (id3 > num1valuea# and id3 <= num1valueb#) )
eventually [0:num3temporal#] (rise (id1 > num1value#) or id2 < num2value#)
always (id1 >= num1value#)
always ( rise (id1 == num1value#) -> always (not fall (id2 == id3)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always [0:num3temporal#] (not (id1 == num1value#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> fall (id2 == num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 >= num1value# -> once (fall (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> always (eventually (id3 > num3value#)) )
always ( rise (id1 < num1value#) and rise (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always [num1temporala#:num1temporalb#] (not rise (id1 == id2))
always [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 <= num3value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [num3temporala#:num3temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value#)
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( once [0:num2temporal#] (id1 >= num1value#) -> (not fall (id2 > num3value#)) since [0:num5temporal#] (id3 <= num4value#) )
always ( not (once [num2temporala#:num2temporalb#] (id1 < num1value#)) -> not (eventually (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 == id2) -> eventually (always (not (id3 <= num1value#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 < num1valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 == num2value#) -> eventually [0:num4temporal#] (id3 == num3value#) )
eventually (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 < num1value#) or id2 == num2value# -> eventually (always (not (id3 == num3value#))) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
eventually [0:num3temporal#] (fall (id1 == num1value#) and not (id2 <= num2value#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> id2 == id3 )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( rise (id1 > num1value#) -> once (id2 == num2value#) )
always (id1 == id2)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
eventually (not (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 < num1value# -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> (id2 <= num2value#) until [0:num3temporal#] (id3 == id4) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 >= num2value#))
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and not (id2 > num2value#))
eventually (id1 == id2 or id3 <= num1value#)
always [0:num3temporal#] (id1 > num1value# or not fall (id2 == num2value#))
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and rise (id3 < num3value#) )
always ( rise (id1 < num1value#) -> eventually (always [num3temporala#:num3temporalb#] (not (id2 > num2value#))) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# or id2 == id3 -> eventually [0:num2temporal#] (id4 == id5) )
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 <= num1value#) -> eventually [0:num3temporal#] (fall (id2 == id3)) )
always ( rise (id1 < num1value#) -> not (id2 > num2valuea# and id2 <= num2valueb#) or id3 <= num3value# )
always (id1 > num1valuea# and id1 <= num1valueb#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 >= num2value#) -> id3 > num3value# )
always (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 <= num2value#)
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 == num2value#) -> not (id3 < num3value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [num3temporala#:num3temporalb#] (not (id4 < num2value#)) )
always ( fall (id1 == num1value#) -> (id2 < num2value#) until [0:num4temporal#] (not (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 == num1value#) -> not (id2 > num2value#) or id3 == id4 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 < num1value#) -> id2 > num2value# or not rise (id3 > num3value#) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
always ( rise (id1 == id2) -> id3 == num1value# )
eventually (id1 == num1value# and (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> rise (id3 > num1valuea# and id3 <= num1valueb#) and rise (id4 < num2value#) )
eventually [0:num3temporal#] (id1 < num1value# or rise (id2 <= num2value#))
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#))
always ( rise (id1 < num1value#) and id2 == num2value# -> once (not (id3 > num3value#)) )
eventually [0:num2temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 >= num1value#) -> always (id2 >= num2value#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( rise (id1 > num1value#) -> always (id2 == id3) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 <= num1value# -> historically [0:num3temporal#] (id2 >= num2value#) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( rise (id1 > num1value#) -> id2 >= num2value# or id3 == num3value# )
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
eventually [0:num3temporal#] (not (id1 == num1value#) and fall (id2 == num2value#))
always ( rise (id1 >= num1value#) or id2 == id3 -> rise (id4 == num2value#) )
always ( rise (id1 >= num1value#) -> always (id2 == num2value#) )
eventually (id1 < num1value# and id2 == id3)
always ( fall (id1 == id2) -> id3 == num1value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 >= num1value#) )
always ( id1 == id2 or id3 == num1value# -> id4 > num2valuea# and id4 < num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( rise (id1 == id2) -> not (id3 == id4) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 > num3value#)) )
always (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> (id2 == num2value#) until (id3 == num3value#) )
always ( id1 < num1value# -> eventually (always [0:num3temporal#] (not (id2 == num2value#))) )
always ( rise (id1 >= num1value#) and id2 >= num2value# -> not (id3 >= num3value#) )
eventually (rise (id1 >= num1value#))
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 < num1valueb#) until [0:num3temporal#] (id4 == num2value#) )
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#))
always ( id1 > num1value# -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 <= num1value# -> id2 == num2value# )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3value#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 <= num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 > num2value#)) )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 > num3value# )
always ( once [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (rise (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) until (id3 > num3value#) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
eventually (id1 < num1value# and id2 <= num2value#)
eventually [0:num2temporal#] (id1 > num1value# and not (id2 == id3))
always ( id1 < num1value# or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 > num3value#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> once [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> (id2 <= num2value#) until [0:num3temporal#] (fall (id3 == id4)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) -> (not fall (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (not fall (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> fall (id3 >= num1valuea# and id3 <= num1valueb#) or id4 == id5 )
always ( id1 == id2 and id3 >= num1value# -> eventually (id4 == id5) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 <= num3value#) until (id3 == num4value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (not (id1 == id2) and id3 > num1value#)
always [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 == num1value#) -> once [0:num3temporal#] (not fall (id2 == num2value#)) )
always ( id1 <= num1value# and not (id2 == id3) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id4 < num2value#)) )
eventually (id1 <= num1value# and id2 < num2value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 >= num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 == num1value#) or id2 > num2value# -> (not rise (id3 == id4)) since [0:num4temporal#] (id5 > num3valuea# and id5 < num3valueb#) )
always ( historically (id1 == id2) -> always (id3 > num1valuea# and id3 < num1valueb#) )
always ( id1 == num1value# -> not (id2 < num2value#) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not rise (id2 > num2value#))
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3valuea# and id3 < num3valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 > num1value# or id2 == id3)
always (id1 < num1value# or id2 < num2value#)
always ( rise (id1 == num1value#) -> id2 < num2value# )
always [0:num2temporal#] (id1 < num1value#)
always (not (id1 < num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (id2 < num2value#)) )
always ( fall (id1 == id2) -> id3 <= num1value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> once [num3temporala#:num3temporalb#] (rise (id2 > num2value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == num2value# )
eventually (not (id1 <= num1value#))
always [0:num3temporal#] (id1 >= num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 or id4 == id5 )
always ( not (id1 == id2) -> id3 > num1value# )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (not rise (id2 == id3)) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 <= num1value#)) )
always ( rise (id1 == num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( (not rise (id1 == id2)) until (fall (id3 >= num1valuea# and id3 <= num1valueb#)) -> always [num2temporala#:num2temporalb#] (id4 == id5) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( id1 >= num1value# or id2 > num2value# -> historically [0:num3temporal#] (id3 == id4) )
always [0:num2temporal#] (not fall (id1 == num1value#))
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 == num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 == id2) -> rise (id3 == num1value#) and id4 <= num2value# )
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always (id1 > num1value#)
always ( id1 > num1value# and id2 <= num2value# -> eventually (id3 > num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (id1 > num1value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( (id1 == num1value#) since (fall (id2 == id3)) -> always [0:num2temporal#] (id4 == id5) )
always ( id1 == num1value# -> historically [0:num2temporal#] (id2 == id3) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> id2 < num2value# )
eventually ((id1 >= num1valuea# and id1 < num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1value# and not (id2 == id3) -> eventually (id4 > num2valuea# and id4 < num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> not (id3 == num3value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num2temporal#] (not (id1 <= num1value#) and id2 == id3)
always ( rise (id1 >= num1value#) -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) -> (id4 <= num3value#) until (id5 > num4valuea# and id5 < num4valueb#) )
always ( fall (id1 == id2) -> (id3 == num1value#) until [num3temporala#:num3temporalb#] (id4 <= num2value#) )
eventually (rise (id1 > num1value#))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( id1 == num1value# and id2 <= num2value# -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( once [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( id1 < num1value# -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (rise (id3 < num3value#)) )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( id1 >= num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not (id1 >= num1value#) and id2 == num2value# -> id3 >= num3value# )
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( not (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == num1value#) -> not fall (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or rise (id3 < num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> historically (id3 == num3value#) )
always ( id1 <= num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 < num1value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( historically [0:num2temporal#] (id1 <= num1value#) -> eventually (id2 < num3value#) )
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) )
always ( id1 == num1value# and id2 == num2value# -> not ((id3 > num3valuea# and id3 < num3valueb#) until (id4 == id5)) )
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always (id2 == num3value#) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 < num3value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 and id4 > num2value# )
always ( id1 < num1value# and id2 >= num2value# -> rise (id3 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> not (id3 == id4) and rise (id5 > num3value#) )
always ( (not (id1 < num1value#)) since (fall (id2 > num2valuea# and id2 < num2valueb#)) -> always (eventually [num4temporala#:num4temporalb#] (not (id3 <= num3value#))) )
always ( id1 > num1value# and not rise (id2 == id3) -> id4 == num2value# and id5 < num3value# )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and id4 == num2value# )
always ( (id1 > num1value#) since (rise (id2 <= num2value#)) -> (id3 >= num3value#) until [0:num5temporal#] (id4 == num4value#) )
always ( fall (id1 == id2) -> once [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (once (id1 > num1value#)) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> eventually (not (id2 == id3)) )
always ( fall (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and fall (id3 == num3value#) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == id4) )
always ( id1 == num1value# and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (rise (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# -> id2 <= num2value# )
always ( not (id1 == id2) or fall (id3 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( id1 == num1value# or id2 > num2value# -> once (fall (id3 == id4)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2value#)) -> (id3 == num4value#) until [0:num6temporal#] (id4 >= num5valuea# and id4 <= num5valueb#) )
always ( id1 >= num1value# and not fall (id2 == num2value#) -> fall (id3 == num3value#) or id4 < num4value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and not fall (id2 == num2value#))
always ( id1 >= num1value# and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> (id2 == num3value#) until [num5temporala#:num5temporalb#] (rise (id3 > num4value#)) )
always ( not (id1 > num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 < num3value# )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 < num1value#) and id2 == id3 -> eventually [0:num3temporal#] (fall (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == id2) -> id3 > num1value# or id4 < num2value# )
always (id1 >= num1value# and id2 == id3)
always [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always ( rise (id1 >= num1value#) -> id2 > num2value# and (id3 >= num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 < num1value#) -> eventually (id2 == id3) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( not (id1 <= num1value#) or id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually [0:num3temporal#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (not (id1 >= num1value#))
eventually [0:num2temporal#] (id1 < num1value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( once [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( (id1 == id2) since [0:num2temporal#] (rise (id3 >= num1value#)) -> (id4 <= num3value#) until [num5temporala#:num5temporalb#] (not fall (id5 == num4value#)) )
always (id1 == id2)
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always ( id1 == id2 and not fall (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 == num2value# )
always ( rise (id1 < num1value#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 == num1value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( fall (id1 == id2) -> id3 == num1value# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
eventually (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( id1 == id2 and id3 == id4 -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id5 == id6))) )
always ( not (once [num2temporala#:num2temporalb#] (not (id1 <= num1value#))) -> always [0:num4temporal#] (id2 >= num3value#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always (id1 < num1value# or id2 == id3)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#) -> always [num4temporala#:num4temporalb#] (id2 > num3value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( id1 == id2 -> not ((id3 == id4) since [0:num2temporal#] (not fall (id5 > num1value#))) )
always ( rise (id1 == num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (id3 == num3value#) or (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( not (id1 == num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 >= num1value# -> rise (eventually (id2 <= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( not ((id1 == num1value#) since [0:num3temporal#] (id2 == num2value#)) -> eventually [0:num4temporal#] (not (id3 == id4)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always [num1temporala#:num1temporalb#] (not rise (id1 == id2))
always [num2temporala#:num2temporalb#] (not fall (id1 > num1value#))
always [num2temporala#:num2temporalb#] (id1 < num1value# or not (id2 == id3))
eventually [0:num3temporal#] (id1 >= num1value# and rise (id2 == num2value#))
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 > num1value#) and not fall (id2 > num2value#) -> rise (id3 > num3value#) or id4 == num4value# )
always ( (id1 < num1value#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num5temporala#:num5temporalb#] (always [0:num6temporal#] (id3 < num4value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( id1 > num1value# -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( not (always (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually (always (id2 == id3)) )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
eventually (rise (id1 < num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always ( id1 == id2 and id3 > num1value# -> eventually (always (id4 <= num2value#)) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> (id2 == num3value#) since [num5temporala#:num5temporalb#] (id3 >= num4value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( not (eventually (id1 == id2)) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
eventually [0:num1temporal#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == id2) -> rise (id3 > num1valuea# and id3 < num1valueb#) and (id4 > num2valuea# and id4 < num2valueb#) )
always ( fall (id1 == num1value#) -> not rise (id2 == id3) )
always ( not (once [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))) -> always [num4temporala#:num4temporalb#] (id2 > num3value#) )
always ( fall (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 > num3value#) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> id2 <= num2value# )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) or rise (id3 > num3value#) )
always ( historically (id1 == id2) -> not ((id3 <= num1value#) until (id4 == num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> (id3 > num3value#) until [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#))
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and fall (id2 > num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> (id3 == num1value#) until [0:num2temporal#] (not (id4 == id5)) )
always ( not (id1 == num1value#) or id2 == num2value# -> eventually (always [0:num4temporal#] (id3 >= num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 == num2value#) or id3 == num3value# )
always ( (not (id1 <= num1value#)) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 < num2valueb#) -> not rise (historically [0:num5temporal#] (id3 == num4value#)) )
always (id1 <= num1value# or id2 == id3)
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( fall (id1 == id2) -> rise (id3 <= num1value#) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> eventually [0:num3temporal#] (id4 >= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 == num2value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 < num2value#)
eventually (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( not fall (once (id1 == id2)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (not (id1 == num1value#) and id2 > num2value#)
always ( rise (id1 == num1value#) -> not (once [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 > num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( id1 > num1value# -> id2 > num2valuea# and id2 <= num2valueb# )
always ( not fall (id1 >= num1value#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( not rise (id1 == num1value#) -> (id2 < num2value#) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> rise (id3 >= num1value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (id1 <= num1value# or not rise (id2 == id3))
always [num2temporala#:num2temporalb#] (not rise (id1 == id2) and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( not (id1 == num1value#) and rise (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (not (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> id2 == id3 and rise (id4 > num2valuea# and id4 < num2valueb#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( fall (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (rise (id4 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (rise (id2 > num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> eventually (rise (id2 < num2value#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( not rise (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) and id4 == num2value# )
always [0:num2temporal#] (id1 == id2 or id3 >= num1value#)
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) and not (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( id1 < num1value# and not (id2 < num2value#) -> not (id3 < num3value#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 == id2) -> id3 == id4 or (id5 >= num1valuea# and id5 <= num1valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> rise (id3 > num3value#) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( historically (not (id1 <= num1value#)) -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( id1 == num1value# or id2 == num2value# -> (id3 == id4) since [0:num4temporal#] (id5 >= num3value#) )
always ( rise (id1 > num1value#) -> not ((not rise (id2 == id3)) until [num3temporala#:num3temporalb#] (fall (id4 == num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( (id1 >= num1value#) until (id2 == num2value#) -> not (once [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#) -> id4 >= num2valuea# and id4 <= num2valueb# )
always ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num1temporal#] (id1 == id2)
eventually (rise (id1 < num1value#))
eventually (id1 <= num1value# and not rise (id2 >= num2value#))
always ( id1 == id2 and rise (id3 < num1value#) -> eventually [0:num3temporal#] (always (not (id4 == num2value#))) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
eventually [0:num3temporal#] (id1 > num1value# or id2 == num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 or rise (id3 < num1value#) -> id4 == id5 and rise (id6 >= num2valuea# and id6 < num2valueb#) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always ( not rise (id1 == num1value#) -> id2 == num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( not (id1 < num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#) -> (not (id3 < num3value#)) until [0:num4temporal#] (id4 == id5) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( historically [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#)) -> historically [num4temporala#:num4temporalb#] (id2 == num3value#) )
always [0:num2temporal#] (id1 <= num1value#)
always [0:num1temporal#] (not fall (id1 == id2))
always ( not (id1 <= num1value#) -> always (id2 == num2value#) )
always ( once [0:num2temporal#] (id1 < num1value#) -> not ((id2 == id3) until (id4 == id5)) )
always ( id1 < num1value# and id2 == id3 -> not (id4 < num2value#) )
eventually [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#) -> not (id4 == id5) )
eventually [0:num3temporal#] (id1 <= num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
always ( not (id1 >= num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( (not (id1 == num1value#)) since [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) -> always [0:num5temporal#] (id3 == num4value#) )
always ( rise (id1 < num1value#) -> not (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( historically [0:num2temporal#] (id1 < num1value#) -> once [0:num4temporal#] (rise (id2 < num3value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> not (id3 > num3valuea# and id3 < num3valueb#) and id4 < num4value# )
always ( id1 == num1value# and id2 == num2value# -> not (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 == id2) -> eventually (always (id3 == id4)) )
always ( fall (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( historically (id1 == id2) -> eventually (always [0:num2temporal#] (not (id3 > num1value#))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> (id2 < num3value#) until [0:num5temporal#] (rise (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( id1 > num1value# -> not (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == num3value# )
always ( not (id1 <= num1value#) and id2 == num2value# -> not (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1value#) -> id2 == id3 )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 >= num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> not (eventually [0:num2temporal#] (id2 == id3)) )
always [0:num3temporal#] (id1 == num1value# and not (id2 <= num2value#))
always (id1 >= num1value#)
always ( id1 == id2 or id3 > num1value# -> (id4 >= num2valuea# and id4 <= num2valueb#) until [0:num4temporal#] (rise (id5 > num3value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( (not (id1 > num1value#)) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> not fall (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> not (always (id2 == id3)) )
always ( fall (id1 == num1value#) -> not (historically [0:num3temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> rise (id2 > num2value#) or id3 == num3value# )
always (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 < num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#) -> id3 == id4 )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( id1 > num1value# -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == id2) -> rise (id3 == num1value#) )
always ( rise (id1 > num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 == num1value# and rise (id2 > num2value#) -> always (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( historically [0:num1temporal#] (not (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 > num2valuea# and id3 <= num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
eventually (rise (id1 < num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (eventually [0:num2temporal#] (id1 > num1value#)) -> (id2 > num3value#) since (id3 == num4value#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> (id3 == id4) until (id5 >= num3value#) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> fall (historically [0:num3temporal#] (id2 < num2value#)) )
always ( always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num4temporala#:num4temporalb#] (id2 <= num3value#) )
eventually (id1 == num1value#)
always ( rise (id1 == id2) -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( id1 > num1value# -> fall (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> eventually (id2 > num2value#) )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (fall (id2 == num2value#)) )
always ( rise (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (historically [0:num2temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num3temporala#:num3temporalb#] (not (id2 <= num2value#)) )
always ( id1 == num1value# and id2 <= num2value# -> id3 >= num3value# )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 < num1value# -> rise (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 < num3value#) )
always ( rise (id1 >= num1value#) -> not (historically [0:num3temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> (id2 < num2value#) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num3value#) since (rise (id3 == id4)) )
always ( always (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always [0:num2temporal#] (id1 == id2 and not (id3 >= num1value#))
always [0:num2temporal#] (id1 <= num1value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 <= num1value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#) and id2 == id3)
always (id1 == num1value# or not (id2 == num2value#))
always (id1 <= num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 >= num1value# and not (id2 == num2value#) -> rise (id3 == num3value#) and id4 == num4value# )
eventually [0:num1temporal#] (id1 == id2)
always [0:num3temporal#] (not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num3temporal#] (rise (id1 <= num1value#) and id2 == num2value#)
always ( fall (id1 == num1value#) -> (not (id2 == id3)) until (rise (id4 > num2valuea# and id4 < num2valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# and id3 <= num3value# )
eventually [num2temporala#:num2temporalb#] (not (id1 == id2) or id3 < num1value#)
eventually (rise (id1 > num1value#) and id2 == num2value#)
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) -> rise ((id2 == num2value#) since [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always ( fall ((not (id1 == num1value#)) until [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) -> eventually [num5temporala#:num5temporalb#] (id3 > num4value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( fall (id1 == id2) -> rise (always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( once (not (id1 == id2)) -> (id3 > num1value#) until [num2temporala#:num2temporalb#] (id4 == id5) )
eventually (id1 == id2)
always (id1 <= num1value# and id2 == id3)
always ( id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# and id4 == id5 )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> (id2 > num2value#) since (id3 > num3value#) )
always ( not (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# and rise (id2 >= num2value#) -> always [0:num3temporal#] (not (id3 == id4)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until (not (id3 == id4)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value# and not (id2 == id3))
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 > num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 <= num3value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always (id1 > num1value#)
always ( not (historically [num2temporala#:num2temporalb#] (not (id1 == num1value#))) -> historically (id2 > num3value#) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> (id3 > num2valuea# and id3 < num2valueb#) until (not (id4 > num3value#)) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 > num1valuea# and id3 <= num1valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> historically [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( not fall (id1 >= num1value#) or id2 < num2value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
eventually [0:num1temporal#] (id1 == id2)
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 == num2value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> fall ((id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (rise (id3 > num3value#))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( id1 < num1value# or id2 == id3 -> rise (always (id4 == id5)) )
eventually [num3temporala#:num3temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2value#))
always ( rise (id1 == num1value#) -> rise (always [0:num2temporal#] (id2 == id3)) )
always ( not (eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually (always (id2 > num3valuea# and id2 <= num3valueb#)) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (not fall (id2 == num2value#)) -> always [0:num5temporal#] (eventually (rise (id3 == num4value#))) )
always (id1 == num1value# or id2 >= num2value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( not (id1 >= num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( id1 == num1value# -> (id2 <= num2value#) until [0:num4temporal#] (not (id3 < num3value#)) )
always ( id1 < num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 >= num1value# -> id2 == id3 )
always ( id1 == num1value# and id2 >= num2value# -> rise (always (id3 < num3value#)) )
always ( fall (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually (id3 == id4)) )
always ( rise (id1 == num1value#) and not (id2 < num2value#) -> (id3 == num3value#) since [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#) )
always ( fall (id1 == num1value#) -> id2 == num2value# and id3 <= num3value# )
always ( id1 == id2 and not (id3 < num1value#) -> not (id4 == id5) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
eventually (id1 == id2)
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( (id1 < num1value#) until (id2 == num2value#) -> eventually [0:num4temporal#] (always (id3 > num3value#)) )
always [num3temporala#:num3temporalb#] (not (id1 == num1value#) or not (id2 < num2value#))
eventually [0:num3temporal#] (rise (id1 == num1value#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#) -> rise ((id3 > num3valuea# and id3 < num3valueb#) since [num5temporala#:num5temporalb#] (not rise (id4 > num4valuea# and id4 < num4valueb#))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
eventually (id1 > num1value# and id2 > num2value#)
always ( fall (historically (id1 == num1value#)) -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always (eventually [0:num4temporal#] (rise (id3 <= num3value#))) )
always ( id1 > num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( id1 == num1value# -> eventually (id2 > num2value#) )
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( id1 == id2 -> not (always [0:num2temporal#] (id3 >= num1value#)) )
always [0:num3temporal#] (id1 == num1value# or not (id2 <= num2value#))
always [num2temporala#:num2temporalb#] (not fall (id1 == num1value#) or id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> always [num5temporala#:num5temporalb#] (eventually (rise (id3 == num4value#))) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always ( id1 > num1value# and id2 <= num2value# -> not (historically [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
eventually [0:num1temporal#] (fall (id1 == id2))
eventually [0:num1temporal#] (id1 == id2)
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3))
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not ((not (id1 < num1value#)) since (rise (id2 <= num2value#))) -> historically [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 > num1value#) -> always (id2 == num2value#) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( id1 == num1value# and id2 == num2value# -> (id3 < num3value#) since [0:num5temporal#] (id4 == num4value#) )
always ( rise (id1 > num1value#) or rise (id2 > num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) until [num4temporala#:num4temporalb#] (not (id4 == id5)) )
always ( id1 > num1value# or rise (id2 == num2value#) -> historically [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1value#) or id2 >= num2value# -> always (eventually (rise (id3 <= num3value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 >= num1value# -> id2 == id3 )
always (not (id1 <= num1value#))
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( eventually [0:num1temporal#] (fall (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 > num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( fall (id1 == num1value#) -> not (always (id2 <= num2value#)) )
always ( id1 < num1value# and rise (id2 < num2value#) -> eventually (always (id3 <= num3value#)) )
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( (not (id1 <= num1value#)) until (id2 <= num2value#) -> eventually [0:num4temporal#] (rise (id3 >= num3value#)) )
eventually (rise (id1 > num1value#) and rise (id2 > num2value#))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 > num2value#)
always ( once [0:num2temporal#] (id1 < num1value#) -> always (id2 == id3) )
always ( id1 == num1value# -> once [0:num3temporal#] (rise (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 >= num1value# -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> not fall (id2 == num2value#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually (id2 > num2value#)) )
always ( id1 < num1value# or id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id4 == num2value#)) )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
eventually (id1 == id2)
eventually (id1 >= num1value# and id2 < num2value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [0:num3temporal#] (id1 == num1value# or not (id2 == num2value#))
always [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> always (id3 >= num2value#) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( fall (id1 == id2) -> (id3 == id4) until [0:num2temporal#] (not (id5 >= num1valuea# and id5 <= num1valueb#)) )
always ( id1 == id2 and not (id3 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 < num2value#)) )
always ( id1 == num1value# or rise (id2 <= num2value#) -> id3 < num3value# )
always ( (id1 > num1value#) since [0:num3temporal#] (fall (id2 == num2value#)) -> not (always [0:num5temporal#] (id3 <= num4value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always (eventually [0:num4temporal#] (rise (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( (id1 == id2) since [0:num2temporal#] (id3 == num1value#) -> rise (eventually [num4temporala#:num4temporalb#] (id4 >= num3valuea# and id4 <= num3valueb#)) )
always ( rise (id1 >= num1value#) -> always (id2 == id3) )
always ( not rise (id1 > num1value#) -> id2 > num2value# )
always ( id1 == id2 or not (id3 == num1value#) -> (id4 > num2valuea# and id4 < num2valueb#) and (id5 >= num3valuea# and id5 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> historically [0:num2temporal#] (not (id2 == id3)) )
always ( id1 <= num1value# or rise (id2 > num2value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 <= num1value#) or rise (id2 <= num2value#) -> historically [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( not ((not (id1 <= num1value#)) until (id2 == id3)) -> (id4 == id5) until (id6 >= num2valuea# and id6 <= num2valueb#) )
eventually (id1 == num1value#)
always ( not (id1 == id2) and rise (id3 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id4 >= num2value#))) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and id2 == num2value#)
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 < num1value# and rise (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( id1 == num1value# -> (not (id2 == id3)) until [0:num3temporal#] (id4 == num2value#) )
always (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (not (id2 == id3)) )
always ( not (once (id1 == id2)) -> always [0:num2temporal#] (id3 == num1value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#) -> id3 == num3value# )
always ( fall (id1 == id2) -> not (always [0:num2temporal#] (id3 < num1value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (not (id3 == num1value#))) )
always ( not fall (id1 >= num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always (id3 > num3value#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( not (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) or not (id3 < num3value#) )
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) or id2 == num2value#)
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 == num1value#)) )
always ( id1 > num1value# or id2 == id3 -> (not rise (id4 == id5)) until (id6 == id7) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == id2) -> not ((id3 >= num1value#) until (not rise (id4 == id5))) )
eventually (fall (id1 == num1value#))
eventually (rise (id1 > num1value#) or id2 == id3)
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 == id2 or id3 > num1value#)
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always (id1 <= num1value#)
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num3temporal#] (not (id1 >= num1value#) or id2 > num2value#)
always ( id1 <= num1value# or rise (id2 < num2value#) -> rise (id3 == id4) )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> id4 > num2valuea# and id4 < num2valueb# )
always ( id1 == num1value# -> id2 <= num2value# )
always ( id1 > num1value# -> not (always [0:num3temporal#] (not (id2 == num2value#))) )
eventually (rise (id1 < num1value#))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 == num1value#) or rise (id2 < num2value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 >= num3value#))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num1temporal#] (id1 == id2)
eventually (id1 == num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (once [0:num1temporal#] (fall (id1 == id2))) -> eventually (rise (id3 <= num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( id1 >= num1value# or fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3value# )
always ( rise (id1 == id2) -> (id3 >= num1value#) until (rise (id4 <= num2value#)) )
eventually (rise (id1 >= num1value#) and not fall (id2 > num2value#))
always ( historically (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == num1value# -> id2 <= num2value# and id3 == num3value# )
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num3temporal#] (id2 < num2value#)) )
always ( not (always [0:num2temporal#] (id1 == num1value#)) -> (not (id2 == num3value#)) until [num5temporala#:num5temporalb#] (id3 > num4value#) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> not ((id2 >= num3valuea# and id2 <= num3valueb#) until [0:num5temporal#] (rise (id3 == num4value#))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 < num1value# -> once [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# or fall (id3 == num3value#) )
always [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 <= num1value#) -> id2 == id3 and rise (id4 >= num2value#) )
always ( rise (id1 > num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> not (id4 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( eventually [0:num2temporal#] (id1 == num1value#) -> once (fall (id2 == num3value#)) )
always ( rise (id1 >= num1value#) -> always (id2 == num2value#) )
always ( rise (id1 == num1value#) -> not ((not fall (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( (not (id1 <= num1value#)) since [num3temporala#:num3temporalb#] (id2 >= num2value#) -> always [num5temporala#:num5temporalb#] (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 >= num1value# or id2 == num2value# -> id3 == num3value# )
always ( rise (id1 == id2) -> not (always [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 >= num2value#) )
always ( fall (id1 == num1value#) or id2 == id3 -> id4 <= num2value# )
eventually [0:num3temporal#] (id1 <= num1value# and rise (id2 > num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num2temporal#] (not rise (id2 == id3))) )
always ( id1 >= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3valuea# and id3 < num3valueb#) or id4 == num4value# )
always [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( id1 >= num1value# or rise (id2 <= num2value#) -> not (historically [num3temporala#:num3temporalb#] (id3 == id4)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> (id3 > num3valuea# and id3 < num3valueb#) and id4 <= num4value# )
always ( rise (id1 <= num1value#) -> rise (id2 > num2value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( rise (id1 == num1value#) -> eventually (id2 == id3) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 >= num1value#) -> not (id2 == num2value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 and not rise (id3 >= num1value#))
always ( fall (id1 == id2) -> eventually (always (id3 == id4)) )
always ( fall (id1 == id2) -> not ((id3 > num1valuea# and id3 < num1valueb#) until [num2temporala#:num2temporalb#] (id4 == id5)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( id1 >= num1value# or not fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
eventually [0:num2temporal#] (id1 >= num1value# or id2 == id3)
eventually (id1 == num1value#)
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 >= num1value#) -> (id2 == id3) since [0:num3temporal#] (rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 == num1value# or not (id2 > num2value#) -> id3 == id4 )
always ( historically [0:num1temporal#] (not (id1 == id2)) -> (id3 < num2value#) since [num3temporala#:num3temporalb#] (id4 == id5) )
always ( fall ((id1 == id2) since [0:num1temporal#] (id3 == id4)) -> (id5 == num2value#) until [0:num4temporal#] (not (id6 >= num3value#)) )
always (id1 == id2)
eventually ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 == id2) -> id3 <= num1value# or id4 >= num2value# )
eventually [0:num3temporal#] (id1 <= num1value# or rise (id2 > num2value#))
always ( not (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( fall (historically (id1 < num1value#)) -> not ((id2 < num2value#) until [num4temporala#:num4temporalb#] (rise (id3 >= num3value#))) )
always ( id1 == num1value# and id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (id3 < num3value#) )
always ( once (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> fall (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 < num2value#)
always ( not (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 > num2value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always (eventually [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( historically [0:num2temporal#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not rise (id2 == num3value#))) )
always ( id1 == id2 and id3 == num1value# -> eventually [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 > num1value#) -> not fall (always (id2 > num2value#)) )
always [0:num3temporal#] (not fall (id1 == num1value#) or not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> not fall (id3 == num1value#) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( eventually [num2temporala#:num2temporalb#] (id1 < num1value#) -> historically (not (id2 >= num3value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> not (always [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( id1 == id2 and id3 >= num1value# -> always (eventually (rise (id4 <= num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not rise (id1 == id2) -> id3 < num1value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 >= num2value#) since [0:num4temporal#] (id3 == num3value#)) )
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> (id5 == id6) until [0:num3temporal#] (id7 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 >= num1value# -> id2 > num2valuea# and id2 < num2valueb# )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually (id1 < num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> once [0:num2temporal#] (rise (id2 == id3)) )
eventually [0:num2temporal#] (id1 > num1value#)
always (not fall (id1 >= num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == id2) -> rise (id3 < num1value#) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 or not fall (id3 > num1value#))
always ( rise (id1 > num1value#) or rise (id2 <= num2value#) -> not fall (id3 == id4) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> always (eventually (rise (id2 > num3value#))) )
always ( rise (id1 <= num1value#) -> id2 < num2value# or id3 < num3value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( not ((not rise (id1 == id2)) since [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#)) -> eventually [0:num4temporal#] (id4 <= num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 == num1value# and id2 == id3 -> id4 < num2value# or not fall (id5 > num3value#) )
eventually [0:num2temporal#] (not (id1 == id2) and not rise (id3 == num1value#))
always ( (id1 == num1value#) until [num3temporala#:num3temporalb#] (id2 >= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 < num4value#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( eventually [num2temporala#:num2temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always (id2 == num3value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( historically (not (id1 > num1valuea# and id1 < num1valueb#)) -> eventually (id2 <= num2value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always ( once [0:num2temporal#] (id1 == num1value#) -> (id2 == num3value#) until [0:num5temporal#] (id3 >= num4value#) )
always (id1 > num1value#)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#))
always ( fall ((not (id1 >= num1value#)) since [0:num2temporal#] (id2 == id3)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 > num3valuea# and id4 < num3valueb#)) )
always ( id1 < num1value# -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until [num3temporala#:num3temporalb#] (rise (id3 == id4))) )
always ( fall (id1 == num1value#) and (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id3 >= num3value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 >= num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 -> id3 == id4 )
always ( id1 == id2 or rise (id3 >= num1value#) -> id4 > num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( fall (id1 == id2) -> fall (eventually (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 >= num1value# or id2 < num2value# -> always [num3temporala#:num3temporalb#] (eventually (fall (id3 == id4))) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> (id3 == id4) until [0:num2temporal#] (id5 <= num1value#) )
always ( id1 == num1value# and rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# and id3 >= num3value# )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( id1 == num1value# and id2 >= num2value# -> id3 <= num3value# )
always ( id1 < num1value# or id2 < num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == num1value# and id2 >= num2value# -> eventually [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 > num1value#)) -> always [0:num4temporal#] (id2 > num3value#) )
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (id2 <= num2value#) -> (id3 >= num4value#) until (not (id4 > num5valuea# and id4 < num5valueb#)) )
always ( rise (id1 == num1value#) -> id2 < num2value# or not rise (id3 == id4) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == id2 -> id3 == num1value# )
always ( id1 >= num1value# -> id2 <= num2value# and id3 == num3value# )
always ( rise (id1 < num1value#) -> rise (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( not (id1 >= num1value#) -> id2 >= num2value# )
always ( rise (id1 == num1value#) -> not (id2 >= num2value#) )
always ( historically [num2temporala#:num2temporalb#] (not (id1 > num1value#)) -> always [0:num4temporal#] (id2 >= num3value#) )
always ( rise (id1 <= num1value#) -> not (id2 == id3) )
always ( id1 <= num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 <= num3value#) )
always ( id1 > num1value# or id2 < num2value# -> not rise ((id3 == id4) until [num3temporala#:num3temporalb#] (id5 == id6)) )
always ( id1 == num1value# or not (id2 == num2value#) -> rise (id3 == id4) )
always ( not (eventually [0:num1temporal#] (id1 == id2)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 <= num2value#)) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 == num1value#) and id2 > num2value# -> always (eventually [num4temporala#:num4temporalb#] (not (id3 <= num3value#))) )
eventually [0:num1temporal#] (not (id1 == id2) and id3 == id4)
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( once [0:num2temporal#] (fall (id1 >= num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( historically (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 == num3value#))) )
always ( not (always [0:num2temporal#] (id1 == num1value#)) -> historically (id2 <= num3value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num2temporal#] (id2 == id3)) )
always ( (id1 > num1value#) until [0:num3temporal#] (rise (id2 > num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 <= num4value#))) )
eventually (id1 == id2)
always ( id1 > num1value# and id2 == id3 -> always (eventually [num3temporala#:num3temporalb#] (id4 <= num2value#)) )
eventually [0:num3temporal#] (id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 == num1value#)
always ( historically [0:num1temporal#] (id1 == id2) -> (id3 >= num2value#) until (id4 >= num3valuea# and id4 <= num3valueb#) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 <= num1value# and rise (id2 < num2value#) -> eventually [0:num4temporal#] (not (id3 <= num3value#)) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( not (once [0:num1temporal#] (id1 == id2)) -> always [0:num3temporal#] (eventually (id3 == num2value#)) )
always (id1 > num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
eventually [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always (not rise (id1 == num1value#) or id2 < num2value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value#)
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) or (id2 >= num2valuea# and id2 < num2valueb#) -> id3 > num3value# )
always ( fall (id1 == id2) -> not (always [0:num2temporal#] (id3 == num1value#)) )
eventually [0:num2temporal#] (id1 == id2 and not (id3 > num1value#))
always [0:num2temporal#] (id1 < num1value#)
always ( (not fall (id1 > num1valuea# and id1 < num1valueb#)) since [num2temporala#:num2temporalb#] (id2 == id3) -> always [num3temporala#:num3temporalb#] (id4 == id5) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always (eventually (id2 == id3)) )
always ( fall (id1 == num1value#) or rise (id2 >= num2valuea# and id2 < num2valueb#) -> (id3 < num3value#) until [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
always ( rise (id1 > num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) and not (id3 < num3value#) )
always (not (id1 == num1value#) and id2 == num2value#)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always [0:num3temporal#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (historically [0:num2temporal#] (not (id1 > num1value#))) -> eventually (rise (id2 > num3value#)) )
always (id1 == id2)
always ( historically [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#)) -> (id2 == id3) until [0:num4temporal#] (not (id4 > num3value#)) )
always ( id1 == id2 or id3 > num1value# -> (id4 > num2valuea# and id4 < num2valueb#) and id5 > num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (rise (id2 > num2value#)) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always (id3 < num1value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 == id2) -> eventually (always (id3 > num1value#)) )
always ( not (id1 == id2) and id3 == id4 -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id5 == num1value#))) )
always ( id1 == num1value# -> not rise (id2 == id3) and id4 > num2value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always [0:num3temporal#] (id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> id3 == id4 and id5 <= num1value# )
always [0:num2temporal#] (id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (not (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not rise ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( rise (id1 >= num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 == num2value#)
always [0:num3temporal#] (id1 <= num1value# and id2 < num2value#)
always ( fall (id1 == id2) -> id3 <= num1value# and id4 <= num2value# )
always ( id1 == id2 and id3 < num1value# -> eventually [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually (id2 == id3)) )
eventually (rise (id1 == id2))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 >= num3value#)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( not rise (id1 == num1value#) or id2 < num2value# -> id3 >= num3value# )
always ( rise (id1 == id2) -> fall ((not (id3 >= num1value#)) since (id4 == id5)) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) until (rise (id4 == num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [num3temporala#:num3temporalb#] (id4 < num2value#) )
always ( not ((id1 >= num1value#) since (id2 < num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always (id1 == num1value# and id2 == id3)
always ( id1 == num1value# -> rise (always (not (id2 == id3))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 > num3value#) )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( id1 < num1value# and id2 >= num2value# -> eventually (id3 < num3value#) )
always ( not (id1 >= num1valuea# and id1 < num1valueb#) or id2 == num2value# -> once (not (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( always [0:num2temporal#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
always (id1 == num1value# and id2 < num2value#)
always ( rise (id1 <= num1value#) -> (not rise (id2 == id3)) until (rise (id4 > num2value#)) )
always ( (id1 == id2) since [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not rise (id4 > num3valuea# and id4 < num3valueb#))) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( rise (id1 <= num1value#) and id2 > num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( id1 <= num1value# and id2 == id3 -> id4 > num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 > num2value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 <= num1value#) -> (id2 == num2value#) since [0:num4temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (not (id1 >= num1value#))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1value#) )
always ( not (id1 < num1value#) or id2 == id3 -> (id4 >= num2valuea# and id4 <= num2valueb#) and id5 == id6 )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 < num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always ( not (always [num2temporala#:num2temporalb#] (id1 < num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == id3)) )
always ( id1 < num1value# or id2 == id3 -> eventually [num3temporala#:num3temporalb#] (id4 > num2value#) )
always ( (id1 < num1value#) until [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 == num4value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 > num3value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( not (eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))) -> not (eventually (not (id2 == id3))) )
always ( fall (id1 == id2) -> id3 < num1value# and (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( not (id1 == num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( rise (id1 == id2) -> (not rise (id3 == id4)) until [0:num2temporal#] (not (id5 >= num1valuea# and id5 <= num1valueb#)) )
always [0:num3temporal#] (id1 < num1value# or not fall (id2 == num2value#))
eventually [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#) or not rise (id2 == id3))
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( not fall (id1 == num1value#) and rise (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (not (id3 == num3value#))) )
always ( id1 <= num1value# and id2 == id3 -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( id1 >= num1value# or id2 == id3 -> not fall (id4 == num2value#) )
eventually [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [0:num2temporal#] (id3 == id4)) )
always ( fall (id1 == num1value#) -> id2 == num2value# and id3 == num3value# )
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) until (not rise (id4 > num2value#)) )
eventually [0:num2temporal#] (not (id1 < num1value#))
eventually (id1 == id2)
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 <= num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == id4))) )
always ( rise (id1 >= num1value#) -> not fall (id2 == num2value#) )
always (id1 <= num1value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 <= num2value#)
always ( not fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 < num1value# -> once [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( fall (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 <= num1value#) -> not rise (id2 == num2value#) and id3 == num3value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always (id1 == num1value# and not fall (id2 >= num2value#))
always ( id1 == id2 -> id3 >= num1value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually (rise (id3 == id4))) )
always [0:num2temporal#] (id1 == id2 or id3 >= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and id4 <= num2value# )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 < num2value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> once [num3temporala#:num3temporalb#] (rise (id2 <= num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#) -> (id3 == num3value#) until [0:num4temporal#] (id4 == id5) )
always [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2value#) )
always [0:num3temporal#] (id1 <= num1value# or (id2 >= num2valuea# and id2 < num2valueb#))
always ( (id1 == id2) until (id3 > num1value#) -> not ((id4 < num2value#) until (id5 >= num3value#)) )
always ( not (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 == num3value#) until (id3 <= num4value#) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 >= num1value# or id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 == num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (not (id1 <= num1value#) and not (id2 > num2value#))
always (id1 < num1value#)
always [num2temporala#:num2temporalb#] (id1 == id2 or not (id3 >= num1valuea# and id3 <= num1valueb#))
always ( fall (id1 == num1value#) -> (not fall (id2 > num2value#)) until [0:num4temporal#] (rise (id3 < num3value#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually (rise (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> not (always [0:num3temporal#] (not (id2 >= num2value#))) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> once [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 < num3value#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 > num1value#) -> id2 == id3 and not (id4 == id5) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 > num1value#) )
always (id1 < num1value# and id2 < num2value#)
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) and not (id2 == num2value#) -> id3 <= num3value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
eventually [0:num3temporal#] (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( fall (id1 == num1value#) or fall (id2 == num2value#) -> always (eventually [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( fall (id1 == num1value#) -> (id2 == num2value#) until (id3 > num3value#) )
always ( not (id1 == id2) or id3 < num1value# -> always [0:num3temporal#] (id4 > num2value#) )
always ( once [0:num1temporal#] (rise (id1 == id2)) -> not ((not (id3 > num2valuea# and id3 < num2valueb#)) until [0:num3temporal#] (not (id4 == id5))) )
always [0:num2temporal#] (not (id1 >= num1value#))
always [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == id3 and not rise (id4 == id5) )
always ( id1 == id2 -> id3 < num1value# )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
eventually [0:num2temporal#] (id1 == id2 or id3 > num1value#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( id1 == num1value# or rise (id2 >= num2value#) -> always (eventually (id3 == id4)) )
always ( not rise ((id1 <= num1value#) since [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) -> always [num5temporala#:num5temporalb#] (eventually (rise (id3 <= num4value#))) )
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) and id2 == num2value#)
always ( rise (id1 == id2) -> id3 == num1value# )
eventually (id1 > num1value# and id2 == id3)
always ( once [0:num2temporal#] (id1 > num1value#) -> (id2 > num3valuea# and id2 < num3valueb#) until [0:num5temporal#] (id3 == num4value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2value#))) )
eventually [0:num2temporal#] (id1 < num1value#)
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) and id2 == num2value#)
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always (id1 < num1value#)
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
always ( rise (id1 == id2) -> always (id3 == num1value#) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 <= num1valueb# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 > num2value#))) )
always ( once (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> always (eventually [0:num3temporal#] (id2 <= num2value#)) )
always ( id1 < num1value# or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( rise (id1 == id2) -> always (id3 < num1value#) )
eventually [0:num2temporal#] (id1 == id2 and not rise (id3 == num1value#))
always ( once (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( once [0:num2temporal#] (rise (id1 > num1value#)) -> always [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 <= num2value#) -> historically (id3 > num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (id2 == num2value#) )
always [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( once (not fall (id1 == id2)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 == num1value#))) )
always (id1 < num1value# and id2 < num2value#)
always ( rise (id1 < num1value#) -> not rise (eventually (id2 == id3)) )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( once (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 == id2 or id3 > num1value# -> (id4 == num2value#) until [0:num4temporal#] (id5 == num3value#) )
always ( fall ((id1 >= num1valuea# and id1 <= num1valueb#) since [num2temporala#:num2temporalb#] (id2 == id3)) -> eventually [0:num4temporal#] (not fall (id4 > num3valuea# and id4 < num3valueb#)) )
always ( rise (id1 > num1value#) -> not fall (id2 == num2value#) and id3 < num3value# )
always ( rise (id1 >= num1value#) -> eventually (always (id2 <= num2value#)) )
always (not (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (not fall (id1 == num1value#))
always ( always (not fall (id1 == num1value#)) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( always (not (id1 > num1valuea# and id1 <= num1valueb#)) -> always (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 == id2) -> always (not (id3 == id4)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> not fall (always [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# or rise (id3 <= num3value#) )
always ( rise (id1 == id2) -> not (id3 == num1value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (not fall (id2 == id3)) )
always ( not (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until (id3 == num3value#) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( historically [0:num2temporal#] (id1 < num1value#) -> (id2 == num3value#) until [0:num5temporal#] (id3 == num4value#) )
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 == id2) -> not rise (id3 > num1value#) )
always ( id1 >= num1value# and id2 > num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( id1 > num1value# or (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not fall (id3 == num3value#))) )
always ( rise (id1 > num1value#) and id2 == num2value# -> id3 >= num3value# )
always ( id1 <= num1value# -> rise (always (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> fall (eventually [num3temporala#:num3temporalb#] (id3 == id4)) )
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always (not (id1 == id2) or not (id3 == num1value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( not ((id1 <= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) -> (id3 == num4value#) until [0:num6temporal#] (id4 >= num5value#) )
always ( id1 >= num1value# and id2 == id3 -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( rise (id1 >= num1value#) and rise (id2 > num2value#) -> once [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 and (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always ( rise (id1 > num1value#) -> (id2 <= num2value#) since [0:num4temporal#] (id3 >= num3value#) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> historically [0:num3temporal#] (id2 == num2value#) )
always ( rise (historically [num1temporala#:num1temporalb#] (id1 == id2)) -> always [0:num3temporal#] (id3 >= num2value#) )
always ( id1 > num1value# -> (id2 >= num2valuea# and id2 < num2valueb#) until (id3 >= num3valuea# and id3 < num3valueb#) )
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 <= num1value# -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> not (eventually [0:num4temporal#] (rise (id2 == num3value#))) )
always ( rise (id1 < num1value#) -> fall (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( eventually [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always [0:num2temporal#] (id1 <= num1value#)
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 > num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (id2 >= num2value#)) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
eventually [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( id1 == num1value# or rise (id2 == num2value#) -> id3 == id4 )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 == id2) -> eventually (always (id3 >= num1valuea# and id3 < num1valueb#)) )
always ( id1 == num1value# -> always (eventually [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( id1 >= num1value# -> eventually (id2 <= num2value#) )
always ( fall (id1 == num1value#) and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always (id1 < num1value# and id2 == num2value#)
always ( id1 > num1value# or rise (id2 >= num2value#) -> always (eventually (rise (id3 > num3value#))) )
eventually [0:num2temporal#] (rise (id1 == num1value#) and id2 == id3)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 > num2value#)
always [0:num1temporal#] (id1 == id2)
always ( id1 > num1value# or (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 == num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 < num2value#) -> rise ((id3 == id4) until [num4temporala#:num4temporalb#] (id5 >= num3valuea# and id5 <= num3valueb#)) )
always [0:num3temporal#] (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> id3 == id4 )
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 == id2) until (fall (id3 == id4)) -> eventually [num1temporala#:num1temporalb#] (always [num2temporala#:num2temporalb#] (not rise (id5 == id6))) )
always [0:num1temporal#] (not (id1 == id2) and id3 == id4)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 >= num1value#))) )
always ( rise (id1 >= num1value#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (fall (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always (id1 > num1value# or not rise (id2 == id3))
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> not ((id2 == id3) until [0:num2temporal#] (not rise (id4 == id5))) )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( id1 <= num1value# -> rise (id2 > num2valuea# and id2 < num2valueb#) and not (id3 <= num3value#) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2value#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (rise (id2 > num2value#))) )
always ( fall (id1 == id2) -> always (eventually [num1temporala#:num1temporalb#] (rise (id3 == id4))) )
always ( id1 == num1value# and rise (id2 == num2value#) -> id3 > num3value# )
always ( historically [0:num2temporal#] (id1 < num1value#) -> eventually (always [num4temporala#:num4temporalb#] (id2 > num3value#)) )
always ( (id1 >= num1value#) until [0:num3temporal#] (id2 == num2value#) -> (id3 > num4value#) until [num6temporala#:num6temporalb#] (rise (id4 > num5valuea# and id4 < num5valueb#)) )
always ( id1 == id2 -> id3 == num1value# )
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 >= num2value# and (id5 >= num3valuea# and id5 <= num3valueb#) )
always ( fall (id1 == num1value#) -> not (id2 <= num2value#) )
always ( id1 > num1value# and id2 > num2value# -> not (id3 > num3valuea# and id3 < num3valueb#) and id4 == id5 )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( id1 == num1value# -> always (id2 < num2value#) )
always (id1 > num1value# and id2 < num2value#)
always ( rise (id1 > num1value#) -> always (eventually (rise (id2 <= num2value#))) )
always [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and not fall (id2 == num2value#))
eventually (id1 >= num1value#)
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always [num2temporala#:num2temporalb#] (id1 > num1value# and id2 == id3)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id3 > num1value#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
eventually (id1 == id2)
always ( historically [0:num1temporal#] (id1 == id2) -> (id3 <= num2value#) until (rise (id4 == num3value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( not (id1 <= num1value#) -> not (eventually [0:num3temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 > num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 == id2) -> id3 >= num1value# )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (not (id2 < num2value#)) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 -> id3 <= num1value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( (id1 == num1value#) until [0:num3temporal#] (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == id4))) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [0:num3temporal#] (not fall (id1 > num1value#) and id2 > num2value#)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 >= num1value# and not rise (id2 == id3) -> id4 >= num2value# or (id5 >= num3valuea# and id5 <= num3valueb#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> id3 > num1value# or rise (id4 >= num2valuea# and id4 < num2valueb#) )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( not ((id1 > num1valuea# and id1 < num1valueb#) until [num2temporala#:num2temporalb#] (id2 == id3)) -> fall (always [0:num4temporal#] (id4 == num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 > num2value# )
always ( id1 >= num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( id1 < num1value# and id2 == id3 -> not (id4 == id5) )
always [0:num2temporal#] (id1 > num1value# or not rise (id2 == id3))
always ( rise (id1 < num1value#) -> fall (id2 == num2value#) )
always ( rise (id1 == id2) -> id3 < num1value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not rise (id1 == id2) and id3 == num1value# -> id4 == num2value# )
always ( rise (id1 == id2) -> id3 == id4 )
always ( id1 == id2 -> always (eventually (not (id3 == num1value#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (not fall (id1 == num1value#) and id2 == id3)
always ( once [0:num2temporal#] (id1 <= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num3temporal#] (id2 > num2value#)) )
always ( id1 == id2 and id3 <= num1value# -> id4 == num2value# and id5 > num3value# )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> not (always [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == id2 -> not (always [0:num2temporal#] (id3 <= num1value#)) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 < num2valueb#) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( not (id1 < num1value#) and id2 == id3 -> always [0:num2temporal#] (id4 == id5) )
always ( id1 <= num1value# -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> not rise (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( (id1 > num1value#) since [0:num3temporal#] (rise (id2 >= num2value#)) -> not ((id3 == num4value#) until [0:num5temporal#] (id4 == id5)) )
always ( rise (id1 > num1value#) -> (not fall (id2 > num2value#)) until [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 < num1value#) -> (id2 > num2value#) since [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( not (historically (not (id1 < num1value#))) -> once [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> rise (id3 >= num3valuea# and id3 <= num3valueb#) and id4 < num4value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> (id3 < num3value#) until [num5temporala#:num5temporalb#] (not (id4 <= num4value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( always [0:num2temporal#] (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> rise (id2 < num2value#) and rise (id3 < num3value#) )
always ( once [0:num1temporal#] (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == id4))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> historically [num3temporala#:num3temporalb#] (not (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not fall (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (id1 == id2 or not (id3 <= num1value#))
always ( id1 == num1value# -> id2 == id3 )
always [0:num2temporal#] (id1 > num1value#)
always ( not (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 >= num1value# and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num3temporal#] (not (id1 > num1value#) and id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( not (historically (id1 == id2)) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num5temporal#] (id3 == num4value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( always [0:num2temporal#] (id1 < num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( not (id1 == num1value#) or not (id2 <= num2value#) -> id3 == num3value# )
always ( id1 == num1value# -> not ((id2 < num2value#) until [num4temporala#:num4temporalb#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 >= num1value# and id2 == num2value# -> always (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and not (id2 > num2valuea# and id2 <= num2valueb#))
always (id1 > num1value#)
always ( rise (id1 == num1value#) -> id2 == id3 or id4 == num2value# )
always ( rise (id1 >= num1value#) -> fall (id2 == id3) )
always ( id1 == num1value# or rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually (always (id3 == id4)) )
always ( rise (id1 == id2) -> fall (id3 > num1valuea# and id3 < num1valueb#) )
always ( rise (id1 < num1value#) -> not (always [0:num3temporal#] (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
eventually [0:num3temporal#] (id1 < num1value# or id2 < num2value#)
always ( not fall (id1 == num1value#) or not (id2 == id3) -> not (once [num3temporala#:num3temporalb#] (fall (id4 == num2value#))) )
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 < num2value# or id3 < num3value# )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == num1value# -> eventually (always [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == id4)) )
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and not fall (id2 == id3))
eventually (id1 > num1value#)
always ( id1 == num1value# and fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (not (id3 <= num3value#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#) )
always ( id1 >= num1value# -> always [num3temporala#:num3temporalb#] (not fall (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> fall (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 <= num1value#) and rise (id2 > num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> not fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> fall (id2 == id3) )
always ( not (id1 < num1value#) or id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( id1 == num1value# and id2 == id3 -> eventually (always [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (id2 < num2value#) -> rise (eventually [0:num5temporal#] (id3 > num4value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( (id1 > num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> id3 == num3value# )
always ( rise (id1 == num1value#) -> not (eventually [0:num3temporal#] (rise (id2 >= num2value#))) )
always ( once [0:num2temporal#] (rise (id1 >= num1value#)) -> (id2 <= num3value#) until [num5temporala#:num5temporalb#] (id3 == num4value#) )
always ( rise (id1 < num1value#) -> id2 >= num2value# and rise (id3 > num3valuea# and id3 <= num3valueb#) )
always [0:num3temporal#] (id1 == num1value# and not (id2 < num2value#))
always ( not (once [0:num2temporal#] (id1 < num1value#)) -> (id2 > num3valuea# and id2 < num3valueb#) until [num5temporala#:num5temporalb#] (rise (id3 >= num4value#)) )
always ( not (id1 == num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( always [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id3 == num2value#)) )
always ( id1 == num1value# and id2 <= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 >= num1value# and not (id2 <= num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) until (not rise (id4 >= num4valuea# and id4 <= num4valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (id2 == id3) )
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( id1 == num1value# -> (id2 == num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( not (once [0:num2temporal#] (id1 < num1value#)) -> (id2 < num3value#) until (rise (id3 == num4value#)) )
always ( rise (id1 < num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( once (id1 > num1valuea# and id1 < num1valueb#) -> rise ((not (id2 > num2valuea# and id2 < num2valueb#)) since [0:num4temporal#] (id3 < num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#) -> id3 == num3value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( id1 == id2 or not rise (id3 > num1value#) -> id4 > num2valuea# and id4 < num2valueb# )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 < num1value#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 == id2 and id3 >= num1value# -> not (id4 == num2value#) )
always ( id1 == id2 or rise (id3 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 >= num2valuea# and id4 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always (id1 > num1valuea# and id1 < num1valueb#)
eventually (id1 >= num1value#)
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 <= num2value#)) )
always ( id1 == num1value# -> fall (id2 == num2value#) )
always ( id1 == num1value# and id2 < num2value# -> (id3 >= num3value#) until [num5temporala#:num5temporalb#] (id4 > num4valuea# and id4 < num4valueb#) )
always ( id1 >= num1value# -> not ((not (id2 == num2value#)) until (not (id3 == id4))) )
always ( rise (id1 == id2) -> id3 < num1value# or id4 <= num2value# )
always ( rise (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( id1 == num1value# or id2 < num2value# -> id3 == num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( fall (id1 == id2) -> not (id3 <= num1value#) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( rise (id1 <= num1value#) -> id2 <= num2value# and id3 > num3value# )
always (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (id3 == id4)) )
always ( once [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) and rise (id3 >= num3value#) )
always (id1 == id2)
always [0:num3temporal#] (id1 > num1value# or id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value# and id2 == id3)
always ( rise (id1 <= num1value#) and id2 <= num2value# -> id3 == num3value# or not (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> eventually (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 > num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( id1 > num1value# and id2 == id3 -> (id4 > num2valuea# and id4 <= num2valueb#) since [0:num4temporal#] (id5 >= num3valuea# and id5 <= num3valueb#) )
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
eventually (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( fall (id1 == num1value#) -> (id2 > num2value#) until [0:num4temporal#] (id3 < num3value#) )
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
eventually (id1 == id2 or not (id3 > num1value#))
eventually (rise (id1 < num1value#) or rise (id2 == num2value#))
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
eventually (id1 <= num1value#)
always ( id1 == num1value# -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (not fall (id1 >= num1value#))
eventually [0:num2temporal#] (id1 == num1value# or id2 == id3)
always (id1 == id2 and id3 == id4)
always ( rise (id1 >= num1value#) -> (not fall (id2 == num2value#)) until [num4temporala#:num4temporalb#] (not fall (id3 >= num3value#)) )
always ( rise (id1 == num1value#) -> historically [0:num2temporal#] (id2 == id3) )
eventually [0:num2temporal#] (id1 < num1value#)
eventually [0:num2temporal#] (id1 >= num1value#)
always ( not (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 == num1value# -> id2 == id3 )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2value#))) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( fall (id1 == id2) -> id3 == id4 )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (not fall (id1 > num1value#))
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 < num1value# or id2 == num2value# -> rise (id3 <= num3value#) )
always ( rise (id1 > num1value#) -> not (id2 == id3) or not (id4 <= num2value#) )
always ( (not (id1 >= num1value#)) since (id2 == num2value#) -> fall (eventually [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 <= num2value# and id3 > num3value# )
always ( id1 <= num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# or id4 < num4value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 < num2value#)
always ( rise (id1 >= num1value#) -> rise (id2 <= num2value#) or id3 >= num3value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( id1 < num1value# -> id2 >= num2value# )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always (eventually [num4temporala#:num4temporalb#] (fall (id2 == num3value#))) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 < num2value#)
always ( rise (id1 == id2) -> not (eventually [num1temporala#:num1temporalb#] (rise (id3 == id4))) )
always ( rise (id1 == id2) -> not (id3 >= num1value#) )
always ( not ((id1 == num1value#) since (id2 >= num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not rise (id3 > num3value#))) )
always ( id1 > num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always [0:num2temporal#] (id1 > num1value#)
always ( eventually [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 < num2value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 >= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (not (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == id2) -> eventually (rise (id3 > num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> id3 >= num3value# or fall (id4 >= num4valuea# and id4 < num4valueb#) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 < num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always (id1 >= num1value# or id2 <= num2value#)
eventually (id1 == num1value# and not rise (id2 == num2value#))
eventually [num3temporala#:num3temporalb#] (id1 > num1value# or id2 < num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) or id3 == id4 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# and id3 == id4 )
always ( id1 > num1value# -> id2 == id3 )
always ( fall (id1 == id2) -> id3 < num1value# )
always ( rise (id1 == num1value#) -> not fall (always (id2 > num2value#)) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 >= num2value#)
always ( id1 > num1valuea# and id1 <= num1valueb# -> (id2 >= num2value#) until [0:num3temporal#] (rise (id3 == id4)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( once (id1 > num1value#) -> eventually (id2 == id3) )
always ( id1 <= num1value# -> id2 == num2value# )
always ( id1 < num1value# and fall (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( id1 == num1value# and id2 >= num2value# -> rise (always [0:num3temporal#] (id3 == id4)) )
always ( not (id1 <= num1value#) -> always (eventually (rise (id2 <= num2value#))) )
always (id1 == id2)
always ( rise (id1 < num1value#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always (id1 == num1value#)
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 >= num3value#) and not fall (id4 >= num4value#) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> not (historically [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 > num3valuea# and id2 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> id3 == num1value# and id4 < num2value# )
always ( id1 == id2 or rise (id3 <= num1value#) -> not ((not (id4 > num2valuea# and id4 < num2valueb#)) until (id5 == num3value#)) )
always [0:num3temporal#] (not rise (id1 >= num1value#) or id2 < num2value#)
always [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (fall (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( fall (id1 == id2) -> rise ((id3 == num1value#) until [num3temporala#:num3temporalb#] (id4 < num2value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always ( id1 > num1value# -> (id2 == num2value#) until (id3 < num3value#) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 <= num1value#) and id2 > num2value# -> eventually (id3 == id4) )
always ( eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num4temporal#] (id2 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (not fall (id2 >= num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [0:num2temporal#] (not (id1 < num1value#))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> once [0:num2temporal#] (id2 == id3) )
always ( id1 == id2 -> not rise (always (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually (always (id2 == id3)) )
always ( fall (id1 == num1value#) -> (id2 > num2value#) until [0:num4temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( not (id1 <= num1value#) or rise (id2 > num2value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 >= num1value# -> id2 == id3 or id4 == num2value# )
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always (id3 == id4)) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
eventually (id1 < num1value#)
always ( not ((id1 <= num1value#) until [num3temporala#:num3temporalb#] (id2 == num2value#)) -> always (eventually [num5temporala#:num5temporalb#] (id3 > num4valuea# and id3 <= num4valueb#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> once [0:num3temporal#] (fall (id2 == num2value#)) )
always ( id1 > num1value# or id2 < num2value# -> not (always [0:num3temporal#] (not rise (id3 == id4))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id3 == num3value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
eventually (id1 >= num1value# and id2 == num2value#)
always ( not (eventually [0:num2temporal#] (id1 <= num1value#)) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 == id3))) )
always [0:num1temporal#] (id1 == id2)
always ( once [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( id1 == num1value# and id2 == id3 -> id4 == num2value# or rise (id5 < num3value#) )
always ( id1 <= num1value# or id2 > num2value# -> not (id3 < num3value#) )
always ( (id1 > num1value#) since (id2 == id3) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( rise (id1 > num1value#) -> not ((id2 >= num2value#) since [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> not (id2 < num2value#) )
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (not (id3 >= num1value#))) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( id1 == id2 or id3 == id4 -> always (eventually [num2temporala#:num2temporalb#] (rise (id5 >= num1value#))) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always (id1 == num1value# or id2 == num2value#)
always ( fall (historically [num2temporala#:num2temporalb#] (not (id1 == num1value#))) -> eventually [0:num3temporal#] (id2 == id3) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> always (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( not (id1 == id2) and not (id3 == num1value#) -> (not (id4 == id5)) until [num3temporala#:num3temporalb#] (id6 <= num2value#) )
always ( rise (id1 == id2) -> id3 < num1value# and id4 == id5 )
always ( id1 == num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3value#) )
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
eventually [0:num2temporal#] (id1 > num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#) -> always [0:num4temporal#] (id3 == num3value#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (rise (id3 >= num3value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> id2 == num2value# or rise (id3 >= num3value#) )
always ( id1 <= num1value# -> always [0:num2temporal#] (not (id2 == id3)) )
always [0:num1temporal#] (not (id1 == id2))
always [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> id3 <= num3value# )
always (id1 == num1value#)
always ( id1 == num1value# -> always [0:num3temporal#] (id2 < num2value#) )
always ( eventually (rise (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (id2 < num2value#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 < num3value#)) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always ( not (id1 == id2) or id3 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id4 <= num2value#))) )
always (id1 == id2)
always ( id1 == id2 or id3 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 < num2value#))) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> id2 == id3 )
always ( fall (id1 == num1value#) or id2 < num2value# -> fall (id3 == num3value#) )
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (not fall (id1 == num1value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 == id2) -> not ((id3 == id4) until [0:num1temporal#] (rise (id5 == id6))) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 == num1value#) -> (id4 >= num3value#) since [num5temporala#:num5temporalb#] (not rise (id5 > num4value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( not (id1 >= num1valuea# and id1 < num1valueb#) or id2 > num2value# -> fall ((id3 == id4) until [0:num4temporal#] (id5 == num3value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( id1 > num1value# and rise (id2 <= num2value#) -> (id3 == num3value#) until [0:num4temporal#] (id4 == id5) )
always ( not rise (id1 >= num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 or id3 == id4 -> not rise (id5 == num1value#) and id6 <= num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 == num2value#) or rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) or not (id3 == id4) )
eventually (id1 <= num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id3 == id4))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( rise (id1 == id2) -> always (eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 > num1value# -> eventually (always [0:num2temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( always [0:num2temporal#] (id1 >= num1value#) -> always (eventually (id2 <= num3value#)) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 <= num1valueb#)) -> not ((not (id2 > num3value#)) until [num5temporala#:num5temporalb#] (id3 > num4value#)) )
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( historically [0:num2temporal#] (id1 <= num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 == id5) )
always ( not (id1 == id2) and rise (id3 > num1value#) -> (not (id4 >= num2valuea# and id4 <= num2valueb#)) since [0:num4temporal#] (id5 <= num3value#) )
always ( id1 == id2 and id3 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( id1 == id2 and id3 > num1value# -> (id4 < num2value#) until [num3temporala#:num3temporalb#] (id5 == id6) )
always ( rise (id1 > num1value#) -> not (historically [0:num3temporal#] (not (id2 < num2value#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always (id1 == id2 and not (id3 <= num1value#))
always (id1 == id2)
always (id1 == num1value# or not (id2 == num2value#))
eventually ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) until [0:num3temporal#] (id2 == num2value#) -> eventually [num5temporala#:num5temporalb#] (rise (id3 > num4value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not fall (id2 == num2value#)) until (not (id3 <= num3value#)) )
always ( id1 == num1value# -> id2 <= num2value# )
always ( rise (id1 >= num1value#) -> eventually (id2 >= num2value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> (not fall (id2 == id3)) until [0:num4temporal#] (not (id4 < num3value#)) )
always ( rise (id1 > num1value#) -> id2 <= num2value# and rise (id3 <= num3value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 <= num2value#)) )
always ( id1 == num1value# -> not (id2 == num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# or not (id2 == num2value#))
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# or id3 < num3value# )
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 > num1value# -> (not (id2 < num2value#)) until [0:num4temporal#] (id3 <= num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 == id2 and id3 == num1value# -> (id4 >= num2valuea# and id4 <= num2valueb#) and id5 > num3value# )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> not (id3 == num3value#) )
eventually (id1 == id2)
always ( rise (id1 < num1value#) or id2 == id3 -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( (id1 <= num1value#) since (rise (id2 >= num2value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> (id3 == num3value#) until [num5temporala#:num5temporalb#] (fall (id4 > num4valuea# and id4 < num4valueb#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( not fall ((id1 == num1value#) since [0:num3temporal#] (id2 > num2value#)) -> always [0:num5temporal#] (id3 == num4value#) )
always ( id1 == id2 and rise (id3 < num1value#) -> eventually [0:num3temporal#] (not (id4 < num2value#)) )
always ( id1 == id2 and rise (id3 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id4 > num2valuea# and id4 < num2valueb#))) )
always [0:num2temporal#] (id1 > num1value#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and id2 < num2value#)
always (id1 <= num1value# and not rise (id2 == id3))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( not (id1 > num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> not fall ((id3 > num3valuea# and id3 < num3valueb#) since [num5temporala#:num5temporalb#] (not fall (id4 >= num4value#))) )
eventually [0:num2temporal#] (id1 == id2 and not (id3 >= num1value#))
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( fall (id1 == id2) -> not (id3 < num1value#) )
always ( rise (id1 < num1value#) -> id2 == id3 and not (id4 < num2value#) )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) until [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num5temporala#:num5temporalb#] (always [num6temporala#:num6temporalb#] (id3 == num4value#)) )
always [0:num2temporal#] (not (id1 == num1value#))
eventually [0:num2temporal#] (not fall (id1 == id2) or id3 < num1value#)
always [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not (id1 >= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 <= num2value#)
always ( eventually (id1 >= num1value#) -> always (eventually (id2 == id3)) )
eventually (not (id1 > num1value#) and rise (id2 > num2value#))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( (id1 == num1value#) since (id2 == id3) -> rise (always (id4 == num2value#)) )
always ( once [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#)) -> not ((id2 == num3value#) until (not fall (id3 == num4value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> not fall (id4 == num2value#) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always ( not rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 < num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( eventually (not fall (id1 >= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( (id1 == id2) since [0:num2temporal#] (not (id3 == num1value#)) -> eventually [0:num4temporal#] (id4 == num3value#) )
always [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# -> (id2 > num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == num1value#) or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 <= num2value#)) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always [0:num3temporal#] (not (id1 <= num1value#) and id2 >= num2value#)
always ( id1 == id2 -> id3 == num1value# )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# or id2 <= num2value# -> not fall (id3 == num3value#) or (id4 > num4valuea# and id4 < num4valueb#) )
always ( not (historically [num2temporala#:num2temporalb#] (not rise (id1 > num1value#))) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == id3))) )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( not (once (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [num3temporala#:num3temporalb#] (eventually (id2 < num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and not fall (id2 > num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 >= num2value#)
always ( rise (id1 < num1value#) or id2 <= num2value# -> not (eventually (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == id2 or id3 > num1value# -> once [0:num3temporal#] (not rise (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually (rise (id2 == id3))) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id2 == id3))) )
always [num2temporala#:num2temporalb#] (id1 < num1value# or id2 == id3)
always ( rise (id1 >= num1value#) -> not (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> not (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( once (id1 == num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( once [num1temporala#:num1temporalb#] (fall (id1 == id2)) -> once (fall (id3 == id4)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 == num1value#) -> not fall ((id2 == num2value#) until (id3 <= num3value#)) )
always (not (id1 >= num1valuea# and id1 < num1valueb#))
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == id2 and rise (id3 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 == num1value#) or rise (id2 > num2value#) -> id3 == id4 and id5 <= num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always ( id1 < num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 >= num1value#) -> rise (id2 > num2valuea# and id2 <= num2valueb#) )
eventually [0:num2temporal#] (id1 > num1value#)
eventually [0:num3temporal#] (rise (id1 == num1value#) or id2 == num2value#)
always ( rise (id1 < num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 -> not ((id3 >= num1value#) until [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num2temporal#] (id1 < num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1value# -> always [0:num3temporal#] (id2 < num2value#) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (not (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always (not (id1 == num1value#))
always ( rise (id1 == id2) -> always (eventually (id3 >= num1value#)) )
always [0:num3temporal#] (not (id1 <= num1value#) and id2 < num2value#)
always ( id1 <= num1value# -> id2 == num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> eventually (rise (id3 == num3value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
eventually (id1 == num1value#)
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 == id2) -> fall (eventually (id3 == num1value#)) )
always (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (not rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == id3))
always ( rise (id1 == id2) -> always (id3 > num1value#) )
always ( once (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 >= num1value# -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 >= num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 < num1value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) and not (id4 < num2value#) )
always [num3temporala#:num3temporalb#] (id1 < num1value# or id2 == num2value#)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not fall (id2 == id3) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not ((not (id2 >= num2valuea# and id2 <= num2valueb#)) since [0:num4temporal#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( fall (id1 == num1value#) -> id2 == num2value# and id3 <= num3value# )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> id2 >= num2value# or id3 >= num3value# )
eventually [0:num3temporal#] (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 >= num3value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#) or id2 == id3)
always ( fall (id1 == id2) -> not ((id3 == num1value#) until (id4 == num2value#)) )
always (id1 > num1value# and id2 > num2value#)
always ( eventually [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 > num1value#) -> rise (id2 == id3) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and id2 > num2value#)
eventually [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((not fall (id2 > num2valuea# and id2 < num2valueb#)) until [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise ((id1 == num1value#) since (rise (id2 > num2valuea# and id2 < num2valueb#))) -> rise ((not fall (id3 >= num3value#)) until [0:num5temporal#] (id4 < num4value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always [0:num1temporal#] (not (id1 == id2) and id3 == id4)
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num3temporal#] (fall (id1 == num1value#) and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (not (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == num1value#) -> not fall (id2 > num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 <= num2value#)
eventually (id1 <= num1value# or fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1value# or id2 <= num2value# -> eventually [num4temporala#:num4temporalb#] (not (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( once [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 == id3))) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually (fall (id1 == num1value#))
always ( historically [0:num2temporal#] (id1 > num1value#) -> always [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# and id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 <= num1value# -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( historically [0:num1temporal#] (id1 == id2) -> (not (id3 < num2value#)) until [0:num4temporal#] (rise (id4 > num3value#)) )
eventually (id1 <= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (fall (id2 == id3))) )
always ( rise (id1 > num1value#) -> historically [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 < num1value# or id2 > num2value# -> id3 <= num3value# )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( id1 == id2 and id3 > num1value# -> always [0:num2temporal#] (eventually (id4 == id5)) )
always ( rise (id1 >= num1value#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) until (id3 == id4) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) until [0:num3temporal#] (not rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 <= num1valueb# )
always (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( (id1 == id2) since [0:num1temporal#] (rise (id3 == id4)) -> once [0:num3temporal#] (rise (id5 >= num2value#)) )
always ( (not (id1 == num1value#)) until [0:num2temporal#] (id2 == id3) -> once [0:num4temporal#] (id4 < num3value#) )
always ( fall (id1 == num1value#) -> eventually (rise (id2 > num2value#)) )
always ( id1 >= num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
eventually [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually (always (not (id4 == num2value#))) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( (id1 >= num1value#) since (id2 > num2valuea# and id2 < num2valueb#) -> eventually (id3 == num3value#) )
eventually [0:num3temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( id1 > num1value# -> id2 >= num2value# or id3 < num3value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> not ((id3 <= num3value#) until [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#)) )
always ( rise (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually [num2temporala#:num2temporalb#] (rise (id3 == id4))) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num3temporala#:num3temporalb#] (eventually (id3 == id4)) )
eventually (id1 >= num1value# and id2 <= num2value#)
always ( rise (id1 < num1value#) -> (id2 <= num2value#) until (id3 <= num3value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
always ( eventually [num1temporala#:num1temporalb#] (not (id1 == id2)) -> not fall (eventually (id3 > num2value#)) )
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 == num1value# -> always (not (id2 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) or id3 < num3value# )
always ( id1 == num1value# and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always (id4 == num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 == num1value#) -> not ((id2 < num2value#) since [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> rise (id2 >= num2value#) and id3 < num3value# )
eventually [0:num3temporal#] (not (id1 == num1value#) and id2 == num2value#)
always [0:num2temporal#] (id1 > num1value#)
eventually [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( eventually [0:num2temporal#] (rise (id1 >= num1value#)) -> fall (always [num4temporala#:num4temporalb#] (id2 <= num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> historically (id2 == num2value#) )
always ( not (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always (eventually (rise (id3 >= num3value#))) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (not (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> not rise ((id3 >= num3value#) until (id4 >= num4valuea# and id4 <= num4valueb#)) )
always ( rise (id1 <= num1value#) -> not (id2 > num2value#) and id3 < num3value# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( not (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> once [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( once [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always (id2 > num3value#)) )
always ( not (id1 <= num1value#) -> id2 >= num2value# )
eventually (not (id1 == id2))
always ( eventually (id1 == num1value#) -> eventually (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not rise (once (id1 > num1value#)) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 <= num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# and not (id2 == id3))
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( (id1 > num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> (id3 < num3value#) until (id4 > num4value#) )
always ( rise (id1 > num1value#) or id2 == id3 -> rise (id4 < num2value#) and not rise (id5 > num3value#) )
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (not (id3 > num1valuea# and id3 <= num1valueb#))) )
always ( not (id1 <= num1value#) -> id2 == num2value# )
always ( id1 == num1value# and id2 == num2value# -> (id3 == num3value#) since [0:num5temporal#] (rise (id4 < num4value#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always (id1 == num1value# and not (id2 >= num2value#))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 >= num1value# or rise (id2 <= num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( id1 <= num1value# -> id2 > num2value# )
always ( id1 == id2 and id3 >= num1value# -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id4 == id5)) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> once (id2 > num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually (rise (id2 == num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( id1 == num1value# and id2 < num2value# -> not fall (id3 > num3valuea# and id3 < num3valueb#) and id4 >= num4value# )
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (not (id3 > num3value#)) )
always ( fall (id1 == id2) -> rise (id3 <= num1value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1value# and id2 >= num2value# -> id3 > num3value# )
always ( id1 > num1value# and id2 > num2value# -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually (id1 == id2)
always ( fall (id1 == num1value#) -> fall (id2 >= num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 >= num2value#) -> fall ((id3 <= num3value#) until (rise (id4 > num4value#))) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always ( fall (id1 == id2) -> fall (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) until (rise (id2 == num2value#)) -> once [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> id2 < num2value# and fall (id3 > num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( (not fall (id1 == id2)) since [0:num2temporal#] (id3 >= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id4 >= num3value#)) )
always ( not rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( id1 <= num1value# and rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 < num2value#)
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((not (id2 >= num2value#)) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> once [num2temporala#:num2temporalb#] (not rise (id2 == id3)) )
always ( fall (id1 == num1value#) -> not (id2 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == id2) -> id3 == id4 )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( id1 <= num1value# and id2 >= num2value# -> not (id3 >= num3value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (not (id3 > num1valuea# and id3 < num1valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num2temporal#] (not (id1 > num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always (id2 > num2value#) )
always (id1 <= num1value# and id2 == id3)
always ( not (id1 <= num1value#) or id2 == id3 -> id4 == num2value# )
always ( not ((id1 <= num1value#) since (id2 >= num2value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1value#) or id2 == num2value# -> fall (id3 == num3value#) or id4 == num4value# )
always ( historically [0:num1temporal#] (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( id1 == num1value# and id2 == id3 -> always [0:num2temporal#] (not rise (id4 == id5)) )
always ( once [0:num2temporal#] (rise (id1 <= num1value#)) -> eventually [0:num4temporal#] (not (id2 < num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == id4) )
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( id1 <= num1value# or id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 >= num2value#) -> eventually (id3 <= num4value#) )
always (id1 == id2)
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always (id1 >= num1value#)
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( not rise ((id1 <= num1value#) since (not rise (id2 > num2valuea# and id2 < num2valueb#))) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( fall (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 <= num3value#)) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always [0:num2temporal#] (id1 <= num1value#)
eventually (id1 == id2)
eventually (id1 > num1value#)
always ( rise (id1 == num1value#) -> eventually (id2 == id3) )
always ( rise (once (id1 == id2)) -> eventually (always [0:num1temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (not fall (id3 > num1valuea# and id3 < num1valueb#))) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1value#) -> id2 == id3 and not rise (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#))
always ( rise (id1 == num1value#) -> rise (id2 > num2value#) )
always ( not fall ((id1 == num1value#) since (not (id2 <= num2value#))) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 > num3value#)) )
always (id1 > num1value#)
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until (fall (id3 == id4)) )
always ( rise (id1 <= num1value#) -> always (id2 == num2value#) )
always ( not ((id1 == id2) since [0:num1temporal#] (not (id3 == id4))) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id5 == id6))) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 < num3value#))) )
always ( fall (id1 == num1value#) -> once [num3temporala#:num3temporalb#] (rise (id2 >= num2value#)) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> eventually (rise (id2 >= num3value#)) )
eventually (id1 == num1value#)
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( not fall (id1 == num1value#) -> id2 >= num2value# or rise (id3 == num3value#) )
eventually (id1 >= num1value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 == num2value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 < num2valueb#) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id2 <= num3value#)) )
always ( rise (id1 > num1value#) -> not (eventually [0:num3temporal#] (id2 < num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and rise (id3 >= num1value#))
always ( id1 >= num1value# and id2 == id3 -> rise (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 > num1value# or id2 >= num2value# -> always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and rise (id3 >= num3value#) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( historically (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 == id2 and id3 < num1value# -> not rise (once (id4 > num2value#)) )
always ( id1 == id2 and rise (id3 > num1value#) -> eventually [0:num3temporal#] (fall (id4 == num2value#)) )
always ( id1 < num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (id1 > num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 < num3value#) since [num4temporala#:num4temporalb#] (id4 == id5) )
always ( rise (id1 < num1value#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 > num3value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 == num1value#) -> always (eventually [0:num2temporal#] (fall (id2 == id3))) )
always ( not (eventually [0:num2temporal#] (rise (id1 > num1value#))) -> once [0:num4temporal#] (id2 <= num3value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( once [0:num2temporal#] (id1 > num1value#) -> historically (id2 > num3valuea# and id2 < num3valueb#) )
always ( id1 == id2 and id3 <= num1value# -> historically [num3temporala#:num3temporalb#] (id4 == num2value#) )
eventually [0:num2temporal#] (id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> always [0:num3temporal#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 < num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( id1 == id2 -> (id3 > num1value#) until (rise (id4 > num2value#)) )
always ( rise (id1 == id2) -> (id3 == id4) until [num2temporala#:num2temporalb#] (id5 == num1value#) )
always ( rise (id1 > num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( historically (id1 >= num1value#) -> always (eventually [0:num3temporal#] (rise (id2 >= num2value#))) )
always ( not (id1 > num1value#) -> rise (id2 == num2value#) )
always ( historically (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( not (id1 < num1value#) and id2 < num2value# -> id3 == num3value# )
always ( id1 == num1value# or not rise (id2 == id3) -> (not (id4 >= num2value#)) until [0:num3temporal#] (not (id5 == id6)) )
always ( not rise (id1 >= num1value#) and id2 == id3 -> (id4 >= num2value#) until (id5 == num3value#) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) and (id2 >= num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (id3 == id4) )
always ( id1 == num1value# and rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( always [0:num2temporal#] (id1 > num1value#) -> (id2 >= num3valuea# and id2 <= num3valueb#) until [num5temporala#:num5temporalb#] (rise (id3 == num4value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 < num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (id3 == num1value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (rise (id1 == num1value#))
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( always [0:num2temporal#] (id1 > num1value#) -> (id2 <= num3value#) until [0:num5temporal#] (rise (id3 > num4value#)) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always ( rise (id1 == num1value#) or id2 > num2value# -> not ((id3 == id4) until (fall (id5 == id6))) )
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and rise (id3 < num3value#) )
always ( rise (historically (id1 <= num1value#)) -> once [0:num3temporal#] (id2 <= num2value#) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 >= num1value#) -> id2 == id3 and id4 == num2value# )
always [0:num2temporal#] (not (id1 == num1value#))
always ( not (once [0:num2temporal#] (id1 < num1value#)) -> always (not (id2 == id3)) )
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( id1 == num1value# and id2 <= num2value# -> id3 == num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [0:num3temporal#] (id2 < num2value#) )
always ( id1 <= num1value# -> historically [num3temporala#:num3temporalb#] (id2 <= num2value#) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( id1 > num1value# and id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id4 < num2value#)) )
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) until (id4 > num2valuea# and id4 < num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 >= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) since (id2 == id3) -> historically [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (not (id4 < num2value#)) )
eventually ((id1 >= num1valuea# and id1 < num1valueb#) or not fall (id2 == num2value#))
eventually [num2temporala#:num2temporalb#] (id1 == id2 and fall (id3 == num1value#))
eventually (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 > num3value# )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 == num2value#))) )
eventually (fall (id1 > num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> eventually (id2 <= num2value#) )
always ( fall (historically [0:num2temporal#] (id1 == num1value#)) -> rise ((id2 == id3) since (rise (id4 == num3value#))) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# or id4 == id5 )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2value# )
always ( eventually [0:num2temporal#] (rise (id1 == num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (not (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( once [0:num2temporal#] (rise (id1 >= num1value#)) -> always (eventually [num4temporala#:num4temporalb#] (id2 >= num3value#)) )
always ( fall (id1 == num1value#) -> id2 == id3 )
eventually (id1 == id2 and (id3 > num1valuea# and id3 <= num1valueb#))
eventually [0:num1temporal#] (id1 == id2)
always (id1 == id2 and id3 > num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
eventually (rise (id1 > num1value#))
always ( not rise (id1 == id2) and rise (id3 < num1value#) -> id4 == id5 and id6 == num2value# )
always ( fall (id1 == id2) -> id3 > num1value# )
eventually (id1 > num1value# and id2 < num2value#)
always ( not fall (id1 == id2) -> historically [0:num1temporal#] (not rise (id3 == id4)) )
always ( (id1 < num1value#) since [0:num3temporal#] (id2 <= num2value#) -> always (not (id3 > num4value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( not (once [0:num2temporal#] (id1 > num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (eventually (not (id4 > num2valuea# and id4 < num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically (id2 == id3) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 < num3value#)) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
always ( id1 > num1value# and id2 == num2value# -> id3 < num3value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( historically (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always ( not (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually (id1 == id2)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#))
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 == num1value# and not (id2 > num2value#) -> id3 <= num3value# )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
eventually [0:num3temporal#] (id1 <= num1value# and rise (id2 < num2value#))
always ( rise (id1 > num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) or (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3valuea# and id3 <= num3valueb#) or id4 < num4value# )
always ( fall (id1 == num1value#) -> not rise (id2 == id3) )
eventually (id1 >= num1value# and id2 == num2value#)
always ( id1 >= num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (id3 == num3value#) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# -> id2 == num2value# )
always ( id1 < num1value# and not fall (id2 == num2value#) -> always [0:num4temporal#] (id3 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> not (always [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 <= num1valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
eventually (id1 > num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not fall (always [0:num3temporal#] (id2 <= num2value#)) )
eventually (not fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 <= num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 == num2value#))) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 > num2value#) until (not (id3 >= num3value#)) )
always ( id1 == num1value# and rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == id2) -> (id3 < num1value#) since [0:num3temporal#] (rise (id4 >= num2value#)) )
eventually (fall (id1 == num1value#))
always (not (id1 == id2))
always [0:num3temporal#] (not (id1 < num1value#) and id2 < num2value#)
always (id1 == num1value#)
always ( id1 >= num1value# -> (id2 <= num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == num1value# and id2 == num2value# -> always [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 > num2valuea# and id2 < num2valueb#) or id3 == num3value# )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (historically [num2temporala#:num2temporalb#] (id1 < num1value#)) -> eventually [num4temporala#:num4temporalb#] (always (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 <= num1valueb#) and id4 == num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [0:num3temporal#] (fall (id2 == id3)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 <= num1value#) -> fall (id2 == id3) )
always ( rise (id1 <= num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (not fall (id4 > num2value#)) )
always ( always [num2temporala#:num2temporalb#] (id1 == num1value#) -> not fall (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (rise (id3 > num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 == num1value#) -> fall (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 < num1value# -> not (id2 > num2value#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 == num1value#) or id2 <= num2value# -> id3 == num3value# and id4 >= num4value# )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( historically (id1 < num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always (eventually (fall (id2 == id3))) )
always ( id1 < num1value# and id2 == id3 -> always (id4 == num2value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> (id3 >= num3value#) until (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (rise (id3 < num1value#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
always ( historically (id1 == id2) -> not ((id3 >= num1value#) until [0:num3temporal#] (id4 > num2value#)) )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always (not (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> rise (id2 > num2valuea# and id2 <= num2valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( id1 <= num1value# and rise (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value# -> not rise (eventually (id3 == id4)) )
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 == num2value#))
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 == id4) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> id3 >= num3value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not rise (always [0:num3temporal#] (id2 >= num2value#)) )
eventually [0:num2temporal#] (not rise (id1 == id2) or id3 < num1value#)
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually (always (not (id2 >= num3value#))) )
always ( id1 <= num1value# and rise (id2 >= num2value#) -> (id3 == id4) until [num3temporala#:num3temporalb#] (id5 == id6) )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == num2value#)) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always [0:num3temporal#] (id1 <= num1value# or id2 >= num2value#)
always [0:num2temporal#] (id1 > num1value#)
always ( id1 == num1value# and rise (id2 > num2value#) -> (not (id3 == id4)) until (rise (id5 >= num3value#)) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (not (id3 >= num1value#))) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( not (id1 == num1value#) or id2 < num2value# -> always [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 == num1value#) -> id2 <= num2value# or rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (not (id3 == id4)) )
eventually [0:num2temporal#] (not (id1 == id2) or rise (id3 < num1value#))
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> once (not fall (id2 == num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> (id2 == id3) since [num3temporala#:num3temporalb#] (rise (id4 == id5)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 > num1valuea# and id1 < num1valueb# -> rise (historically [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) and id2 < num2value#)
eventually [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and id2 > num2value#)
always ( id1 >= num1value# -> (not (id2 == id3)) until [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (id2 > num2valuea# and id2 <= num2valueb#) or (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num1temporal#] (not fall (id1 == id2))
always ( not rise (historically (id1 >= num1value#)) -> not (eventually (not (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> eventually (id2 == num2value#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (rise (id4 > num2value#)) )
always (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 < num1value#)) )
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 >= num1value#) -> not fall (eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always ( not (id1 == num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3value# )
always ( id1 == num1value# -> always [0:num3temporal#] (id2 == num2value#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#))) )
always (id1 == id2 and id3 <= num1value#)
always ( not rise (once (id1 <= num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( fall (id1 == num1value#) -> id2 > num2value# and id3 > num3value# )
always ( fall (id1 == id2) -> once [0:num2temporal#] (rise (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 == num1value# -> (id2 == id3) since [0:num3temporal#] (id4 == num2value#) )
always ( fall (id1 == num1value#) -> not (id2 == id3) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) or id2 < num2value# -> rise (id3 > num3valuea# and id3 < num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( not (historically (id1 < num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> not fall ((id2 > num3valuea# and id2 < num3valueb#) until [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( fall (id1 == id2) -> rise (id3 > num1value#) )
always ( id1 <= num1value# -> eventually (id2 == id3) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
eventually (id1 == id2 and not rise (id3 == id4))
always ( rise (id1 >= num1value#) and id2 == num2value# -> rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 == num1value#) and not (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( not (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always (id1 < num1value# and id2 == id3)
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) and id2 < num2value#)
always [0:num2temporal#] (id1 <= num1value#)
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == id2) -> historically (id3 == id4) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# or not (id3 == id4) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num2temporal#] (id1 <= num1value#)
always ( always (not (id1 <= num1value#)) -> always (eventually (rise (id2 >= num2value#))) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
always ( rise (id1 < num1value#) or id2 < num2value# -> not ((id3 >= num3value#) until [num5temporala#:num5temporalb#] (not (id4 > num4valuea# and id4 < num4valueb#))) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
eventually (id1 <= num1value# or id2 == id3)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 > num1value# or id2 <= num2value# -> id3 > num3value# or id4 == id5 )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> (id2 == num3value#) since [0:num5temporal#] (not rise (id3 > num4value#)) )
always ( fall (id1 == id2) -> eventually (always [0:num1temporal#] (id3 == id4)) )
always ( id1 == id2 or rise (id3 > num1value#) -> always [0:num3temporal#] (eventually (id4 >= num2value#)) )
always ( id1 == id2 -> rise (id3 >= num1value#) )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always (id1 >= num1value# or id2 == id3)
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) or rise (id3 < num3value#) )
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 >= num1value#))) )
always ( id1 <= num1value# or id2 == id3 -> id4 <= num2value# )
always (id1 == num1value# and id2 >= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> (id3 < num4value#) until [num6temporala#:num6temporalb#] (not (id4 >= num5value#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num3temporal#] (eventually (rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 == num2value#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually (id2 == num3value#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> not (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> not fall (id2 == num2value#) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 == id5 )
always ( id1 == id2 and rise (id3 <= num1value#) -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( fall (id1 == num1value#) -> not (eventually [0:num3temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always (id3 < num3value#)) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( not (once (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num3temporal#] (id1 <= num1value# and id2 > num2value#)
always ( rise (id1 == num1value#) or not fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( once [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (id2 <= num3value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == id2 -> not (eventually [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 == num1value#) and rise (id2 < num2value#) -> id3 == num3value# )
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (not fall (id3 >= num1value#))) )
always [num3temporala#:num3temporalb#] (not (id1 > num1value#) or not (id2 > num2valuea# and id2 < num2valueb#))
eventually ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
always ( id1 > num1value# and fall (id2 == num2value#) -> fall (id3 == num3value#) and id4 > num4value# )
always ( id1 > num1value# or id2 > num2value# -> not fall (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( id1 == id2 and id3 == id4 -> historically [0:num2temporal#] (id5 < num1value#) )
always ( id1 == id2 and id3 == num1value# -> not (id4 == num2value#) and id5 == num3value# )
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually (id3 > num3value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( not (id1 < num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 == id4) until [num4temporala#:num4temporalb#] (id5 == num3value#) )
always ( once (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually (id1 <= num1value# or id2 == num2value#)
always ( id1 == id2 or id3 < num1value# -> fall (eventually [0:num3temporal#] (rise (id4 <= num2value#))) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always [num4temporala#:num4temporalb#] (eventually (not rise (id2 == num3value#))) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> not (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> id2 > num2value# )
eventually [0:num3temporal#] (not (id1 <= num1value#) and id2 >= num2value#)
eventually (rise (id1 < num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( rise (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 >= num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> id3 == num3value# )
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( (not (id1 == num1value#)) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (once [0:num5temporal#] (id3 < num4value#)) )
always ( id1 == id2 and id3 == num1value# -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (not (id4 == id5))) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) and not fall (id2 == num2value#))
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == id2 -> id3 < num1value# and not (id4 >= num2valuea# and id4 <= num2valueb#) )
always (id1 > num1value#)
always ( id1 < num1value# or id2 >= num2value# -> not (id3 > num3valuea# and id3 < num3valueb#) and (id4 > num4valuea# and id4 < num4valueb#) )
always ( rise (id1 == num1value#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (id2 > num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always ( id1 > num1valuea# and id1 < num1valueb# -> rise ((not (id2 > num2value#)) until [0:num3temporal#] (id3 == id4)) )
always ( id1 > num1value# -> id2 < num2value# or rise (id3 >= num3value#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( rise (id1 < num1value#) -> not fall (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> eventually (not (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (fall (id3 > num1valuea# and id3 < num1valueb#)) )
eventually [0:num3temporal#] (not (id1 > num1value#) and rise (id2 < num2value#))
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( not fall (id1 >= num1value#) -> id2 >= num2value# )
always [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (id3 < num1value#) )
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( id1 == id2 -> not fall (eventually [num1temporala#:num1temporalb#] (id3 == id4)) )
eventually (not (id1 >= num1value#))
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (not fall (id2 == num2value#)) -> eventually (always (not (id3 >= num4valuea# and id3 <= num4valueb#))) )
always ( id1 <= num1value# and id2 <= num2value# -> id3 <= num3value# )
always [num3temporala#:num3temporalb#] (not rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( always [num1temporala#:num1temporalb#] (id1 == id2) -> eventually (id3 >= num2value#) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( not (id1 <= num1value#) -> always (id2 == num2value#) )
always ( rise (id1 > num1value#) -> not (eventually [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 >= num1value# -> id2 == num2value# )
always ( id1 == id2 and not (id3 < num1value#) -> eventually [num2temporala#:num2temporalb#] (fall (id4 == id5)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( fall (id1 == id2) -> not ((id3 == id4) until [0:num2temporal#] (rise (id5 <= num1value#))) )
always ( id1 <= num1value# and id2 == id3 -> not (always [0:num3temporal#] (id4 > num2value#)) )
always ( not (id1 > num1value#) -> id2 < num2value# or id3 == id4 )
always ( id1 == num1value# -> not (id2 == num2value#) )
eventually (rise (id1 < num1value#))
always [0:num2temporal#] (id1 < num1value#)
always ( historically (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 >= num1value#) -> not (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 == id4 )
always ( fall (id1 == num1value#) and fall (id2 > num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (rise (id1 > num1value#) or rise (id2 == num2value#))
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always [0:num2temporal#] (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
eventually (id1 < num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 == num1value#)
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always (id1 >= num1value#)
always ( (id1 == id2) since [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id4 == id5)) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [num2temporala#:num2temporalb#] (id3 == id4)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 >= num1value#) or not fall (id2 > num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 == num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (not (id3 > num3valuea# and id3 <= num3valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( not fall (id1 >= num1value#) -> id2 == id3 )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# or id2 == id3 -> once (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( not (historically [0:num2temporal#] (id1 == num1value#)) -> eventually [0:num4temporal#] (id2 == num3value#) )
always ( id1 < num1value# -> rise (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( fall (id1 == num1value#) -> always (id2 > num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> (not fall (id2 > num3value#)) until [num5temporala#:num5temporalb#] (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3value# or id4 == id5 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (rise (id3 > num3value#)) )
always [0:num2temporal#] (not (id1 < num1value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 > num1value# or rise (id2 == num2value#) -> id3 == num3value# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 <= num3value#) and fall (id4 > num4valuea# and id4 < num4valueb#) )
eventually (rise (id1 == num1value#))
always ( rise (id1 <= num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually (not rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 > num1value#)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( id1 == id2 -> rise (always [num2temporala#:num2temporalb#] (id3 < num1value#)) )
always ( (id1 == num1value#) since (id2 == id3) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 == num2value#)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
always ( id1 == id2 and id3 == num1value# -> not (eventually (not fall (id4 == num2value#))) )
always ( id1 == id2 or not fall (id3 >= num1value#) -> id4 < num2value# )
always ( id1 == id2 or id3 >= num1value# -> (id4 == num2value#) until (id5 < num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) and not (id4 > num4valuea# and id4 < num4valueb#) )
always ( not rise (id1 == id2) or rise (id3 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id4 == id5))) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
eventually (id1 == id2 and not (id3 == id4))
always ( not (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == num1value#) -> not ((id2 > num2value#) until [num4temporala#:num4temporalb#] (not rise (id3 == num3value#))) )
always ( id1 == id2 -> id3 == id4 )
eventually [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( (id1 == num1value#) until [0:num3temporal#] (not fall (id2 >= num2value#)) -> eventually [num5temporala#:num5temporalb#] (always [0:num6temporal#] (not (id3 <= num4value#))) )
always ( rise (id1 > num1value#) -> id2 == id3 )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (not (id1 <= num1value#))
always ( not fall (historically (id1 <= num1value#)) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually (always (not (id2 == num2value#))) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == id3))) )
always ( id1 == num1value# and id2 < num2value# -> id3 == num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( not (id1 == id2) and id3 == id4 -> eventually [0:num1temporal#] (always (not (id5 == id6))) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 >= num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and rise (id2 == num2value#) -> id3 == num3value# and (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( not rise (id1 > num1value#) or not rise (id2 == id3) -> always (id4 == num2value#) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) and id2 <= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always (id1 >= num1value#)
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
eventually [0:num2temporal#] (not (id1 == num1value#))
always ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( once [0:num2temporal#] (id1 <= num1value#) -> always (eventually [0:num4temporal#] (id2 > num3value#)) )
always ( id1 >= num1value# and id2 == num2value# -> not (historically [num4temporala#:num4temporalb#] (not (id3 > num3value#))) )
always ( rise (id1 == id2) -> (id3 >= num1value#) until (not (id4 >= num2value#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always [0:num3temporal#] (not fall (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always [0:num3temporal#] (id1 < num1value# and not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( historically [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> historically [0:num4temporal#] (id2 < num3value#) )
always [0:num3temporal#] (not (id1 <= num1value#) and id2 <= num2value#)
always ( rise (id1 == num1value#) -> rise ((id2 == num2value#) since (fall (id3 == num3value#))) )
always [num1temporala#:num1temporalb#] (id1 == id2 or id3 == id4)
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> once [0:num4temporal#] (id3 <= num3value#) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> historically (id2 > num2value#) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
eventually [0:num2temporal#] (id1 <= num1value#)
always ( not (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( once [0:num2temporal#] (fall (id1 == num1value#)) -> not ((id2 >= num3value#) until [0:num4temporal#] (rise (id3 == id4))) )
eventually [num3temporala#:num3temporalb#] (not (id1 == num1value#) and id2 <= num2value#)
always ( id1 == num1value# -> eventually (id2 > num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> always (eventually (id2 <= num2value#)) )
always ( id1 <= num1value# -> id2 > num2value# and rise (id3 > num3value#) )
always ( not (id1 == id2) -> id3 == num1value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (id3 == id4) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (rise (id2 == num2value#)) )
always ( (id1 == id2) until [0:num2temporal#] (id3 > num1value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id4 > num3valuea# and id4 < num3valueb#)) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 == id2 -> rise (id3 < num1value#) or id4 == num2value# )
always ( rise (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually (id3 == id4)) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (rise (id1 == id2))
always [0:num2temporal#] (not (id1 > num1value#))
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
eventually (rise (id1 == num1value#) or not (id2 >= num2value#))
always ( rise (id1 > num1value#) -> not (id2 == num2value#) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> not (historically (id2 == id3)) )
always ( not (id1 == id2) -> id3 == num1value# )
always ( rise (id1 == id2) -> (id3 < num1value#) until [0:num3temporal#] (id4 >= num2value#) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# and id2 <= num2value# -> eventually [0:num3temporal#] (always (id3 == id4)) )
eventually [0:num2temporal#] (id1 == num1value# or id2 == id3)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [0:num2temporal#] (not rise (id4 == id5)) )
always ( not rise (once [0:num2temporal#] (id1 > num1value#)) -> eventually (always (id2 == num3value#)) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( eventually [0:num1temporal#] (not (id1 == id2)) -> (not (id3 < num2value#)) since [0:num4temporal#] (id4 > num3value#) )
always ( once [0:num1temporal#] (id1 == id2) -> always (eventually [0:num3temporal#] (id3 <= num2value#)) )
always ( rise (id1 == id2) -> always (id3 >= num1value#) )
eventually [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 < num1value#) -> fall (once [0:num3temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num2temporal#] (id1 == id2 and not fall (id3 > num1value#))
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> not ((not fall (id2 == num2value#)) until (not (id3 == id4))) )
always ( rise (id1 == num1value#) -> rise ((id2 >= num2value#) since (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 > num1value# -> id2 >= num2value# or (id3 >= num3valuea# and id3 < num3valueb#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 -> always [num1temporala#:num1temporalb#] (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#))
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 > num1value#) )
always ( rise (id1 < num1value#) -> not ((id2 == num2value#) until [0:num4temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 < num3value#) )
always ( id1 == num1value# and not (id2 == id3) -> id4 >= num2value# )
eventually (id1 == id2)
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always (id1 < num1value# or not (id2 <= num2value#))
eventually (id1 == num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
eventually (rise (id1 >= num1value#))
always (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (always (id2 == id3)) )
always ( id1 > num1value# and id2 > num2value# -> always (id3 == id4) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> always (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( always [num2temporala#:num2temporalb#] (id1 < num1value#) -> fall (once [0:num4temporal#] (id2 == num3value#)) )
always ( rise (id1 <= num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 < num2value#) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> id2 > num2value# or rise (id3 == num3value#) )
always [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (fall (id2 == id3)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (not rise (id3 >= num1value#))) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1value#) -> (not rise (id2 == num2value#)) until [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 < num1value#) or fall (id2 == num2value#) -> always (eventually [0:num4temporal#] (id3 == num3value#)) )
eventually (id1 > num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( id1 <= num1value# and id2 == num2value# -> id3 == num3value# )
always ( always [num1temporala#:num1temporalb#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id3 >= num2value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 > num1value#) )
eventually (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> (not (id2 > num2valuea# and id2 < num2valueb#)) since (fall (id3 == num3value#)) )
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> (id2 > num3valuea# and id2 < num3valueb#) until [0:num5temporal#] (id3 <= num4value#) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
always (id1 <= num1value# and id2 >= num2value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2value#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 or not rise (id5 >= num3value#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 < num2value#) )
always ( id1 <= num1value# and id2 < num2value# -> id3 == id4 )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually (id2 == id3)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> always [0:num3temporal#] (not fall (id4 == num2value#)) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and rise (id3 >= num3value#) )
always ( rise (id1 == id2) -> not (once [num2temporala#:num2temporalb#] (not (id3 >= num1value#))) )
always (id1 >= num1value#)
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id2 > num3value#)) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
eventually (id1 == id2)
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (rise (id3 <= num3value#)) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 <= num3value#))) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( not rise (historically [0:num1temporal#] (id1 == id2)) -> (id3 > num2value#) until [num4temporala#:num4temporalb#] (id4 > num3valuea# and id4 < num3valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 >= num3value#))) )
always ( rise (id1 == id2) -> id3 == id4 )
always [0:num2temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) and not fall (id2 == id3))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 >= num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always (id1 == num1value# and (id2 >= num2valuea# and id2 < num2valueb#))
always (id1 == id2 or id3 > num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# and id2 == num2value# -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 -> not (always [0:num2temporal#] (id3 > num1value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( not (id1 < num1value#) and not (id2 == id3) -> rise (id4 >= num2value#) and not fall (id5 > num3valuea# and id5 < num3valueb#) )
always ( (id1 >= num1value#) since [num2temporala#:num2temporalb#] (not rise (id2 == id3)) -> (id4 == num3value#) until [0:num4temporal#] (not rise (id5 == id6)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( not (id1 == num1value#) and id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( always (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 <= num2value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id5 <= num2value#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> id2 == id3 and not (id4 == num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (rise (id2 > num2valuea# and id2 < num2valueb#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always ( once [0:num2temporal#] (id1 > num1value#) -> (id2 >= num3valuea# and id2 < num3valueb#) until [0:num5temporal#] (id3 <= num4value#) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#) or id2 == id3)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( id1 <= num1value# -> id2 >= num2value# )
always ( id1 == id2 -> id3 == id4 )
always ( fall (id1 == num1value#) or not rise (id2 > num2valuea# and id2 < num2valueb#) -> always (eventually (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( (not rise (id1 > num1valuea# and id1 < num1valueb#)) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == id4))) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( (id1 >= num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (id2 <= num2value#) -> always [0:num5temporal#] (eventually [num6temporala#:num6temporalb#] (rise (id3 >= num4value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 == id3) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
always [0:num3temporal#] (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == id2) -> id3 > num1value# or id4 < num2value# )
always ( fall (historically [0:num2temporal#] (id1 == num1value#)) -> not (always (not (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 >= num1value#) -> fall ((id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == num3value#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> id2 == num2value# )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == num1value#) -> not (id2 == id3) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 > num2value#)
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> not (eventually (id2 <= num3value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> always [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 <= num2value#))) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 >= num1value#)) -> always [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [0:num3temporal#] (id1 <= num1value# or id2 < num2value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually (rise (id1 <= num1value#))
always ( id1 > num1value# -> not (eventually [0:num3temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# or id3 == id4 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num3temporal#] (id2 <= num2value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2 or id3 == id4)
eventually [0:num3temporal#] (rise (id1 <= num1value#) or rise (id2 > num2value#))
always ( fall (id1 == id2) -> id3 < num1value# )
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( historically (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) since [0:num4temporal#] (not (id3 >= num3value#)) )
always ( (id1 < num1value#) since [num2temporala#:num2temporalb#] (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 == id5))) )
always ( not fall (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 == num1value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always (id1 <= num1value# or (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 < num1value# -> id2 < num2value# and rise (id3 < num3value#) )
always ( not (id1 == id2) and id3 <= num1value# -> rise (id4 < num2value#) and fall (id5 > num3valuea# and id5 < num3valueb#) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( (id1 == id2) until [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) -> rise ((id4 == id5) until (rise (id6 > num3value#))) )
always ( id1 > num1value# or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (id3 > num3value#) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 == num1value# and id2 >= num2value# -> id3 <= num3value# )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 < num1value#) -> not (always (id2 >= num2value#)) )
always ( (id1 == id2) since [0:num2temporal#] (not (id3 >= num1value#)) -> (id4 >= num3value#) until [0:num4temporal#] (id5 == id6) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num2temporala#:num2temporalb#] (not rise (id2 == id3)) )
always ( rise (id1 > num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (id3 == num3value#) )
always (id1 > num1value#)
always ( id1 >= num1value# or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
always ( id1 >= num1value# and id2 == id3 -> eventually [0:num3temporal#] (rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( id1 < num1value# or id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( not (once [0:num2temporal#] (id1 < num1value#)) -> not ((not (id2 > num3value#)) since [num5temporala#:num5temporalb#] (rise (id3 >= num4value#))) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> id3 >= num3value# )
always ( eventually [0:num2temporal#] (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always [0:num3temporal#] (id1 <= num1value# or id2 == num2value#)
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 == num1value#) -> not (id2 <= num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( fall (id1 == id2) -> (id3 <= num1value#) since [num3temporala#:num3temporalb#] (id4 <= num2value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( historically (id1 == id2) -> not rise (always [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always ( id1 == num1value# -> id2 == num2value# or rise (id3 >= num3value#) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 < num1value# or not (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( rise (id1 == id2) -> rise (id3 > num1value#) and id4 >= num2value# )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 == id2 or not fall (id3 > num1valuea# and id3 < num1valueb#) -> id4 == id5 )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 >= num1value#) -> eventually (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> always (id2 <= num2value#) )
always ( not (id1 > num1value#) and id2 == num2value# -> rise ((id3 <= num3value#) until [0:num5temporal#] (rise (id4 > num4valuea# and id4 < num4valueb#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 >= num1value#))) )
always ( rise (id1 == id2) -> id3 == id4 )
always [num1temporala#:num1temporalb#] (not fall (id1 == id2))
always ( eventually [0:num2temporal#] (id1 < num1value#) -> (id2 <= num3value#) until [num5temporala#:num5temporalb#] (not (id3 < num4value#)) )
always ( id1 < num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2value# )
always ( not (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 == num3value# )
always ( id1 >= num1value# and not (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
always ( id1 == id2 or id3 > num1value# -> once [num2temporala#:num2temporalb#] (id4 == id5) )
always (not (id1 < num1value#) or id2 <= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( rise (id1 > num1value#) -> always (eventually (id2 == num2value#)) )
always ( not (id1 > num1value#) and not (id2 == num2value#) -> (id3 <= num3value#) until [0:num5temporal#] (rise (id4 < num4value#)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always (id1 > num1value# and id2 < num2value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# or id2 == id3)
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> (id3 >= num3value#) until [0:num5temporal#] (id4 >= num4valuea# and id4 < num4valueb#) )
always ( id1 == num1value# or not rise (id2 == id3) -> always [num3temporala#:num3temporalb#] (id4 < num2value#) )
always ( historically (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id2 >= num2valuea# and id2 < num2valueb#))) )
always [0:num2temporal#] (not fall (id1 == num1value#))
eventually [0:num2temporal#] (id1 >= num1value# or id2 == id3)
always ( rise (id1 > num1value#) -> (not (id2 == num2value#)) until (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually (rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always [0:num2temporal#] (not fall (id1 == num1value#) and id2 == id3)
always ( id1 == id2 or id3 == num1value# -> id4 <= num2value# or id5 == id6 )
always ( fall (historically (id1 == num1value#)) -> eventually (always [0:num2temporal#] (not (id2 == id3))) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> id3 > num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( not (historically (id1 < num1value#)) -> historically [0:num3temporal#] (id2 < num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# or id2 <= num2value#)
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( rise (id1 <= num1value#) or rise (id2 >= num2value#) -> always [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> fall (id2 >= num2valuea# and id2 <= num2valueb#) and id3 > num3value# )
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always [0:num2temporal#] (not rise (id1 == id2) or (id3 > num1valuea# and id3 < num1valueb#))
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) and id2 == id3 -> (id4 <= num2value#) until (id5 == num3value#) )
always [0:num3temporal#] (id1 <= num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
eventually (not fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [0:num3temporal#] (id1 == num1value# and not (id2 <= num2value#))
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) )
always ( id1 == num1value# -> eventually (always (id2 >= num2value#)) )
always ( not fall (id1 > num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always (not (id1 >= num1value#) or id2 < num2value#)
always (id1 == num1value# or id2 < num2value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> (id2 >= num2value#) until (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 < num1value#) and rise (id2 > num2value#) -> id3 <= num3value# )
always [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( historically (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (not (id1 > num1value#))
always (not (id1 == num1value#) and id2 < num2value#)
always (id1 == num1value#)
always ( rise (id1 == num1value#) or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 <= num3value#))) )
eventually [0:num2temporal#] (id1 < num1value#)
always ((id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always (id1 >= num1value#)
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
eventually [num1temporala#:num1temporalb#] (not (id1 == id2))
always ( always (not rise (id1 == id2)) -> always (eventually [num2temporala#:num2temporalb#] (fall (id3 == num1value#))) )
always ( rise (id1 == id2) -> id3 == id4 )
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 == id2) -> not fall (id3 == num1value#) and id4 < num2value# )
eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 > num2value#) )
always (not (id1 > num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id3 < num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 > num2value#) )
eventually (rise (id1 == num1value#))
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( (id1 == id2) since [0:num1temporal#] (rise (id3 == id4)) -> always [0:num3temporal#] (id5 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> not fall (id3 > num3value#) )
always ( eventually (id1 < num1value#) -> always [0:num3temporal#] (not rise (id2 >= num2value#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 and id3 == id4 -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (not (id5 > num1valuea# and id5 < num1valueb#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 >= num2valuea# and id2 < num2valueb# )
always ( rise (id1 <= num1value#) or id2 >= num2value# -> not (id3 < num3value#) )
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( once [num2temporala#:num2temporalb#] (not (id1 >= num1value#)) -> (id2 == id3) since [0:num4temporal#] (rise (id4 < num3value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == id3))) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
always (not (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 <= num2value#))
eventually (not (id1 == id2) or id3 <= num1value#)
always ( eventually [0:num2temporal#] (id1 == num1value#) -> not (eventually (id2 > num3valuea# and id2 < num3valueb#)) )
always ( id1 < num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( id1 == id2 and id3 > num1value# -> not fall ((id4 > num2valuea# and id4 <= num2valueb#) since (id5 == id6)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
always ( fall (id1 == num1value#) -> not (id2 < num2value#) )
always ( always [0:num2temporal#] (id1 == num1value#) -> not ((id2 == id3) until [num4temporala#:num4temporalb#] (id4 >= num3value#)) )
eventually [0:num3temporal#] (rise (id1 > num1value#) or not (id2 >= num2value#))
always ( fall (id1 == num1value#) -> not (always [num3temporala#:num3temporalb#] (not (id2 < num2value#))) )
always (id1 > num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( fall (once [num2temporala#:num2temporalb#] (not rise (id1 > num1valuea# and id1 < num1valueb#))) -> eventually [num4temporala#:num4temporalb#] (always (id2 < num3value#)) )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 == num1value#) -> id2 <= num2value# or (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 == id2 and not (id3 < num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (not fall (id2 == num2value#))) )
eventually (id1 <= num1value# or id2 < num2value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
always ( not (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 < num3value#)) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
eventually (fall (id1 == num1value#))
always ( rise (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> not rise (always (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not (historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
eventually (id1 >= num1value#)
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
eventually [0:num3temporal#] (id1 > num1value# or not (id2 == num2value#))
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> fall (id3 > num1valuea# and id3 < num1valueb#) or (id4 > num2valuea# and id4 <= num2valueb#) )
always ( historically (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( id1 <= num1value# -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [0:num4temporal#] (id3 <= num3value#) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 < num2value#) -> fall (historically [0:num4temporal#] (id3 == num3value#)) )
always (id1 <= num1value# and not (id2 < num2value#))
always ( id1 > num1value# and not (id2 < num2value#) -> not (id3 == num3value#) )
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
eventually [0:num1temporal#] (fall (id1 == id2))
always (id1 > num1value#)
always ( id1 == num1value# and id2 == num2value# -> always [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( (id1 >= num1value#) since [0:num3temporal#] (id2 <= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( rise (id1 < num1value#) or id2 > num2value# -> always (eventually [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( id1 > num1value# -> always [0:num3temporal#] (eventually (rise (id2 == num2value#))) )
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( id1 == num1value# and id2 == num2value# -> not (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (fall (id2 == num2value#)) )
eventually [0:num3temporal#] (not (id1 >= num1value#) or id2 <= num2value#)
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 > num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( id1 < num1value# and rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always ( (id1 == id2) since [0:num2temporal#] (id3 >= num1value#) -> not fall ((not (id4 == num3value#)) until (id5 == num4value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (rise (id2 == id3)) )
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 == id5 )
always ( fall (id1 == id2) -> rise ((id3 >= num1valuea# and id3 <= num1valueb#) until [0:num2temporal#] (id4 == id5)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) )
always ( eventually (rise (id1 > num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( id1 == id2 and id3 >= num1value# -> always (eventually [0:num2temporal#] (fall (id4 == id5))) )
always ( id1 < num1value# or rise (id2 > num2value#) -> rise (id3 > num3value#) )
always ( not rise (id1 == num1value#) or id2 <= num2value# -> (id3 > num3valuea# and id3 <= num3valueb#) or id4 == id5 )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == id3) -> id4 == num2value# and rise (id5 < num3value#) )
always ( id1 >= num1value# or id2 > num2value# -> always [0:num4temporal#] (id3 == num3value#) )
always ( id1 >= num1value# -> id2 < num2value# )
always ( id1 >= num1value# and id2 == num2value# -> eventually (always (not (id3 == id4))) )
always [0:num1temporal#] (id1 == id2)
always ( not (historically (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always [0:num1temporal#] (id1 == id2)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 > num2valuea# and id2 <= num2valueb# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always (id1 <= num1value#)
always ( rise (id1 == num1value#) -> eventually (always (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not rise (id2 == id3) -> not fall (id4 >= num2value#) or id5 <= num3value# )
always ( once [0:num2temporal#] (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
eventually (id1 == num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( id1 <= num1value# or rise (id2 == num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == id2 -> id3 <= num1value# and fall (id4 > num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 == id2) -> id3 == num1value# )
always [0:num3temporal#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == num1value# -> id2 >= num2value# )
always ( rise (id1 == num1value#) -> fall ((id2 <= num2value#) until [0:num4temporal#] (id3 > num3value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( always (id1 < num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( id1 > num1value# and id2 <= num2value# -> eventually [num3temporala#:num3temporalb#] (rise (id3 == id4)) )
always ( once [0:num1temporal#] (id1 == id2) -> eventually (always [num3temporala#:num3temporalb#] (not (id3 >= num2value#))) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not fall (id2 == num2value#))) )
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( not rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually (always (id2 > num3valuea# and id2 < num3valueb#)) )
always ( id1 < num1value# and not (id2 == num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) until (id4 >= num4value#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always (id1 == num1value# and id2 <= num2value#)
always ( fall (id1 == num1value#) and id2 >= num2value# -> id3 >= num3value# )
eventually (id1 == id2 or rise (id3 >= num1value#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> (id3 == num1value#) since (rise (id4 == num2value#)) )
always ( id1 == num1value# -> (id2 >= num2value#) until (id3 == id4) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not rise ((id2 <= num2value#) since (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 < num3value# )
always ( rise (id1 <= num1value#) -> not (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> not (id2 == id3) )
always ( id1 > num1value# -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
always ( id1 == id2 and id3 > num1value# -> id4 < num2value# )
eventually [0:num3temporal#] (not (id1 < num1value#) and id2 == num2value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 < num1value#) and rise (id2 < num2value#) -> id3 == id4 )
always ( not ((not fall (id1 == num1value#)) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually [num5temporala#:num5temporalb#] (always (not (id3 < num4value#))) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (not (id2 <= num3value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 and id4 < num2value# )
eventually [0:num2temporal#] (not (id1 == num1value#))
always ( id1 >= num1value# and fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (rise (id2 == id3)) )
always ( not ((id1 == num1value#) since [num2temporala#:num2temporalb#] (id2 == id3)) -> not ((id4 > num3value#) until [0:num5temporal#] (rise (id5 == num4value#))) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always (id2 > num3valuea# and id2 < num3valueb#)) )
always ( historically [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> always [0:num4temporal#] (id2 > num3value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually [0:num3temporal#] (id2 > num2value#)) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> not (eventually (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# and id3 > num3value# )
always ( id1 == num1value# and not (id2 <= num2value#) -> id3 <= num3value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# or id2 >= num2value# -> id3 >= num3value# or id4 == num4value# )
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually (id1 >= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise ((id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#)) )
always [num2temporala#:num2temporalb#] (not (id1 >= num1value#))
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2value#))) )
eventually [0:num2temporal#] (id1 == id2 or id3 >= num1value#)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 >= num1value# and id2 <= num2value# -> eventually (id3 > num3value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always ( rise (id1 < num1value#) -> always (id2 == num2value#) )
always ( rise (id1 == id2) -> eventually (id3 == id4) )
always ( rise (id1 > num1value#) -> not rise (eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ((id1 > num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( id1 == num1value# or id2 < num2value# -> (not (id3 == id4)) until (id5 <= num3value#) )
always ( id1 > num1value# and id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id4 >= num2valuea# and id4 <= num2valueb#))) )
eventually [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 > num1value# and not (id2 == id3) -> always (eventually [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 <= num1value# or rise (id2 == num2value#) -> not rise (eventually (id3 == id4)) )
always ( id1 == id2 -> not (id3 <= num1value#) )
always ( id1 == id2 or not (id3 == id4) -> (id5 == num1value#) until [num2temporala#:num2temporalb#] (rise (id6 == id7)) )
always ( eventually [0:num2temporal#] (rise (id1 < num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == id3))) )
always ( not fall (historically [0:num2temporal#] (not (id1 <= num1value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (rise (id3 > num3value#))) )
always ( fall (id1 == id2) -> id3 <= num1value# and (id4 >= num2valuea# and id4 <= num2valueb#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 == id2) -> rise (id3 >= num1valuea# and id3 < num1valueb#) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> once [num3temporala#:num3temporalb#] (not fall (id2 >= num2value#)) )
always [0:num3temporal#] (not fall (id1 >= num1value#) and not (id2 == num2value#))
always [0:num1temporal#] (id1 == id2)
eventually (id1 < num1value#)
always ( rise (id1 == num1value#) -> not (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always (id1 == num1value#)
eventually [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 == id2) -> id3 == num1value# )
always ( id1 == num1value# and id2 > num2value# -> not fall (id3 > num3valuea# and id3 < num3valueb#) and id4 <= num4value# )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 <= num1value#) -> (id2 < num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( fall (id1 == id2) -> (id3 >= num1valuea# and id3 < num1valueb#) and id4 <= num2value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> rise (id2 > num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 > num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( once [0:num2temporal#] (fall (id1 > num1valuea# and id1 <= num1valueb#)) -> (not (id2 > num3valuea# and id2 <= num3valueb#)) since (id3 > num4value#) )
always ( not (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 == id3) until [0:num3temporal#] (not (id4 == id5)) )
always ( id1 <= num1value# and id2 > num2value# -> always [0:num4temporal#] (id3 > num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> fall (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
eventually [0:num3temporal#] (rise (id1 >= num1value#) and rise (id2 == num2value#))
always (not (id1 > num1value#))
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( rise (id1 == id2) -> once [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [0:num3temporal#] (id1 > num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always ( once (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2value#) -> historically [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 == id2) -> id3 >= num1value# and id4 < num2value# )
always ( not fall (historically [num2temporala#:num2temporalb#] (id1 > num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 < num3value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> always (eventually (id2 > num2value#)) )
always [0:num2temporal#] (not (id1 == id2) and id3 == num1value#)
always ( historically [0:num2temporal#] (id1 >= num1value#) -> eventually (id2 > num3valuea# and id2 < num3valueb#) )
always (id1 > num1value#)
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) or id2 <= num2value#)
always ( not ((id1 == id2) since [0:num2temporal#] (id3 == num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id4 >= num3valuea# and id4 < num3valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always ( fall (id1 == id2) -> id3 > num1value# )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> id3 > num3value# and id4 > num4value# )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) or id2 == num2value# -> fall (eventually (fall (id3 >= num3valuea# and id3 < num3valueb#))) )
always ( id1 < num1value# and not (id2 == id3) -> id4 < num2value# )
always (id1 < num1value# or id2 >= num2value#)
always ( id1 <= num1value# -> id2 >= num2valuea# and id2 < num2valueb# )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 == id2) -> (not fall (id3 >= num1valuea# and id3 <= num1valueb#)) until (id4 < num2value#) )
eventually [0:num2temporal#] (rise (id1 == num1value#))
eventually [0:num2temporal#] (id1 == num1value#)
always ( always [num1temporala#:num1temporalb#] (id1 == id2) -> once [num3temporala#:num3temporalb#] (id3 < num2value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( (id1 <= num1value#) since (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always ( id1 == id2 -> id3 == num1value# )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#))
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually (id1 <= num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num3valuea# and id2 <= num3valueb#) until [num5temporala#:num5temporalb#] (not fall (id3 == num4value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 <= num2value#)
always ( id1 == id2 and rise (id3 <= num1value#) -> once [0:num3temporal#] (not (id4 == num2value#)) )
always ( id1 == num1value# or not (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# or fall (id3 > num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 == num1value#) -> not (once [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always [0:num3temporal#] (id1 == num1value# and not fall (id2 >= num2value#))
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 > num2value#))) )
eventually [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 <= num1valueb#))
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (fall (id3 == id4)) )
always ( eventually (not fall (id1 == id2)) -> eventually [num2temporala#:num2temporalb#] (always (id3 == num1value#)) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (not (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 < num1valueb#))
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id4 == id5)) )
always ( rise (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) or id2 > num2value# -> id3 > num3valuea# and id3 < num3valueb# )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (id3 < num1value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 > num1value#) -> not ((id2 > num2valuea# and id2 < num2valueb#) since [num4temporala#:num4temporalb#] (not rise (id3 == num3value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1value#) or id2 > num2value# -> eventually (always [0:num4temporal#] (id3 <= num3value#)) )
always ( id1 == num1value# -> id2 == id3 )
always ( historically [0:num2temporal#] (id1 > num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
eventually [0:num3temporal#] (fall (id1 == num1value#) or id2 > num2value#)
always ( id1 <= num1value# and id2 == id3 -> eventually [0:num3temporal#] (always (not rise (id4 == num2value#))) )
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (rise (id2 == num2value#))) )
always (id1 > num1value#)
always ( id1 == num1value# and id2 <= num2value# -> rise ((not (id3 >= num3value#)) until (id4 > num4value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#) -> always (id3 > num3value#) )
always ( not fall (id1 >= num1value#) and rise (id2 < num2value#) -> not rise (id3 > num3value#) and id4 == id5 )
always ( not rise (id1 == id2) or id3 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( id1 == num1value# -> eventually (id2 > num2value#) )
always ( fall (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num2temporal#] (not (id1 < num1value#))
eventually [0:num1temporal#] (id1 == id2)
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> not (eventually [0:num4temporal#] (id2 < num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num2temporal#] (fall (id2 == id3))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always [0:num2temporal#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [0:num1temporal#] (rise (id1 == id2))
always ( eventually (id1 > num1value#) -> always [0:num3temporal#] (eventually (not fall (id2 > num2value#))) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
always ( id1 > num1value# -> not (id2 == id3) and id4 >= num2value# )
always [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not rise ((id2 == id3) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
eventually [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [0:num1temporal#] (id1 == id2)
eventually (id1 == num1value# or id2 == num2value#)
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 < num1value# and rise (id2 > num2value#) -> eventually (always [0:num4temporal#] (not (id3 >= num3valuea# and id3 < num3valueb#))) )
eventually (id1 > num1value# and not rise (id2 == id3))
always ( id1 == id2 and fall (id3 == num1value#) -> not (always (id4 < num2value#)) )
eventually [0:num2temporal#] (not (id1 == id2) and id3 < num1value#)
always (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) -> always (eventually (id3 > num4valuea# and id3 < num4valueb#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 or id4 > num2value# )
always ( rise (id1 <= num1value#) -> fall (eventually [0:num3temporal#] (not (id2 > num2value#))) )
always ( rise (id1 > num1value#) and not (id2 == num2value#) -> always [num3temporala#:num3temporalb#] (id3 == id4) )
always (not rise (id1 == num1value#))
always ( id1 < num1value# or id2 < num2value# -> not (id3 > num3value#) and (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 < num2value#)) since [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 > num1value# and rise (id2 < num2value#) -> id3 == num3value# or id4 == id5 )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 >= num1value#) -> not fall ((id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 == id2 and id3 == id4 -> id5 >= num1valuea# and id5 <= num1valueb# )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always [0:num3temporal#] (id1 == num1value# and not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not fall (id1 == id2) and rise (id3 <= num1value#) -> eventually [0:num3temporal#] (id4 < num2value#) )
eventually (rise (id1 == num1value#) and rise (id2 > num2value#))
always ( id1 == id2 or id3 == num1value# -> id4 < num2value# )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( not (id1 < num1value#) or rise (id2 >= num2value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 > num1value#) and rise (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( id1 == num1value# or id2 > num2value# -> id3 >= num3value# )
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == num2value#) and rise (id3 <= num3value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 <= num1value# and id2 < num2value# -> id3 == id4 )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not (eventually [num4temporala#:num4temporalb#] (rise (id3 < num3value#))) )
always ( id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3value# )
eventually (not (id1 == num1value#))
always [0:num2temporal#] (id1 == id2 or not (id3 < num1value#))
always [num3temporala#:num3temporalb#] (not (id1 == num1value#) or id2 <= num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( not (once (rise (id1 > num1value#))) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( not (eventually [0:num2temporal#] (id1 >= num1value#)) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id2 < num3value#))) )
always ( id1 <= num1value# -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( not (id1 == num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since (id2 >= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 <= num1value#)) -> not (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num3value#))) )
always ( rise (id1 >= num1value#) and rise (id2 < num2value#) -> id3 < num3value# )
always ( id1 == num1value# and id2 >= num2value# -> not (always (not rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( id1 >= num1value# and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 <= num1value#) -> (id2 == id3) until (id4 == id5) )
always (id1 == id2)
always (not (id1 == num1value#) and id2 <= num2value#)
always ( id1 <= num1value# -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 <= num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id4 > num2value#))) )
always (not (id1 < num1value#) and id2 > num2value#)
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 >= num1value#) and rise (id2 > num2value#) -> id3 == id4 )
always ( rise (id1 > num1value#) -> id2 == id3 )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 >= num3value#))) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always [0:num2temporal#] (not (id1 == id2) and id3 <= num1value#)
always ( rise (id1 < num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( always [0:num2temporal#] (not (id1 >= num1value#)) -> not ((id2 > num3value#) until [num5temporala#:num5temporalb#] (id3 < num4value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (not (id3 <= num3value#)) )
always [0:num3temporal#] (not (id1 <= num1value#) and id2 <= num2value#)
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( id1 > num1value# -> (id2 == num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( rise (id1 == id2) -> id3 == id4 )
always ( id1 >= num1value# and not (id2 <= num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> always (eventually [num3temporala#:num3temporalb#] (not (id3 == id4))) )
always [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 < num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) since (fall (id3 >= num3valuea# and id3 < num3valueb#))) )
always ( id1 <= num1value# or id2 <= num2value# -> eventually [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 < num2value#))
eventually [0:num2temporal#] (not (id1 <= num1value#))
eventually [0:num3temporal#] (rise (id1 <= num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) and id2 > num2value# -> always [num4temporala#:num4temporalb#] (not fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( eventually [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 == num3value#))) )
always ( rise (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [0:num2temporal#] (id1 == id2 or not (id3 > num1value#))
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (fall (id3 == num3value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> not (eventually [0:num3temporal#] (id2 == num2value#)) )
eventually (id1 == num1value# or id2 == id3)
always ( id1 == id2 or id3 == num1value# -> always (eventually [num3temporala#:num3temporalb#] (rise (id4 < num2value#))) )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( once [0:num2temporal#] (id1 < num1value#) -> not (always [0:num3temporal#] (id2 == id3)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id3 == num1value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 == id2) since [0:num1temporal#] (rise (id3 == id4)) -> not ((id5 < num2value#) since (id6 <= num3value#)) )
always ( rise (id1 == id2) -> rise (id3 == id4) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (rise (id2 > num2value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 > num1value#))
always ( id1 > num1value# -> id2 == num2value# or rise (id3 < num3value#) )
always ( (not (id1 <= num1value#)) since [0:num2temporal#] (not (id2 == id3)) -> (not fall (id4 >= num3valuea# and id4 <= num3valueb#)) until [num5temporala#:num5temporalb#] (id5 == num4value#) )
always ( not (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( not rise (id1 == num1value#) or id2 == id3 -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 < num2value#)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 < num2value#)
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == id3))
eventually [0:num3temporal#] (rise (id1 == num1value#) and id2 > num2value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (rise (id1 == num1value#))
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( fall (id1 == num1value#) -> rise (id2 < num2value#) )
always ( rise (id1 == num1value#) and id2 == num2value# -> id3 == id4 )
always (not (id1 == id2) and not (id3 >= num1value#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 == num2value#))
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( rise (id1 >= num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> eventually [0:num4temporal#] (not fall (id3 == num3value#)) )
always ( id1 < num1value# -> id2 == num2value# )
always ( id1 > num1value# and id2 == id3 -> eventually [0:num3temporal#] (rise (id4 < num2value#)) )
always ( id1 <= num1value# -> not (id2 == num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 > num2value#) until (id3 <= num3value#)) )
always [0:num3temporal#] (id1 >= num1value# or id2 <= num2value#)
always ( id1 > num1value# or not (id2 > num2value#) -> not (id3 == id4) )
always ( rise (id1 <= num1value#) and not (id2 == id3) -> id4 == id5 )
always [0:num3temporal#] (not (id1 < num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 > num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 == id4) )
eventually [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#) or rise (id2 > num2value#))
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 == num1value#) -> always (eventually [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always [num2temporala#:num2temporalb#] (id1 > num1value# or id2 == id3)
eventually (rise (id1 == num1value#))
always ( id1 > num1valuea# and id1 < num1valueb# -> always (id2 == id3) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (not fall (id1 >= num1value#))
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num3temporal#] (id2 >= num2value#)) )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == num1value#) -> id2 == num2value# or id3 < num3value# )
always ( eventually [0:num2temporal#] (rise (id1 <= num1value#)) -> eventually (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) or (id3 > num3valuea# and id3 < num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( not ((id1 == num1value#) since [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) -> always [0:num5temporal#] (id3 >= num4value#) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 > num2value#)
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 > num2value#))
always ( not ((id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) -> always (not (id3 <= num4value#)) )
always ( id1 == num1value# -> (id2 >= num2value#) until [0:num4temporal#] (id3 > num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == num2value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == id2) -> (id3 > num1value#) until [num3temporala#:num3temporalb#] (id4 >= num2value#) )
always ( rise (id1 >= num1value#) -> rise (id2 > num2value#) )
always ( rise (id1 >= num1value#) -> id2 == id3 or id4 == num2value# )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( not (once [0:num2temporal#] (rise (id1 == num1value#))) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 == id4))) )
always ( rise (id1 == num1value#) or not rise (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (fall (id3 == num3value#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# and id2 == num2value# -> (id3 == id4) since [0:num4temporal#] (not (id5 <= num3value#)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#))
always [0:num2temporal#] (id1 >= num1value# and not (id2 == id3))
always ( rise (id1 == id2) -> id3 == id4 or id5 <= num1value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (not fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( not ((not rise (id1 >= num1value#)) since [num3temporala#:num3temporalb#] (id2 == num2value#)) -> eventually [num5temporala#:num5temporalb#] (always [0:num6temporal#] (id3 < num4value#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 < num2value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (id1 == id2 or id3 == id4)
always ( id1 == num1value# -> id2 <= num2value# and not (id3 < num3value#) )
always (id1 == num1value# and (id2 >= num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 <= num2value#) -> always [0:num5temporal#] (not (id3 < num4value#)) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always [0:num3temporal#] (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( eventually [0:num1temporal#] (id1 == id2) -> (id3 == num2value#) until [num4temporala#:num4temporalb#] (rise (id4 < num3value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 < num3value# and not (id4 > num4value#) )
always ( rise (id1 < num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3valuea# and id3 <= num3valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# or id3 == num3value# )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always ( id1 < num1value# or id2 < num2value# -> (not (id3 == num3value#)) until [num5temporala#:num5temporalb#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> not rise (eventually (id3 == id4)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> historically [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) )
always ( rise (id1 < num1value#) and not (id2 <= num2value#) -> not (eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 == id2) -> (id3 > num1value#) until [num3temporala#:num3temporalb#] (rise (id4 >= num2value#)) )
always ( rise (id1 <= num1value#) -> (id2 == id3) until (rise (id4 > num2value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( once [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (id3 > num2valuea# and id3 < num2valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 <= num1value# and id2 == id3 -> always (id4 > num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (always (not (id2 == id3))) )
always ( always [0:num2temporal#] (id1 < num1value#) -> not ((id2 <= num3value#) until (id3 == num4value#)) )
always [0:num3temporal#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == num1value# -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> historically [0:num2temporal#] (id2 == id3) )
always ( rise (id1 < num1value#) -> always (id2 == id3) )
always ( id1 == num1value# and rise (id2 <= num2value#) -> eventually [num3temporala#:num3temporalb#] (rise (id3 == id4)) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num3temporal#] (not (id1 > num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> once [num3temporala#:num3temporalb#] (id2 > num2value#) )
eventually (id1 > num1value#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
always ( id1 >= num1value# or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or id2 < num2value#)
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( not (id1 == id2) -> once [0:num2temporal#] (not (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 < num1value#) -> always (eventually [0:num3temporal#] (not (id2 > num2value#))) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always [0:num2temporal#] (not fall (id1 > num1value#))
always ( (id1 > num1value#) until [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 <= num4value#))) )
eventually (id1 > num1valuea# and id1 <= num1valueb#)
always (id1 > num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> (not (id2 == id3)) since [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 < num2valueb#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not fall (id2 >= num2value#)) until [0:num4temporal#] (rise (id3 > num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( id1 == id2 and not (id3 == id4) -> eventually [0:num1temporal#] (id5 == id6) )
always ( rise (id1 == num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 > num2value#)) )
always ( always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 == id3) until [0:num3temporal#] (fall (id4 == id5))) )
always ( id1 <= num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id3 == id4))) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 and not (id3 > num1valuea# and id3 < num1valueb#) -> (id4 > num2value#) until [0:num4temporal#] (id5 <= num3value#) )
always ( not (id1 == num1value#) and rise (id2 > num2value#) -> id3 == num3value# )
always ( id1 == num1value# or id2 > num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always [num1temporala#:num1temporalb#] (id1 == id2 or id3 == id4)
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( historically (not (id1 > num1valuea# and id1 < num1valueb#)) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( id1 == id2 -> not (id3 == num1value#) )
always ( rise (id1 >= num1value#) -> not ((not (id2 < num2value#)) until [num4temporala#:num4temporalb#] (rise (id3 > num3value#))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( not (id1 >= num1value#) or not (id2 < num2value#) -> eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( fall (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == id2) -> id3 < num1value# )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually (rise (id3 == id4))) )
always ( fall (id1 == id2) -> not ((id3 == num1value#) until [num3temporala#:num3temporalb#] (rise (id4 > num2value#))) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1valuea# and id1 < num1valueb#) and not (id2 == num2value#))
always ( not (always (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (not (id1 > num1value#) or id2 >= num2value#)
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 <= num4value#)) )
always [0:num3temporal#] (id1 == num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 < num1value# -> id2 == id3 )
eventually (id1 == num1value# or rise (id2 < num2value#))
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (not (id2 < num2value#)) )
always (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not (historically [num2temporala#:num2temporalb#] (id1 <= num1value#)) -> (not (id2 > num3valuea# and id2 <= num3valueb#)) until [0:num5temporal#] (fall (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> not (id4 <= num2value#) )
always ( (id1 <= num1value#) since (fall (id2 == num2value#)) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 == num3value#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always [0:num3temporal#] (not (id1 <= num1value#) and id2 < num2value#)
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 >= num3value#) )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 == num1value#) or not (id2 < num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 > num3valuea# and id3 < num3valueb#))) )
always ( fall (id1 == id2) -> id3 > num1value# )
always [num3temporala#:num3temporalb#] (not rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 == num2value#) )
eventually [0:num2temporal#] (id1 >= num1value#)
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 == id3))
eventually (rise (id1 == num1value#))
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( id1 == num1value# -> not (once [0:num3temporal#] (rise (id2 >= num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( id1 == num1value# and id2 == id3 -> id4 > num2valuea# and id4 < num2valueb# )
always ( id1 >= num1value# and not fall (id2 == num2value#) -> id3 == num3value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# or id2 <= num2value#)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( not rise (id1 == id2) and id3 == id4 -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (fall (id5 == num1value#))) )
always ( rise (id1 < num1value#) -> always (id2 == id3) )
always ( fall (historically (id1 >= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( id1 <= num1value# -> not (eventually (id2 < num2value#)) )
always ( not (once (not fall (id1 == num1value#))) -> always [0:num3temporal#] (id2 == num2value#) )
always ( id1 <= num1value# or id2 == num2value# -> id3 == id4 and id5 == num3value# )
always ( fall (id1 == num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (rise (id1 <= num1value#) and id2 == id3)
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 < num2value#)
always ( rise (id1 >= num1value#) -> not (id2 == id3) and id4 >= num2value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (not rise (id2 == num2value#))) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == id2 -> rise ((id3 <= num1value#) until [0:num3temporal#] (id4 > num2value#)) )
always ( id1 < num1value# -> id2 == id3 )
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 == num2value#) -> always (not fall (id3 > num4valuea# and id3 < num4valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
eventually (id1 < num1value# or id2 == id3)
always ( id1 >= num1value# or id2 > num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) until (id4 == num4value#) )
always ( not (id1 <= num1value#) -> not ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always ( id1 >= num1value# -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always [0:num1temporal#] (id1 == id2)
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 <= num2value#))
always ( id1 >= num1value# -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 >= num1value#))) )
always (id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> rise (id2 <= num2value#) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( not (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always [0:num2temporal#] (not rise (id1 == num1value#))
always ( rise (id1 >= num1value#) -> rise (id2 >= num2value#) )
always ( not (id1 <= num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == num1value#) -> not fall ((not (id2 > num2value#)) until [num4temporala#:num4temporalb#] (not rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always [0:num3temporal#] (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (not (id2 >= num2value#)) -> always (id3 < num4value#) )
always ( rise (id1 > num1value#) -> not ((id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> historically (id2 == id3) )
always ( once (id1 > num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 == id2 and rise (id3 < num1value#) -> (id4 <= num2value#) until [0:num4temporal#] (id5 > num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (not (id2 <= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always (id1 == num1value#)
always ( id1 >= num1value# or (id2 > num2valuea# and id2 <= num2valueb#) -> always (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == num1value#) -> not (historically [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> once [num3temporala#:num3temporalb#] (id2 < num2value#) )
eventually [0:num2temporal#] (id1 > num1value#)
eventually (rise (id1 <= num1value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( once [0:num2temporal#] (id1 > num1value#) -> rise ((id2 >= num3value#) until (not fall (id3 == num4value#))) )
always ( id1 == num1value# -> not (id2 < num2value#) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
always ( id1 == num1value# or id2 > num2value# -> fall (id3 == id4) )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
always ( (id1 == id2) since (rise (id3 >= num1value#)) -> rise (eventually [num3temporala#:num3temporalb#] (not fall (id4 > num2value#))) )
always ( always [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( id1 == id2 -> eventually [0:num1temporal#] (always (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( id1 >= num1value# -> id2 > num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( eventually [num1temporala#:num1temporalb#] (id1 == id2) -> historically [0:num3temporal#] (not (id3 == num2value#)) )
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( not (once [0:num2temporal#] (id1 < num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 == id3)) )
eventually [0:num3temporal#] (not (id1 == num1value#) or id2 <= num2value#)
always ( historically (id1 < num1value#) -> eventually [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 <= num1value#) -> historically [0:num3temporal#] (not (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( id1 == id2 or rise (id3 > num1valuea# and id3 < num1valueb#) -> eventually (id4 >= num2value#) )
always ( rise (id1 < num1value#) -> eventually (always (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> (id2 > num2value#) since [num4temporala#:num4temporalb#] (rise (id3 < num3value#)) )
always [0:num3temporal#] (not (id1 == num1value#) and id2 == num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> not (eventually [0:num3temporal#] (not (id2 == num2value#))) )
always ( id1 >= num1value# or id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> fall (id3 == num3value#) )
always ( fall (id1 == id2) -> rise (always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
eventually [num2temporala#:num2temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == num1value#) or id2 < num2value# -> id3 == id4 )
always ( id1 <= num1value# -> not ((id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (fall (id3 == num3value#))) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually (rise (id1 == num1value#) or fall (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 > num2value# )
always ( id1 == id2 or id3 >= num1value# -> id4 > num2valuea# and id4 < num2valueb# )
always ( rise (id1 < num1value#) and id2 == num2value# -> eventually [num3temporala#:num3temporalb#] (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#)) -> not (always (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> eventually (id2 == id3) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 < num2value#) )
always ( rise (id1 >= num1value#) -> not (always (not (id2 >= num2value#))) )
always ( (not fall (id1 > num1value#)) since (id2 == num2value#) -> (id3 == id4) until [0:num4temporal#] (id5 > num3value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( rise (id1 == num1value#) -> eventually (id2 == num2value#) )
always ( not rise (id1 >= num1value#) and rise (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 <= num3value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# and (id4 > num4valuea# and id4 < num4valueb#) )
always ( fall (once [num2temporala#:num2temporalb#] (not (id1 == num1value#))) -> always [0:num4temporal#] (id2 <= num3value#) )
always ( rise (id1 == num1value#) -> id2 == id3 and not fall (id4 >= num2value#) )
always ( rise (id1 == num1value#) -> (not (id2 < num2value#)) until (rise (id3 == id4)) )
eventually [0:num2temporal#] (not (id1 == id2) or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#) -> eventually [0:num4temporal#] (rise (id3 >= num3value#)) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 > num1value#)
always ( id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> once [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 >= num1value#) and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 < num2value#)) )
eventually (id1 == id2)
eventually (rise (id1 > num1value#))
always ( id1 > num1value# and id2 >= num2value# -> always (id3 >= num3value#) )
eventually [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (historically (not (id2 == id3))) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> historically [0:num3temporal#] (id2 > num2value#) )
always ( not (id1 > num1value#) or rise (id2 == num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (id1 == num1value#)
always ( id1 == id2 -> id3 == num1value# )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> id3 == num3value# )
always ( not (id1 == num1value#) and id2 > num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always (id1 == num1value#)
always ( rise (id1 == num1value#) -> (id2 == id3) since [0:num3temporal#] (not fall (id4 >= num2value#)) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# or not (id2 < num2value#))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 or id4 == id5 )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 > num2valuea# and id4 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> (id2 > num2value#) until [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (fall (id3 == num3value#)) )
always ( not (id1 <= num1value#) and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 == num1value#) -> (id2 < num2value#) until [0:num3temporal#] (not (id3 == id4)) )
always [0:num2temporal#] (not (id1 == id2) and id3 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always [num3temporala#:num3temporalb#] (id1 >= num1value# and not (id2 >= num2value#))
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 >= num2value#)
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 <= num1value#) and id2 >= num2value# -> eventually [0:num3temporal#] (not (id3 == id4)) )
always ( rise (id1 < num1value#) -> historically (id2 == id3) )
eventually [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value#)
always ( not rise ((id1 == num1value#) since [0:num3temporal#] (not (id2 < num2value#))) -> not ((id3 == id4) until [0:num5temporal#] (id5 > num4valuea# and id5 <= num4valueb#)) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always (id1 >= num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> always (eventually (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( historically [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> not (eventually (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 <= num1value#) -> eventually (always [num2temporala#:num2temporalb#] (not (id2 == id3))) )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( (id1 >= num1value#) until (id2 >= num2valuea# and id2 <= num2valueb#) -> fall (always [0:num4temporal#] (id3 > num3value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( not (id1 < num1value#) -> historically [0:num3temporal#] (id2 <= num2value#) )
always ( id1 == num1value# and id2 == id3 -> not (eventually [num3temporala#:num3temporalb#] (not fall (id4 > num2value#))) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 <= num1value# and id2 == id3 -> id4 == id5 )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) or id3 == num3value# )
always ( id1 == id2 -> not (id3 > num1valuea# and id3 < num1valueb#) )
always [0:num2temporal#] (not fall (id1 > num1value#))
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( fall (id1 == num1value#) -> not (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always [0:num3temporal#] (id1 < num1value# and not fall (id2 == num2value#))
always ( id1 >= num1value# or id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not rise (id4 >= num2value#))) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not (historically [0:num2temporal#] (id2 == id3)) )
always ( once (id1 == id2) -> not fall (historically [0:num2temporal#] (id3 > num1value#)) )
always ( not (id1 < num1value#) or rise (id2 <= num2value#) -> eventually [0:num4temporal#] (rise (id3 < num3value#)) )
always ( rise (id1 == id2) -> fall (id3 == num1value#) )
always ( fall (id1 == id2) -> id3 <= num1value# or id4 > num2value# )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> eventually (always [num2temporala#:num2temporalb#] (not rise (id4 == id5))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> once [num4temporala#:num4temporalb#] (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1value#) -> id2 < num2value# or not fall (id3 == num3value#) )
always ( eventually [num2temporala#:num2temporalb#] (not (id1 >= num1value#)) -> (id2 <= num3value#) until [0:num4temporal#] (id3 == id4) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (id2 > num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 > num2value#) -> always (id3 < num3value#) )
always ( rise (id1 == id2) -> (not (id3 >= num1value#)) until [0:num3temporal#] (id4 <= num2value#) )
always ( id1 > num1value# or id2 == id3 -> id4 <= num2value# )
always ( not (id1 < num1value#) and not (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 and id5 <= num3value# )
always ( rise (id1 < num1value#) -> id2 >= num2value# and id3 >= num3value# )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) or rise (id3 == num3value#) )
always ( once (rise (id1 > num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id4 == id5))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> once [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (not fall (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( fall (historically [0:num2temporal#] (not (id1 <= num1value#))) -> historically [0:num3temporal#] (id2 == id3) )
always ( rise (id1 < num1value#) -> (id2 < num2value#) until (not (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == id2) -> id3 < num1value# )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 == num1value#) )
always ( id1 == id2 and id3 == num1value# -> always [0:num3temporal#] (id4 >= num2valuea# and id4 < num2valueb#) )
always (id1 < num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [0:num2temporal#] (rise (id2 == id3))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( always (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 <= num1valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( fall (id1 == num1value#) -> eventually (id2 <= num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 <= num1value#) or id2 == num2value# -> always [0:num4temporal#] (id3 < num3value#) )
always [0:num1temporal#] (id1 == id2)
always ( fall (once (id1 == id2)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
eventually (not (id1 == num1value#))
always ( not (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 >= num3valuea# and id3 < num3valueb#) and id4 < num4value# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise (id2 == num2value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 <= num1value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( id1 >= num1value# or id2 == num2value# -> rise (id3 > num3value#) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (id3 == num1value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 < num1value# and id2 <= num2value# -> not ((id3 > num3value#) until [0:num4temporal#] (not (id4 == id5))) )
always ( rise (id1 <= num1value#) -> id2 == id3 and (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 < num1value#) -> (not rise (id2 == id3)) until [0:num3temporal#] (id4 > num2value#) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( not (id1 > num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always (id1 == num1value#)
eventually [0:num3temporal#] (id1 >= num1value# and id2 > num2value#)
always [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( rise (id1 <= num1value#) -> id2 > num2value# and not rise (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 <= num2value#) )
always ( historically [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#)) -> fall (eventually [num4temporala#:num4temporalb#] (rise (id2 < num3value#))) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( once [num2temporala#:num2temporalb#] (rise (id1 <= num1value#)) -> once [num4temporala#:num4temporalb#] (id2 == num3value#) )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise ((id2 >= num2value#) until [0:num4temporal#] (id3 >= num3value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 == num1value# -> not fall ((id2 == num2value#) until (id3 == id4)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 < num2value# or (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# or id2 == id3 -> always [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or id2 >= num2value#)
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (rise (id3 <= num1value#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 >= num1value# or rise (id2 <= num2value#) -> fall (id3 == num3value#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually (id1 == id2)
always ( not fall (id1 == id2) -> fall (id3 == num1value#) or id4 == id5 )
always (id1 > num1value# or id2 == id3)
always ( id1 == id2 or id3 == num1value# -> once (id4 >= num2value#) )
always ( once [num2temporala#:num2temporalb#] (not (id1 <= num1value#)) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (fall (id2 > num3valuea# and id2 < num3valueb#))) )
always ( id1 == num1value# or id2 <= num2value# -> id3 == num3value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (rise (id2 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 == num1value#) -> (not (id2 == num2value#)) until (id3 >= num3value#) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always (id3 <= num3value#)) )
always ( id1 <= num1value# -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (not (id2 > num2value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always [0:num2temporal#] (id1 > num1value#)
always ( id1 > num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( not ((id1 == id2) since [num2temporala#:num2temporalb#] (id3 < num1value#)) -> not fall ((id4 == num3value#) until [0:num5temporal#] (id5 < num4value#)) )
eventually [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( id1 == id2 and id3 < num1value# -> (id4 >= num2value#) until (id5 == id6) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> once [0:num4temporal#] (id2 > num3value#) )
always ( not (once [0:num2temporal#] (id1 == num1value#)) -> not (always [num4temporala#:num4temporalb#] (not (id2 == num3value#))) )
always ( (id1 == id2) since (not (id3 == id4)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id5 <= num1value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == num1value#) and id2 == num2value# -> not rise (id3 > num3value#) and rise (id4 >= num4value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> rise (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 or rise (id3 >= num1value#) -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( rise (id1 > num1value#) or not fall (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always (id1 == num1value# and not (id2 == id3))
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> id3 == num3value# and not (id4 > num4value#) )
always [0:num1temporal#] (id1 == id2)
always ( not (id1 == num1value#) -> once (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> not (eventually [num3temporala#:num3temporalb#] (not fall (id2 >= num2value#))) )
always ( id1 == id2 or id3 <= num1value# -> eventually (always (id4 == id5)) )
eventually [0:num3temporal#] (not (id1 < num1value#) and id2 > num2value#)
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( id1 == num1value# or rise (id2 <= num2value#) -> always (eventually (id3 == id4)) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 -> eventually (id3 > num1valuea# and id3 < num1valueb#) )
always ( not (historically [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id2 <= num3value#))) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( not (once [num2temporala#:num2temporalb#] (id1 > num1value#)) -> eventually [0:num4temporal#] (always (id2 == num3value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1value#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == id3))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> always [num4temporala#:num4temporalb#] (not fall (id3 == num3value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 < num1value#) -> id2 == num2value# or rise (id3 == num3value#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# or id2 == num2value#)
always ( id1 == num1value# -> id2 > num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always (not rise (id1 == id2))
always ( (id1 == num1value#) since (id2 < num2value#) -> eventually (not (id3 < num3value#)) )
always ( id1 == num1value# -> not (always (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> rise (once (not (id2 == num2value#))) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 < num1value# and id2 < num2value# -> always (eventually [0:num4temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 <= num1value#) and rise (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 <= num3value#))) )
always ( (not (id1 == id2)) since [0:num2temporal#] (rise (id3 <= num1value#)) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id4 < num3value#)) )
always ( rise (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 <= num1value#) -> always (id2 == id3) )
always ( (id1 == id2) since (id3 == id4) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id5 == num1value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 > num3value#)) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 == num1value#) -> eventually (id2 < num2value#) )
always ( rise (id1 <= num1value#) -> (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) since [num3temporala#:num3temporalb#] (rise (id3 == id4)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( (id1 > num1valuea# and id1 <= num1valueb#) or not fall (id2 == id3) -> (id4 == num2value#) until (fall (id5 == num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( not fall (historically (id1 == num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always (id1 > num1value#)
always ( not (once (not rise (id1 == id2))) -> always [0:num2temporal#] (eventually (id3 == num1value#)) )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 < num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 == num3value#)) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> (id2 >= num2value#) since [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 == num1value#) -> rise (id2 <= num2value#) and id3 < num3value# )
eventually [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always ( not (id1 == id2) -> (id3 > num1value#) until [0:num3temporal#] (rise (id4 <= num2value#)) )
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 == id2) -> id3 == id4 and id5 >= num1value# )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> once [0:num3temporal#] (rise (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == num1value#) -> not (id2 >= num2value#) )
always ( id1 < num1value# and id2 == num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( not (id1 >= num1value#) or id2 <= num2value# -> (not (id3 == num3value#)) until [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#) )
always [num2temporala#:num2temporalb#] (id1 > num1value# and id2 == id3)
eventually [0:num2temporal#] (not (id1 >= num1value#) and id2 == id3)
always ( id1 == id2 and id3 == num1value# -> once [0:num3temporal#] (rise (id4 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 == num2value#) and rise (id3 > num3valuea# and id3 <= num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always ( fall (id1 == id2) -> (id3 < num1value#) until (id4 < num2value#) )
eventually (id1 >= num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> not (eventually [0:num4temporal#] (id3 < num3value#)) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( id1 <= num1value# -> historically (id2 > num2value#) )
always ( rise (id1 == id2) -> not ((id3 > num1value#) until [num3temporala#:num3temporalb#] (rise (id4 >= num2valuea# and id4 <= num2valueb#))) )
always ( historically (id1 < num1value#) -> not (always (id2 >= num2value#)) )
always [0:num2temporal#] (id1 <= num1value#)
eventually [0:num3temporal#] (id1 > num1value# and not (id2 < num2value#))
eventually [0:num3temporal#] (rise (id1 >= num1value#) or id2 == num2value#)
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value#)
always ( id1 == num1value# -> id2 == id3 or id4 == id5 )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
eventually [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 == id2 -> fall (id3 > num1valuea# and id3 < num1valueb#) or id4 <= num2value# )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 >= num1value# -> (id2 == num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id3 >= num1value#))) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( eventually [0:num2temporal#] (fall (id1 == num1value#)) -> always [0:num4temporal#] (id2 == num3value#) )
always ( rise (id1 <= num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#) -> id3 == id4 )
always ( rise (id1 > num1value#) -> fall (eventually (rise (id2 > num2value#))) )
always ( id1 == num1value# and not (id2 > num2value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( not ((id1 < num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 == id4))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 >= num1value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1value#) )
always [0:num3temporal#] (id1 > num1value# or not (id2 <= num2value#))
always ( (id1 == id2) until [num2temporala#:num2temporalb#] (rise (id3 > num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id4 == id5)) )
eventually (id1 == num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( not (id1 == id2) and id3 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1value#) -> not (id2 == num2value#) )
always [0:num2temporal#] (id1 == id2 and not fall (id3 > num1valuea# and id3 < num1valueb#))
always ( id1 <= num1value# or not (id2 > num2valuea# and id2 < num2valueb#) -> not (id3 == id4) )
always ( not ((id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always (id1 == id2 or (id3 >= num1valuea# and id3 < num1valueb#))
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (not (id2 < num2value#)) )
eventually [0:num3temporal#] (id1 < num1value# and not fall (id2 >= num2value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( id1 <= num1value# -> rise (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( id1 > num1value# and not (id2 == num2value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (not rise (id3 == id4))) )
always ( id1 < num1value# -> not (id2 >= num2valuea# and id2 <= num2valueb#) and not (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( not (id1 <= num1value#) or id2 == id3 -> id4 == id5 )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (id2 >= num3value#) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually (id1 == id2)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 <= num1value# -> once [0:num2temporal#] (id2 == id3) )
always (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (id3 == num3value#) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> (not fall (id2 == id3)) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 > num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always [0:num2temporal#] (id1 > num1value# or not (id2 == id3))
always ( id1 > num1value# and id2 >= num2value# -> always [0:num3temporal#] (eventually (id3 == id4)) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( once [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (rise (id2 < num3value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 == num1value# and rise (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3value#) until [0:num5temporal#] (id4 == num4value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 == num1value# or id2 >= num2value# -> rise (id3 > num3value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
eventually [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always [0:num3temporal#] (id1 < num1value# and not (id2 < num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( historically [0:num2temporal#] (not (id1 == num1value#)) -> (id2 < num3value#) until [0:num4temporal#] (id3 == id4) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( not (id1 == num1value#) -> (id2 > num2value#) until [0:num4temporal#] (id3 < num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# and id2 == id3)
eventually (id1 >= num1value# or id2 == id3)
eventually [0:num2temporal#] (id1 == num1value#)
always (id1 > num1value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( not (historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 < num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 <= num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> not fall (id3 == id4) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 > num2value#) since [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 == num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 == num1value#) or id2 > num2value# -> id3 == id4 )
always ( id1 <= num1value# -> eventually [0:num2temporal#] (id2 == id3) )
always (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> once [0:num2temporal#] (rise (id2 == id3)) )
always ( rise (id1 <= num1value#) -> rise (id2 > num2valuea# and id2 <= num2valueb#) and id3 > num3value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 >= num1value# -> not (id2 >= num2value#) or id3 >= num3value# )
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 == id2) -> id3 > num1value# or rise (id4 < num2value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
eventually (rise (id1 > num1value#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 <= num1value#) -> id2 >= num2value# and id3 == num3value# )
always ( id1 == id2 or id3 > num1value# -> eventually (rise (id4 > num2value#)) )
always ( id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 > num3valuea# and id3 < num3valueb#)) )
always [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
eventually [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( not ((id1 == id2) since (id3 == id4)) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id5 > num1valuea# and id5 < num1valueb#))) )
always ( fall (id1 == id2) -> always (eventually (id3 == num1value#)) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> id3 == id4 )
eventually (id1 == num1value# or fall (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 == id2) until (id3 > num1valuea# and id3 < num1valueb#) -> (not rise (id4 > num2value#)) since [num4temporala#:num4temporalb#] (id5 > num3valuea# and id5 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) and id2 > num2value# -> id3 == num3value# )
always ( id1 == num1value# or id2 == num2value# -> id3 <= num3value# )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( once (rise (id1 > num1valuea# and id1 < num1valueb#)) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not fall (id2 == num2value#)) until [0:num4temporal#] (id3 > num3value#) )
always [num3temporala#:num3temporalb#] (not rise (id1 > num1value#) or id2 <= num2value#)
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always ( id1 == id2 and not (id3 == num1value#) -> (id4 <= num2value#) until (not (id5 == id6)) )
always ( fall (id1 == num1value#) and id2 <= num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( historically (id1 < num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 > num3value#) )
always ( not (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( id1 > num1value# and id2 > num2value# -> eventually (always [num3temporala#:num3temporalb#] (id3 == id4)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 >= num2value#)
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 -> id3 >= num1value# )
always ( (not (id1 == num1value#)) since [num3temporala#:num3temporalb#] (not (id2 == num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 < num4value#)) )
always ( not ((id1 < num1value#) since [0:num3temporal#] (id2 > num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (not (id3 == num4value#))) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 == num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 <= num1value#) )
always ( not fall (historically (id1 == id2)) -> (id3 == id4) until [0:num2temporal#] (rise (id5 == num1value#)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#)) )
always ( once [0:num2temporal#] (not (id1 < num1value#)) -> eventually (always [num4temporala#:num4temporalb#] (id2 == num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 and id3 == num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( rise (id1 > num1value#) -> fall (once [0:num3temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> not (eventually (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always (eventually (rise (id2 <= num2value#))) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 >= num2value#)) )
eventually (not fall (id1 > num1value#) or id2 < num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> always (eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 < num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (rise (id4 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# and not (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 <= num1value# or id2 > num2value# -> id3 > num3valuea# and id3 < num3valueb# )
eventually (id1 >= num1value#)
always ( rise (historically (not (id1 < num1value#))) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num3temporal#] (id1 < num1value# or id2 < num2value#)
always (id1 == id2 or id3 == id4)
always ( id1 > num1valuea# and id1 < num1valueb# -> rise (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> (id2 == num2value#) until (rise (id3 <= num3value#)) )
always ( id1 == id2 and id3 == id4 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id5 >= num1valuea# and id5 <= num1valueb#))) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> id2 <= num2value# )
eventually [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually (id1 == num1value#)
eventually [0:num2temporal#] (id1 >= num1value#)
eventually [0:num3temporal#] (rise (id1 <= num1value#) and id2 == num2value#)
always ( once [num2temporala#:num2temporalb#] (id1 > num1value#) -> always [0:num4temporal#] (not (id2 >= num3value#)) )
always ( id1 == num1value# and rise (id2 > num2value#) -> always [0:num3temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (not fall (id2 > num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (not fall (id4 >= num2valuea# and id4 <= num2valueb#))) )
always ( rise (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> always (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 <= num1value#) -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( once [0:num1temporal#] (id1 == id2) -> (id3 == num2value#) until (id4 == id5) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == id2 and fall (id3 == num1value#) -> (id4 == num2value#) since [num3temporala#:num3temporalb#] (id5 == id6) )
always ( fall (id1 == id2) -> not ((id3 > num1value#) until (id4 == id5)) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> fall ((id2 > num2value#) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (id2 <= num3value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> eventually (always (id2 < num2value#)) )
always ( id1 == id2 -> always [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> (id2 == num3value#) until [0:num5temporal#] (id3 == num4value#) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> id3 == id4 )
eventually [0:num2temporal#] (not rise (id1 == id2) and id3 < num1value#)
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 >= num2value#))) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) )
always ( id1 >= num1value# and rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
eventually (id1 > num1value#)
eventually (rise (id1 == num1value#))
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 == num1value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always [0:num1temporal#] (id1 == id2)
eventually (id1 < num1value# and id2 >= num2value#)
always (id1 <= num1value#)
eventually [0:num3temporal#] (rise (id1 <= num1value#) or id2 <= num2value#)
always [num3temporala#:num3temporalb#] (id1 == num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( (id1 > num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> (id3 == num3value#) until [num4temporala#:num4temporalb#] (id4 == id5) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> always (eventually (id2 >= num3value#)) )
always ( once [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == id3))) )
always ( rise (id1 > num1value#) -> not ((id2 >= num2valuea# and id2 <= num2valueb#) since [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always ( rise (id1 < num1value#) -> historically [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 or rise (id3 > num1value#) -> eventually (id4 > num2value#) )
always ( rise (id1 >= num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) or id3 < num3value# )
always ( id1 == num1value# and id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always (id1 == num1value# and id2 < num2value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 < num1value#))) )
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (id3 <= num1value#)) )
always ( fall (id1 == num1value#) -> id2 < num2value# and not rise (id3 == num3value#) )
always ( historically (id1 > num1valuea# and id1 <= num1valueb#) -> not fall ((id2 == num2value#) until [0:num4temporal#] (rise (id3 > num3value#))) )
always ( id1 == id2 or id3 >= num1value# -> not (once (id4 > num2value#)) )
eventually (rise (id1 >= num1value#) and id2 == num2value#)
always ( fall (once (id1 == id2)) -> always (eventually (rise (id3 == id4))) )
always [0:num3temporal#] (id1 < num1value# and not (id2 == num2value#))
always (id1 >= num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( fall ((id1 == num1value#) since [0:num3temporal#] (id2 == num2value#)) -> always [num5temporala#:num5temporalb#] (eventually (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( fall (id1 == id2) -> always (eventually (not (id3 == id4))) )
always ( once (rise (id1 >= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( always [0:num2temporal#] (id1 == num1value#) -> (id2 > num3value#) until [0:num5temporal#] (id3 > num4value#) )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually (id1 <= num1value# and not (id2 == num2value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 <= num2value#) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> not rise ((id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always (id1 <= num1value#)
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (not fall (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> eventually (id2 >= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 >= num1value# -> not (id2 <= num2value#) )
always [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 > num1value#) -> always (id2 == id3) )
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1value#) -> (id2 > num3value#) until [0:num5temporal#] (rise (id3 < num4value#)) )
always ( rise (id1 < num1value#) and rise (id2 <= num2value#) -> not (eventually [0:num4temporal#] (id3 <= num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 == num1value#) since [0:num2temporal#] (id2 == id3) -> historically [0:num4temporal#] (not (id4 >= num3value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not ((id2 >= num2value#) until (id3 < num3value#)) )
always ( rise (id1 == id2) -> id3 > num1value# and not (id4 == id5) )
always ( id1 > num1value# and id2 >= num2value# -> fall (once [num4temporala#:num4temporalb#] (not fall (id3 == num3value#))) )
always ( id1 == id2 -> eventually [0:num2temporal#] (rise (id3 == num1value#)) )
always ( fall (id1 == id2) -> rise (id3 == num1value#) )
always ( eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#)) -> always (eventually [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( (id1 == id2) since [0:num2temporal#] (id3 == num1value#) -> always [0:num4temporal#] (id4 < num3value#) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 > num2value#)
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> id2 == num2value# )
always (id1 > num1value#)
always ( (id1 <= num1value#) since (rise (id2 < num2value#)) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always ( rise (id1 >= num1value#) or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 == num1value#) and not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> historically [0:num3temporal#] (id3 == id4) )
always [0:num1temporal#] (not rise (id1 == id2))
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 <= num2value#)) )
always ( id1 >= num1value# or rise (id2 > num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (not fall (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 == id3))) )
eventually [0:num1temporal#] (not (id1 == id2))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> rise (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num1temporal#] (not (id1 == id2))
always ( fall (id1 == id2) -> id3 == id4 )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> (id2 == id3) since [0:num3temporal#] (id4 == num2value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( id1 == id2 and not (id3 > num1valuea# and id3 <= num1valueb#) -> (id4 == num2value#) until [0:num3temporal#] (id5 == id6) )
always ( historically (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 == num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> fall ((id3 == num3value#) since (id4 == num4value#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 == id4 )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( not (id1 > num1value#) -> id2 < num2value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> not ((id2 == num2value#) until [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( id1 >= num1value# -> rise (always (not (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> eventually (always [num4temporala#:num4temporalb#] (not (id3 <= num3value#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] (not (id1 > num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 == num2value#) since (id3 == id4) )
always ( fall (id1 == num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( once [0:num2temporal#] (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 == id3)) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 < num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( once [0:num2temporal#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( once [0:num2temporal#] (rise (id1 < num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> (id4 >= num2valuea# and id4 <= num2valueb#) since [0:num4temporal#] (rise (id5 > num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 > num2value#) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( id1 <= num1value# or rise (id2 > num2value#) -> id3 == num3value# or not fall (id4 >= num4value#) )
always (id1 == id2 and id3 == num1value#)
always ( rise (id1 == id2) -> fall (id3 > num1valuea# and id3 < num1valueb#) and id4 <= num2value# )
always ( rise (id1 == num1value#) -> not (id2 <= num2value#) )
eventually [num1temporala#:num1temporalb#] (not rise (id1 == id2) and id3 == id4)
always ( id1 > num1value# and id2 > num2value# -> eventually (always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always [num1temporala#:num1temporalb#] (id1 == id2 and id3 == id4)
always ( id1 >= num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always [0:num3temporal#] (id1 > num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1value# and id2 == id3 -> (id4 == id5) until (id6 < num2value#) )
always ( id1 > num1value# -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1value#) and id2 >= num2value# -> historically [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( rise (id1 == num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( not (historically [0:num1temporal#] (id1 == id2)) -> always [0:num3temporal#] (eventually (id3 > num2value#)) )
always ( id1 > num1value# or rise (id2 <= num2value#) -> id3 > num3value# )
always ( id1 == id2 or id3 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 > num2valuea# and id4 < num2valueb#))) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( (id1 == num1value#) until (id2 == id3) -> (id4 == id5) since [0:num3temporal#] (id6 < num2value#) )
always ( historically [num2temporala#:num2temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 <= num3value#) until [0:num5temporal#] (not fall (id3 >= num4value#)) )
always ( id1 <= num1value# -> eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# and rise (id3 > num3value#) )
always ( id1 == id2 and id3 == num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always (eventually [num4temporala#:num4temporalb#] (rise (id3 > num3value#))) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 == num2value#))
always ( not (id1 <= num1value#) and id2 == num2value# -> id3 == num3value# )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> rise (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> once (id3 > num1valuea# and id3 < num1valueb#) )
always ( rise (id1 > num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always [0:num3temporal#] (id1 <= num1value# and id2 < num2value#)
always ( rise (id1 >= num1value#) or id2 >= num2value# -> always (eventually [0:num4temporal#] (rise (id3 < num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#))) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 > num2value#)
always ( always [0:num2temporal#] (id1 >= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
always ( not fall (historically (id1 == id2)) -> eventually [0:num2temporal#] (id3 < num1value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1value# or not rise (id2 == id3) -> (id4 >= num2value#) since [0:num3temporal#] (id5 == id6) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always (id3 > num3value#) )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) and id3 > num3value# )
eventually (id1 >= num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( eventually [num1temporala#:num1temporalb#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 == num2value#))) )
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) until [num3temporala#:num3temporalb#] (fall (id2 > num2valuea# and id2 < num2valueb#))) -> eventually (id3 > num4value#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 > num1value#) -> id2 > num2value# or not (id3 < num3value#) )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> not (always (id3 < num1value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (id2 <= num2value#) -> always (eventually (id3 > num4valuea# and id3 < num4valueb#)) )
always ( (not (id1 == id2)) since (rise (id3 == id4)) -> eventually (always [0:num2temporal#] (id5 >= num1value#)) )
always ( id1 > num1value# -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (id1 == num1value#)
always (id1 == id2)
always [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 < num1value#) -> not (id2 == num2value#) )
eventually (rise (id1 >= num1value#))
always ( rise (id1 > num1value#) -> (id2 >= num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# and id3 >= num3value# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> not (always [0:num2temporal#] (not rise (id3 == num1value#))) )
always ( not (historically (id1 == num1value#)) -> eventually (always (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (always [0:num3temporal#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> (id3 == id4) until [0:num2temporal#] (not rise (id5 >= num1value#)) )
always ( eventually [0:num1temporal#] (id1 == id2) -> not (always [num3temporala#:num3temporalb#] (id3 == num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num2temporal#] (id2 == id3) )
eventually [0:num3temporal#] (rise (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> once (id3 == id4) )
always ( eventually [0:num2temporal#] (not (id1 < num1value#)) -> not ((not (id2 < num3value#)) since [num5temporala#:num5temporalb#] (id3 > num4value#)) )
always ( once [0:num2temporal#] (rise (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( id1 == id2 or id3 <= num1value# -> id4 == id5 )
always ( rise (id1 == num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always (id1 <= num1value# or id2 == num2value#)
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 <= num2value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
eventually (id1 == id2)
always ( id1 == id2 and rise (id3 >= num1value#) -> always (eventually (id4 > num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 or id4 < num2value# )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 > num2value#)
eventually (id1 == id2)
always ( id1 >= num1value# -> eventually (rise (id2 == num2value#)) )
eventually [0:num3temporal#] (not (id1 < num1value#) and id2 < num2value#)
always ( not (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> (id2 == num3value#) until (rise (id3 > num4value#)) )
eventually (not (id1 == num1value#))
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( id1 > num1value# and fall (id2 > num2valuea# and id2 <= num2valueb#) -> once [0:num4temporal#] (not (id3 > num3valuea# and id3 < num3valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) until (id2 == id3) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 < num2value#)) )
always ( id1 == id2 -> always (eventually [num2temporala#:num2temporalb#] (id3 < num1value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# -> (id2 == num2value#) until [0:num4temporal#] (id3 < num3value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 <= num1value#) )
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> (id3 >= num1value#) until (id4 < num2value#) )
always ( rise (id1 == id2) -> fall (eventually [num2temporala#:num2temporalb#] (fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( fall (id1 == num1value#) -> id2 == id3 )
always (id1 > num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
eventually (not fall (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( id1 <= num1value# -> rise (id2 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (always [0:num3temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 == num1value#) -> id2 == id3 or id4 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) until (rise (id4 == id5)) )
always ( rise (id1 == num1value#) -> eventually (always (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 > num1value#) -> once [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> not (eventually (rise (id2 >= num2value#))) )
always ( fall (id1 == num1value#) -> id2 == id3 )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always ( not fall ((id1 >= num1value#) since [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 <= num2valueb#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 < num4value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always (id1 >= num1valuea# and id1 < num1valueb#)
always (id1 == id2)
eventually (rise (id1 == id2))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
eventually [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always (not fall (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == id2) -> not (historically [0:num2temporal#] (id3 == num1value#)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 >= num1value#) -> eventually [0:num3temporal#] (always (id2 < num2value#)) )
always ( rise (id1 < num1value#) and rise (id2 <= num2value#) -> eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 < num1value#) -> not fall (id2 == id3) )
always ( rise (id1 < num1value#) -> not rise (id2 >= num2value#) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 >= num3value#)) )
eventually (id1 == num1value#)
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 == num1value# or rise (id2 < num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( once (id1 <= num1value#) -> fall ((id2 >= num2valuea# and id2 < num2valueb#) until [0:num3temporal#] (not (id3 == id4))) )
eventually [0:num2temporal#] (not fall (id1 >= num1value#))
always ( historically (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise ((id1 == num1value#) since [0:num3temporal#] (id2 <= num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 > num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually (id1 == num1value# and rise (id2 == num2value#))
always ( id1 == num1value# or fall (id2 == num2value#) -> rise (once [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always (not (id2 < num2value#))) )
always ( fall (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> (id2 == num3value#) until [num5temporala#:num5temporalb#] (rise (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> rise (id3 < num3value#) )
always ( not rise ((id1 == num1value#) since (id2 > num2value#)) -> rise (always [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always ( fall (once [0:num2temporal#] (id1 == num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always (id1 == id2)
always (id1 <= num1value# or id2 == id3)
always ( id1 >= num1value# and rise (id2 >= num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always (id1 == id2 and id3 <= num1value#)
always ( id1 == id2 -> eventually [0:num2temporal#] (id3 > num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [num1temporala#:num1temporalb#] (not rise (id1 == id2))
always ( historically [num2temporala#:num2temporalb#] (not (id1 == num1value#)) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not fall (id2 == id3))) )
always ( id1 == num1value# -> id2 > num2value# )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( fall (id1 == num1value#) or rise (id2 < num2value#) -> id3 > num3value# or id4 < num4value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 == num2value#) -> (id3 >= num3valuea# and id3 <= num3valueb#) or (id4 >= num4valuea# and id4 <= num4valueb#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always ( id1 == id2 or not fall (id3 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 > num2value#))) )
always ( rise (id1 >= num1value#) -> historically [0:num3temporal#] (id2 < num2value#) )
eventually [0:num3temporal#] (id1 == num1value# and rise (id2 > num2value#))
always ( rise (id1 < num1value#) -> id2 == id3 )
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 > num1value#) -> (id2 > num2value#) since (not (id3 == id4)) )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) or id4 == id5 )
always ( eventually [0:num2temporal#] (rise (id1 < num1value#)) -> eventually [num3temporala#:num3temporalb#] (id2 == id3) )
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 >= num2value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and rise (id2 < num2value#))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (not (id2 == num2value#)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 > num2value#)
always ( once [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [num4temporala#:num4temporalb#] (eventually (id2 < num3value#)) )
eventually ((id1 > num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 >= num1value#) -> not (historically [0:num3temporal#] (not (id2 < num2value#))) )
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 >= num1value# and fall (id2 > num2valuea# and id2 < num2valueb#) -> not ((not (id3 == num3value#)) until [0:num4temporal#] (id4 == id5)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (id2 < num2value#) -> always [num5temporala#:num5temporalb#] (id3 > num4value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (id3 >= num1value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 >= num1value#) -> always (eventually [0:num3temporal#] (rise (id2 <= num2value#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) and not (id2 < num2value#) -> once [0:num3temporal#] (id3 == id4) )
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually (not rise (id1 == id2) and rise (id3 >= num1value#))
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 <= num1value#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 == id2 -> rise (id3 <= num1value#) )
always ( historically [0:num2temporal#] (not (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (fall (id3 == id4)) )
always ( fall (id1 == num1value#) -> always (eventually (not (id2 <= num2value#))) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 > num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always [0:num3temporal#] (not (id1 <= num1value#) and (id2 > num2valuea# and id2 <= num2valueb#))
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( id1 <= num1value# and id2 < num2value# -> not (eventually (id3 == id4)) )
eventually [0:num3temporal#] (not fall (id1 > num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 > num1value#)
always (id1 <= num1value# and id2 > num2value#)
eventually (rise (id1 > num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == num1value#) -> always (eventually [0:num2temporal#] (not (id2 == id3))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise (id2 >= num2value#) )
eventually (id1 > num1value#)
always [num3temporala#:num3temporalb#] (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 and id3 <= num1value# -> id4 <= num2value# )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always (id1 <= num1value# and id2 <= num2value#)
always ( rise (once [num1temporala#:num1temporalb#] (id1 == id2)) -> (id3 > num2valuea# and id3 < num2valueb#) until [0:num4temporal#] (id4 >= num3value#) )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> always (id2 == num2value#) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2value#)) -> not (always [0:num5temporal#] (id3 < num4value#)) )
eventually [0:num1temporal#] (not (id1 == id2))
always ( fall (id1 == num1value#) -> id2 == num2value# or not rise (id3 > num3value#) )
always ( rise (id1 == num1value#) and id2 == id3 -> (id4 > num2value#) until [0:num3temporal#] (not (id5 == id6)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 == num3value#))) )
eventually [0:num1temporal#] (id1 == id2)
always ( once [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually (always (not (id2 == num3value#))) )
always [0:num3temporal#] (id1 > num1value# or not (id2 > num2value#))
always ( id1 == num1value# -> fall (eventually (rise (id2 >= num2value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( always (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always [0:num2temporal#] (id1 == id2 or id3 > num1value#)
always ( rise (id1 == num1value#) -> always (id2 == num2value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually (id1 > num1valuea# and id1 < num1valueb#)
eventually (id1 <= num1value#)
always ( not (id1 == num1value#) or not (id2 < num2value#) -> fall (id3 == num3value#) )
always [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))
always ( (id1 < num1value#) since (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) and fall (id2 == num2value#) -> always [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 < num1value# and fall (id2 == num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [num3temporala#:num3temporalb#] (always (id3 == num2value#)) )
eventually (rise (id1 > num1value#) and id2 == id3)
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 >= num2value#))) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1value#) -> (id2 > num2valuea# and id2 <= num2valueb#) or id3 == num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 > num2value#)
eventually [0:num2temporal#] (rise (id1 < num1value#))
eventually [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
always ( rise (id1 >= num1value#) -> always (id2 >= num2value#) )
always (id1 > num1value# or id2 >= num2value#)
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num3valuea# and id2 < num3valueb#) until [0:num5temporal#] (rise (id3 >= num4value#)) )
eventually [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always (id2 <= num2value#) )
always ( (not (id1 >= num1value#)) until [num3temporala#:num3temporalb#] (not (id2 >= num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 > num4value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( once [num2temporala#:num2temporalb#] (id1 >= num1value#) -> always (id2 == num3value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always ( id1 == id2 -> (id3 == num1value#) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always [0:num3temporal#] (id1 >= num1value# or not (id2 == num2value#))
always ( fall (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (not (id4 == num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 == id2) -> fall (always [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always ( rise (id1 == num1value#) or id2 >= num2value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not (id3 == id4))) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num3temporal#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 > num2valuea# and id2 <= num2valueb#) or id3 <= num3value# )
eventually (id1 == id2 or id3 >= num1value#)
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> (id4 < num2value#) until [0:num4temporal#] (fall (id5 >= num3valuea# and id5 <= num3valueb#)) )
always ( rise (id1 >= num1value#) -> not (eventually [0:num2temporal#] (rise (id2 == id3))) )
always ( (not fall (id1 == id2)) until (id3 <= num1value#) -> once (id4 > num2valuea# and id4 < num2valueb#) )
always ( once (fall (id1 == num1value#)) -> not (eventually [0:num3temporal#] (not (id2 == num2value#))) )
always ( fall (id1 == id2) -> eventually (rise (id3 > num1value#)) )
always ( rise (id1 > num1value#) -> eventually (fall (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> (not (id2 == num2value#)) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1value#) -> not rise (id2 >= num2valuea# and id2 <= num2valueb#) and id3 >= num3value# )
eventually [0:num1temporal#] (id1 == id2)
always ( not (eventually [0:num2temporal#] (id1 == num1value#)) -> (id2 > num3valuea# and id2 <= num3valueb#) until [num5temporala#:num5temporalb#] (id3 >= num4valuea# and id3 < num4valueb#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 <= num1value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 == num3value#) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (rise (id2 <= num2value#)) )
eventually (id1 > num1value#)
always ( rise (id1 == id2) -> (id3 >= num1value#) until (not (id4 < num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 > num2value#) )
always ( rise (id1 <= num1value#) -> not ((id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> not ((not rise (id2 == num2value#)) since [num3temporala#:num3temporalb#] (id3 == id4)) )
eventually [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
eventually (not (id1 == id2) or id3 == id4)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not fall (id2 >= num2value#) )
always (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 < num1value#) -> (id2 == num2value#) until (fall (id3 == num3value#)) )
always ( (id1 == id2) until (id3 == num1value#) -> always [0:num2temporal#] (id4 == id5) )
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( not (id1 <= num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always ( (not fall (id1 > num1value#)) since (id2 == num2value#) -> always (eventually [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> once (rise (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and not (id2 < num2value#))
eventually [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 == num1value#))
always [0:num1temporal#] (id1 == id2)
always ( once [num2temporala#:num2temporalb#] (fall (id1 > num1valuea# and id1 <= num1valueb#)) -> rise (eventually (fall (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
always ( id1 == id2 and id3 <= num1value# -> eventually [0:num3temporal#] (always (id4 == num2value#)) )
always ( not (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 <= num3value# or id4 == num4value# )
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( id1 == id2 or rise (id3 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 > num2value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 >= num3valuea# and id2 < num3valueb#))) )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == id3)) )
always ( not (id1 > num1value#) -> eventually [0:num3temporal#] (always (not (id2 >= num2value#))) )
always (id1 > num1value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( eventually [0:num2temporal#] (id1 > num1value#) -> always (eventually [num4temporala#:num4temporalb#] (id2 > num3value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( (not (id1 > num1valuea# and id1 < num1valueb#)) since [num3temporala#:num3temporalb#] (id2 == num2value#) -> eventually (id3 <= num4value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 == num4value#)) )
always ( (id1 < num1value#) since [0:num3temporal#] (not (id2 == num2value#)) -> historically [0:num5temporal#] (id3 >= num4value#) )
eventually (not (id1 > num1value#))
always ( eventually [0:num1temporal#] (not (id1 == id2)) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 == id4))) )
always [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( rise (id1 <= num1value#) -> eventually (always (id2 == num2value#)) )
always ( id1 == id2 and id3 == num1value# -> id4 == num2value# )
always ( rise (id1 == num1value#) -> not (id2 >= num2valuea# and id2 < num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always [0:num1temporal#] (not (id1 == id2) or id3 == id4)
always ( rise (id1 == id2) -> rise (id3 == num1value#) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( once [0:num1temporal#] (fall (id1 == id2)) -> eventually [0:num3temporal#] (not (id3 == num2value#)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 == num2value#))) )
always (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> rise (id2 == num2value#) and id3 < num3value# )
always ( id1 == id2 and id3 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (not fall (id4 >= num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 -> always [0:num1temporal#] (eventually [num2temporala#:num2temporalb#] (rise (id3 == id4))) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( fall (id1 == id2) -> id3 == id4 and id5 == id6 )
always ( id1 == num1value# -> not (id2 == num2value#) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
eventually [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( fall (id1 == num1value#) -> not (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 < num1valueb#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 >= num2value#))) )
eventually (id1 == num1value#)
always ( rise (id1 == id2) -> not (eventually (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [0:num3temporal#] (id1 < num1value# and id2 == num2value#)
always [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and fall (id2 == num2value#))
always ( rise (id1 == id2) -> historically (not (id3 <= num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( (id1 == id2) until (not (id3 >= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> eventually (always [0:num3temporal#] (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( id1 == num1value# and rise (id2 < num2value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> once (id2 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always (eventually (rise (id4 == num2value#))) )
always ( rise (id1 > num1value#) -> eventually (id2 == id3) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( fall (id1 == id2) -> id3 == id4 )
eventually (rise (id1 < num1value#) and id2 == num2value#)
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 >= num1value# or rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always (id1 == num1value#)
always ( not rise (id1 > num1value#) and id2 == num2value# -> id3 == id4 )
always ( rise (id1 <= num1value#) -> once [0:num2temporal#] (id2 == id3) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 >= num1value#) -> historically (id2 < num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always (id1 >= num1value# and id2 <= num2value#)
always ( eventually [num2temporala#:num2temporalb#] (id1 == num1value#) -> (not (id2 == num3value#)) until [0:num5temporal#] (not (id3 > num4valuea# and id3 < num4valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# or id3 > num3value# )
always ( not (id1 == num1value#) and id2 == num2value# -> always [0:num4temporal#] (id3 <= num3value#) )
always ( once [num1temporala#:num1temporalb#] (rise (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 <= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
eventually ((id1 > num1valuea# and id1 <= num1valueb#) and rise (id2 == num2value#))
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
eventually ((id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 == num2value# )
always ( rise (id1 <= num1value#) or id2 == id3 -> id4 == id5 )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (fall (id2 == id3))) )
always ( rise (id1 > num1value#) -> fall (id2 == num2value#) or id3 == num3value# )
always ( eventually [num1temporala#:num1temporalb#] (id1 == id2) -> (id3 == id4) until [0:num3temporal#] (id5 > num2valuea# and id5 < num2valueb#) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1value#) -> not (id2 >= num2value#) )
always [0:num2temporal#] (id1 > num1value#)
always ( id1 == num1value# and id2 == num2value# -> eventually (always (id3 >= num3valuea# and id3 < num3valueb#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value# or id2 == id3)
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (id2 > num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 > num1value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise ((id2 <= num2value#) until [0:num4temporal#] (fall (id3 == num3value#))) )
eventually [0:num2temporal#] (id1 < num1value# or id2 == id3)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 > num1value#))
always ( fall (id1 == num1value#) -> not rise (always (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 >= num1value#) -> not (id2 == id3) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not fall (id3 == id4))) )
always ( id1 > num1value# -> not (always [0:num3temporal#] (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3value#)) )
always ( id1 >= num1value# and rise (id2 <= num2value#) -> not fall (eventually [num4temporala#:num4temporalb#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 > num3value#)) )
always [num2temporala#:num2temporalb#] (not (id1 < num1value#) or id2 == id3)
eventually [0:num2temporal#] (id1 > num1value#)
eventually (id1 <= num1value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( once (id1 == num1value#) -> (id2 >= num2value#) until (not rise (id3 == id4)) )
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 >= num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always (not fall (id3 > num1value#))) )
always ( id1 == num1value# and rise (id2 <= num2value#) -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (not fall (id1 >= num1value#))
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( not (id1 == id2) and id3 > num1value# -> eventually [0:num3temporal#] (id4 >= num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 == num1value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
always ( id1 == num1value# -> id2 == num2value# )
always ( fall (id1 == num1value#) -> (id2 > num2value#) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( id1 == id2 -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (fall (id3 > num3valuea# and id3 <= num3valueb#))) )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( rise (id1 < num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == id2 or id3 == id4 -> eventually [num2temporala#:num2temporalb#] (not (id5 <= num1value#)) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always (not fall (id1 > num1value#))
always ( id1 >= num1value# -> (id2 == id3) until [0:num3temporal#] (rise (id4 <= num2value#)) )
always ( not (id1 < num1value#) and id2 == num2value# -> (id3 == num3value#) until [0:num5temporal#] (id4 <= num4value#) )
always ( rise (id1 == num1value#) -> not ((not (id2 == num2value#)) until [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> id2 == id3 or id4 > num2value# )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 == num1value# and id2 == id3 -> eventually [0:num3temporal#] (id4 <= num2value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> not (once (not fall (id2 > num3value#))) )
eventually (not (id1 == num1value#))
always ( fall (id1 == id2) -> eventually (not (id3 <= num1value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num3temporal#] (id1 <= num1value# and rise (id2 < num2value#))
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 > num1value# and id2 == id3 -> eventually [num3temporala#:num3temporalb#] (rise (id4 > num2value#)) )
always ( rise (id1 < num1value#) -> not ((id2 == num2value#) until (id3 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 == id3)) until [0:num2temporal#] (rise (id4 == id5)) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 <= num1value# and id2 == num2value# -> id3 < num3value# )
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( once [num1temporala#:num1temporalb#] (rise (id1 == id2)) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id3 == num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 > num1value#)
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (eventually (rise (id2 < num2value#))) )
eventually (id1 == num1value#)
always ( rise (id1 == num1value#) or rise (id2 <= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( id1 < num1value# -> id2 == id3 )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 == id2 or rise (id3 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( id1 <= num1value# and id2 >= num2value# -> not rise ((not (id3 < num3value#)) since (id4 <= num4value#)) )
always ( id1 <= num1value# and id2 == id3 -> id4 == id5 and rise (id6 <= num2value#) )
always [0:num2temporal#] (id1 < num1value#)
always [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
always [0:num3temporal#] (id1 <= num1value# and not fall (id2 == num2value#))
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always (id1 >= num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 <= num2value# )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> not (id2 == id3) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 < num1value# and id2 >= num2value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always [0:num1temporal#] (id1 == id2)
always ( rise ((id1 > num1value#) since [0:num3temporal#] (id2 > num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 == num4value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 <= num2value#)
always ( fall (id1 == id2) -> once [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( (id1 > num1value#) since [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (fall (id3 == num4value#))) )
always ( id1 <= num1value# or id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) and id4 == id5 )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
eventually (not (id1 <= num1value#) or id2 == num2value#)
eventually (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( (not (id1 == num1value#)) until [num3temporala#:num3temporalb#] (rise (id2 > num2value#)) -> not ((id3 <= num4value#) until [num5temporala#:num5temporalb#] (id4 == id5)) )
always ( id1 <= num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and rise (id2 >= num2value#))
always ( id1 > num1value# and id2 <= num2value# -> id3 == num3value# )
always (id1 == id2 or id3 == num1value#)
eventually [0:num1temporal#] (not (id1 == id2))
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always [num3temporala#:num3temporalb#] (id1 > num1value# and (id2 >= num2valuea# and id2 < num2valueb#))
always ( id1 == id2 and id3 <= num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id4 <= num2value#)) )
always [0:num2temporal#] (not (id1 <= num1value#))
always ( fall (id1 == num1value#) -> historically (id2 > num2valuea# and id2 < num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( fall (id1 == id2) -> not rise ((id3 == num1value#) since (not rise (id4 == num2value#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (not (id2 > num2value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and id2 == num2value#)
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (not (id2 > num2value#)) -> not (historically [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> (id2 >= num3value#) until [0:num5temporal#] (fall (id3 > num4valuea# and id3 < num4valueb#)) )
always ( id1 <= num1value# or rise (id2 >= num2value#) -> eventually [0:num3temporal#] (always (id3 == id4)) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> rise (id2 <= num2value#) and rise (id3 > num3value#) )
always ( (id1 > num1value#) since (rise (id2 <= num2value#)) -> not ((not fall (id3 == num3value#)) until [num5temporala#:num5temporalb#] (id4 > num4value#)) )
always [num1temporala#:num1temporalb#] (not fall (id1 == id2))
always [0:num2temporal#] (id1 >= num1value#)
always ( once [num2temporala#:num2temporalb#] (not (id1 > num1value#)) -> eventually [0:num4temporal#] (rise (id2 > num3value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( rise ((id1 > num1valuea# and id1 <= num1valueb#) until [0:num3temporal#] (not (id2 == num2value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or id2 == num2value#)
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 >= num2value# and id3 < num3value# )
always ( fall (id1 == id2) -> id3 >= num1value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not rise (id2 == num2value#))) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually (rise (id3 < num1value#))) )
eventually [0:num2temporal#] (id1 == id2 and not rise (id3 == num1value#))
eventually (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 > num1value# or id2 < num2value# -> not (id3 == id4) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or not (id2 <= num2value#))
eventually (id1 < num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [0:num4temporal#] (rise (id3 > num3value#)) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( fall (id1 == num1value#) -> not ((id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always (id1 == num1value# and id2 >= num2value#)
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (fall (id2 == id3))) )
eventually (id1 == id2 and id3 <= num1value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) since [0:num4temporal#] (rise (id3 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( id1 == id2 -> eventually (not (id3 == num1value#)) )
always ( fall (id1 == num1value#) -> rise (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> rise (id2 == num2value#) )
always [0:num2temporal#] (id1 > num1value#)
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( id1 <= num1value# and rise (id2 < num2value#) -> id3 <= num3value# and fall (id4 == num4value#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> id4 == id5 )
always [0:num2temporal#] (id1 <= num1value# and not (id2 == id3))
always ( rise (id1 == num1value#) -> not (id2 <= num2value#) and rise (id3 >= num3value#) )
always ( rise (id1 <= num1value#) -> id2 == num2value# or rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 > num1value# -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# -> always [num3temporala#:num3temporalb#] (not fall (id2 >= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not (id1 == id2) and (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 < num2value# )
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 < num1value#) -> historically [num3temporala#:num3temporalb#] (not (id2 < num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 == num2value#) -> (id3 == id4) until [0:num4temporal#] (id5 > num3value#) )
always ( rise (id1 > num1value#) or id2 >= num2value# -> rise (id3 == id4) )
always ( id1 >= num1value# and rise (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (id2 == id3) )
eventually [0:num1temporal#] (id1 == id2)
always ( not (id1 < num1value#) or id2 == id3 -> rise (eventually (id4 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ( (id1 == num1value#) since (id2 == id3) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id4 == id5))) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 and id4 == num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 >= num2valuea# and id2 < num2valueb#) -> once [num3temporala#:num3temporalb#] (id3 == id4) )
always ( id1 >= num1value# -> not (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( (id1 == id2) until [num2temporala#:num2temporalb#] (id3 == num1value#) -> eventually [0:num4temporal#] (always (id4 < num3value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not ((id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always ( fall (historically [num2temporala#:num2temporalb#] (id1 < num1value#)) -> not ((id2 <= num3value#) until [num4temporala#:num4temporalb#] (rise (id3 == id4))) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 <= num1value#) -> not (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (id1 > num1value#)
always ( rise (id1 > num1value#) -> id2 > num2value# and id3 > num3value# )
always ( id1 == id2 and id3 == id4 -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id5 > num1value#))) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> always (eventually [0:num3temporal#] (fall (id2 == num2value#))) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> rise (id2 == num2value#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( not (id1 == id2) or id3 == id4 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id5 == num1value#)) )
always [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (not (id3 == num1value#))) )
always ( once (rise (id1 < num1value#)) -> (id2 == id3) until [0:num3temporal#] (rise (id4 < num2value#)) )
always ( not (once (id1 > num1value#)) -> not (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( eventually [num2temporala#:num2temporalb#] (not (id1 > num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always [num3temporala#:num3temporalb#] (not (id1 >= num1value#) or id2 > num2value#)
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id2 == num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 == num2value#)) since (id3 == num3value#) )
always ( id1 >= num1value# or not (id2 <= num2value#) -> not fall (id3 >= num3value#) )
always ( id1 < num1value# -> not (id2 >= num2value#) or id3 == num3value# )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( once [0:num2temporal#] (id1 >= num1value#) -> not (eventually (id2 >= num3valuea# and id2 <= num3valueb#)) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 < num2value#)
eventually (id1 < num1value# and rise (id2 > num2value#))
always ( once [0:num2temporal#] (id1 < num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 == num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 <= num3value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 <= num1value#) )
always (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == num1value#) or id2 < num2value# -> (id3 > num3valuea# and id3 < num3valueb#) and id4 >= num4value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 == num2value#) since (id3 <= num3value#) )
always ( id1 == num1value# or rise (id2 <= num2value#) -> once (rise (id3 == id4)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 > num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# -> not ((id2 < num2value#) until [0:num4temporal#] (id3 == num3value#)) )
always [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# -> fall (always [0:num3temporal#] (not (id2 == num2value#))) )
eventually [0:num3temporal#] (not (id1 > num1value#) and rise (id2 > num2value#))
always (not (id1 < num1value#) and id2 < num2value#)
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until [0:num4temporal#] (not (id3 <= num3value#)) )
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# and rise (id3 >= num3value#) )
always ( id1 >= num1value# and id2 == id3 -> always (eventually [0:num2temporal#] (id4 == id5)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always ( id1 == num1value# -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) )
always ( id1 >= num1value# -> id2 <= num2value# or not rise (id3 == id4) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (always (id2 >= num2value#)) )
always ( rise (id1 == id2) -> not fall (id3 > num1value#) )
always ( not (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == num2value#) -> eventually (always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [num3temporala#:num3temporalb#] (not rise (id1 == num1value#) and id2 <= num2value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always [0:num2temporal#] (id1 <= num1value# or id2 == id3)
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (id3 < num1value#) -> not (eventually [num4temporala#:num4temporalb#] (id4 >= num3value#)) )
always ( not (id1 >= num1value#) and id2 < num2value# -> not (always (not (id3 <= num3value#))) )
always [0:num2temporal#] (not rise (id1 >= num1value#))
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always [num3temporala#:num3temporalb#] (not rise (id1 > num1value#) or (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 > num1value# or id2 < num2value# -> not ((id3 < num3value#) since [0:num5temporal#] (id4 <= num4value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always (id1 == id2)
always ( once [0:num1temporal#] (fall (id1 == id2)) -> (id3 < num2value#) until [0:num3temporal#] (id4 == id5) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> always [0:num3temporal#] (id3 == id4) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) or id2 == id3 -> id4 == num2value# )
always ( id1 == num1value# -> always [0:num2temporal#] (not (id2 == id3)) )
always (id1 < num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# -> id2 == num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == num2value#) and not (id3 == id4) )
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( rise (id1 < num1value#) -> always (id2 >= num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 <= num1value# or id2 == id3)
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( id1 <= num1value# and id2 >= num2value# -> historically [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == id3))) )
always ( rise (id1 < num1value#) or id2 < num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always [0:num2temporal#] (id1 <= num1value#)
always ( id1 >= num1value# and id2 == num2value# -> not ((id3 == id4) until [num4temporala#:num4temporalb#] (rise (id5 <= num3value#))) )
always ( id1 < num1value# and id2 <= num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (not (id3 <= num3value#))) )
always ( rise (id1 == num1value#) and (id2 >= num2valuea# and id2 < num2valueb#) -> not fall (id3 == num3value#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always (not (id1 <= num1value#))
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 < num2value#)
always ( rise (id1 < num1value#) -> (id2 >= num2value#) until (id3 == num3value#) )
always ( id1 > num1value# -> once [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# or id3 == id4 )
always ( (id1 == num1value#) until (id2 <= num2value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( not ((id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) -> always (id3 == id4) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 >= num1value#) )
always ( rise (id1 > num1value#) -> not rise (id2 == id3) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 <= num2value#)
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> (id3 == num1value#) until (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually (id1 > num1value# and id2 > num2value#)
always [0:num3temporal#] (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> not (id2 >= num2value#) )
always ( id1 < num1value# -> id2 == num2value# )
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( (not fall (id1 == num1value#)) since [num3temporala#:num3temporalb#] (rise (id2 <= num2value#)) -> once (id3 < num4value#) )
eventually (id1 == num1value# and id2 == id3)
always ( id1 == num1value# -> (not rise (id2 > num2valuea# and id2 < num2valueb#)) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> not (once [num3temporala#:num3temporalb#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == num1value# and not (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
eventually (not rise (id1 == id2))
always ( rise (id1 == num1value#) or rise (id2 <= num2value#) -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 == num1value#) -> eventually (id2 == num2value#) )
always (id1 < num1value# or id2 <= num2value#)
always ( id1 == id2 or rise (id3 >= num1value#) -> (id4 < num2value#) until [num3temporala#:num3temporalb#] (id5 == id6) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num3temporal#] (id1 <= num1value# and not (id2 <= num2value#))
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 < num2value#)
always ( always (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 >= num2valuea# and id2 <= num2valueb#)) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 < num1value# and id2 <= num2value# -> eventually [0:num3temporal#] (id3 == id4) )
always [0:num2temporal#] (id1 <= num1value#)
always ( not rise ((id1 < num1value#) since [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 >= num2value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( id1 == num1value# -> not (id2 > num2value#) )
always ( fall (id1 == id2) -> not ((id3 == num1value#) until (rise (id4 <= num2value#))) )
always [0:num3temporal#] (id1 < num1value# or id2 < num2value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
eventually [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always [num3temporala#:num3temporalb#] (id1 > num1value# or not (id2 >= num2value#))
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( not (always [0:num2temporal#] (not (id1 < num1value#))) -> always (id2 >= num3valuea# and id2 < num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always (id3 >= num1value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and rise (id2 == num2value#))
always ( rise (id1 >= num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> (id2 == num3value#) until (id3 >= num4valuea# and id3 <= num4valueb#) )
always (id1 <= num1value# and id2 > num2value#)
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> historically (id3 == num1value#) )
always ( (not (id1 == id2)) since [0:num2temporal#] (not (id3 == num1value#)) -> (id4 == id5) until (fall (id6 >= num3valuea# and id6 < num3valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always (id3 >= num1value#)) )
always ( rise (id1 == num1value#) and id2 == id3 -> always (eventually (not (id4 < num2value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( not (id1 > num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 < num1value# or id2 < num2value# -> always [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 == num1value#) -> not ((id2 == num2value#) until [0:num4temporal#] (id3 >= num3value#)) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 == num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2value#) -> not fall (id3 > num3value#) )
always [0:num2temporal#] (id1 >= num1value#)
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( id1 <= num1value# or rise (id2 <= num2value#) -> not (id3 >= num3value#) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3))
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always [0:num3temporal#] (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( not rise (id1 == num1value#) or not rise (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually (not (id2 <= num2value#))) )
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always [0:num2temporal#] (id1 == id2 or id3 <= num1value#)
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (not fall (id2 == num2value#)) until [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (fall (id2 == num2value#)) )
always ( id1 > num1value# or id2 == num2value# -> not (eventually [num4temporala#:num4temporalb#] (rise (id3 <= num3value#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( rise (id1 == num1value#) -> not (id2 < num2value#) )
eventually (id1 == num1value#)
always ( id1 > num1value# and id2 == id3 -> always [0:num3temporal#] (id4 < num2value#) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
eventually (id1 >= num1value#)
eventually (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( once [0:num1temporal#] (not (id1 == id2)) -> eventually [num2temporala#:num2temporalb#] (id3 == id4) )
always ( historically [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id3 >= num2valuea# and id3 <= num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> once [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( not (id1 >= num1value#) and not (id2 > num2value#) -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> (id2 == id3) since [num3temporala#:num3temporalb#] (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) -> not (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))
always [0:num2temporal#] (not (id1 == id2) and id3 <= num1value#)
always ( not (id1 < num1value#) -> rise (eventually [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 < num1value# or id2 >= num2value# -> id3 == id4 )
always ( rise (id1 == num1value#) -> id2 == id3 or (id4 > num2valuea# and id4 <= num2valueb#) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always (id3 >= num2valuea# and id3 <= num2valueb#)) )
always ( id1 >= num1value# -> rise (id2 >= num2value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 >= num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( eventually (id1 >= num1value#) -> eventually (always [0:num3temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( not (id1 == id2) and not (id3 == id4) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (not fall (id5 == num1value#))) )
eventually [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == num1value#) -> not ((id2 == num2value#) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 == id2 and rise (id3 == num1value#) -> id4 > num2valuea# and id4 <= num2valueb# )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#) and not (id2 == id3))
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( id1 > num1value# -> always [0:num2temporal#] (not fall (id2 == id3)) )
always ( id1 < num1value# or id2 <= num2value# -> id3 > num3value# )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> not (always [0:num4temporal#] (id2 <= num3value#)) )
eventually (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> id3 >= num3value# )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (id2 == id3) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 < num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num5temporal#] (eventually (rise (id3 > num4valuea# and id3 < num4valueb#))) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always (id1 == id2 or id3 == id4)
eventually [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 > num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (not fall (id2 == num2value#)) -> always (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( rise (id1 < num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 <= num1value# -> once [0:num3temporal#] (rise (id2 < num2value#)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not ((id1 == num1value#) since [0:num3temporal#] (id2 == num2value#)) -> always [0:num5temporal#] (eventually [num6temporala#:num6temporalb#] (not (id3 < num4value#))) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> id2 <= num2value# and rise (id3 < num3value#) )
always ( rise (id1 < num1value#) -> always (id2 == id3) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#))
always ( rise (id1 >= num1value#) -> eventually (always [0:num2temporal#] (not rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
eventually (id1 >= num1value#)
always ( id1 > num1value# -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( not fall (id1 >= num1value#) and id2 < num2value# -> eventually [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 <= num1value#) -> (id2 == num2value#) since [0:num3temporal#] (not rise (id3 == id4)) )
always ( rise (id1 <= num1value#) -> always (id2 > num2value#) )
eventually [0:num1temporal#] (id1 == id2)
eventually (id1 == id2)
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( (not (id1 == num1value#)) since [0:num3temporal#] (id2 >= num2value#) -> eventually (always [0:num5temporal#] (id3 < num4value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always [num2temporala#:num2temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 == id2) -> always (eventually (id3 > num1value#)) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( (id1 == num1value#) until (id2 > num2value#) -> always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == id2) -> not (id3 < num1value#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( not rise (historically (id1 == num1value#)) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
eventually (id1 <= num1value# and not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 <= num1value# or rise (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (always (not (id3 <= num3value#))) )
always [0:num3temporal#] (id1 == num1value# or not (id2 == num2value#))
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually (rise (id1 == num1value#))
eventually [0:num2temporal#] (not (id1 > num1value#) and not (id2 == id3))
always ( fall ((id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 >= num2value#)) -> not fall (always (not fall (id3 == num4value#))) )
always ( fall ((not (id1 <= num1value#)) until (id2 < num2value#)) -> (id3 == id4) until [0:num4temporal#] (not (id5 <= num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 >= num1value#) )
always ( id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 == id4) until [0:num4temporal#] (not (id5 >= num3value#)) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and rise (id2 == num2value#))
always ( rise (id1 < num1value#) -> fall (once [0:num3temporal#] (id2 >= num2value#)) )
always ( not (id1 >= num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> (id3 == num3value#) until (id4 > num4value#) )
always ( fall (id1 == id2) -> not fall ((id3 == id4) until [0:num2temporal#] (id5 > num1valuea# and id5 < num1valueb#)) )
always ( id1 < num1value# and id2 < num2value# -> id3 == id4 )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((not (id2 > num2value#)) until [0:num3temporal#] (id3 == id4)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (historically [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == num1value# or id2 == num2value# -> id3 == id4 )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always ( (not (id1 == id2)) since (rise (id3 < num1value#)) -> (not (id4 == id5)) until [0:num3temporal#] (fall (id6 == num2value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [0:num3temporal#] (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 <= num1value#) -> not fall (id2 > num2value#) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( (id1 == id2) since [0:num1temporal#] (id3 == id4) -> not rise (historically [num3temporala#:num3temporalb#] (not rise (id5 >= num2valuea# and id5 <= num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (id1 == num1value#) and id2 <= num2value# -> id3 == id4 )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> rise (id2 > num2value#) and id3 >= num3value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 == id3) )
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> not (historically (id4 < num2value#)) )
always ( id1 == id2 or not (id3 < num1value#) -> eventually (id4 < num2value#) )
always ( once [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == id3)) )
always ( not (historically (not rise (id1 > num1value#))) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3value#) )
eventually (id1 > num1value#)
always ( not (id1 <= num1value#) -> not (id2 == num2value#) )
always ( id1 > num1value# or not (id2 > num2value#) -> id3 > num3value# )
always ( fall (id1 == id2) -> (id3 <= num1value#) since [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( once [0:num2temporal#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ( id1 < num1value# -> rise (id2 == id3) )
always ( id1 == num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (not rise (id2 == id3))) )
always ( rise (id1 >= num1value#) -> eventually (id2 == id3) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# -> not (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> id2 >= num2value# or id3 == num3value# )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( (id1 >= num1value#) since [0:num2temporal#] (rise (id2 == id3)) -> (not rise (id4 == id5)) until [0:num4temporal#] (id6 > num3valuea# and id6 < num3valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 <= num2value#)
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( rise (id1 == num1value#) -> not (id2 < num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 < num1value#) -> rise (id2 > num2value#) )
eventually (not (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 == num1value#) -> rise (id2 < num2value#) and id3 >= num3value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( id1 == num1value# and rise (id2 > num2value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> (not (id2 <= num3value#)) until (id3 == id4) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> id2 < num2value# or id3 == num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (not (id2 > num2value#)) )
always ( fall (id1 == num1value#) and not (id2 > num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( fall (id1 == num1value#) and id2 == num2value# -> always [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 >= num1value# -> always (eventually (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( not rise (eventually [0:num2temporal#] (id1 == num1value#)) -> eventually (rise (id2 <= num3value#)) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (rise (id3 >= num1value#))) )
always ( id1 > num1value# or id2 == id3 -> always [0:num3temporal#] (eventually (rise (id4 > num2valuea# and id4 < num2valueb#))) )
always ( id1 >= num1value# and id2 > num2value# -> always [num3temporala#:num3temporalb#] (eventually (rise (id3 == id4))) )
always ( fall (id1 == num1value#) -> eventually (always (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 <= num1value# -> historically [0:num3temporal#] (id2 >= num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 < num1value#)
always ( id1 == id2 and id3 == id4 -> eventually (always (id5 == num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 or id4 <= num2value# )
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == num1value# and rise (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 <= num3value#))) )
eventually (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) and rise (id3 > num3value#) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (rise (id2 >= num2value#)) -> always (eventually [0:num5temporal#] (rise (id3 == num4value#))) )
eventually [0:num3temporal#] (id1 == num1value# or fall (id2 > num2valuea# and id2 < num2valueb#))
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 == id2 and not fall (id3 > num1value#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num2temporal#] (id1 <= num1value#)
eventually [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always (id1 == num1value#)
always ( rise (id1 <= num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (id3 > num1value#) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 <= num1value#) -> id2 < num2value# or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == num1value# -> (id2 > num2valuea# and id2 < num2valueb#) or id3 == id4 )
always ( id1 <= num1value# -> (id2 <= num2value#) until [0:num4temporal#] (not (id3 == num3value#)) )
always ( id1 >= num1value# or rise (id2 <= num2value#) -> id3 == num3value# )
always ( rise (id1 < num1value#) -> always (eventually (id2 >= num2value#)) )
always (id1 >= num1value#)
always ( id1 <= num1value# -> not (id2 == id3) )
always ( id1 == num1value# and id2 >= num2value# -> always (id3 >= num3value#) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually (rise (id2 <= num2value#))) )
eventually [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# -> id2 == num2value# )
always ( id1 > num1value# and not rise (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id4 == id5))) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num3value#) until [num5temporala#:num5temporalb#] (id3 >= num4value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 -> not (always [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
eventually (id1 == num1value# or rise (id2 <= num2value#))
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (not (id2 < num2value#)) )
always ( rise (id1 == id2) -> always (eventually (rise (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( id1 == id2 -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 > num1value# or rise (id2 < num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always (id1 > num1value#)
always ( rise (id1 == num1value#) or id2 == id3 -> not (id4 == num2value#) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( id1 < num1value# -> id2 == num2value# )
always ( id1 <= num1value# or id2 > num2value# -> rise (id3 <= num3value#) and id4 == id5 )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) and id3 > num3value# )
always ( id1 == id2 or rise (id3 > num1valuea# and id3 < num1valueb#) -> id4 > num2valuea# and id4 <= num2valueb# )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 < num2value#)) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> id3 < num3value# )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) or not (id4 > num2value#) )
always ( id1 == num1value# -> id2 > num2value# )
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always ( not (id1 < num1value#) -> not fall (eventually [0:num3temporal#] (id2 > num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 > num1value#) and id2 <= num2value# -> id3 == id4 )
eventually [0:num3temporal#] (not rise (id1 == num1value#) and rise (id2 < num2value#))
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == id4 )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
eventually (id1 <= num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (once [num1temporala#:num1temporalb#] (not rise (id1 == id2))) -> eventually (always [num2temporala#:num2temporalb#] (id3 == id4)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> historically [0:num3temporal#] (id2 > num2value#) )
always ( fall (id1 == num1value#) -> always (id2 < num2value#) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> not ((id3 == id4) until [0:num3temporal#] (id5 == id6)) )
always ( id1 == id2 or id3 > num1value# -> eventually (id4 < num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( once (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) or id2 > num2value# -> (id3 < num3value#) until [0:num5temporal#] (id4 == num4value#) )
always [0:num3temporal#] (id1 <= num1value# or (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 -> rise (id3 <= num1value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# and id2 >= num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 > num3value#))) )
always ( not (id1 == id2) or id3 >= num1value# -> id4 == id5 and id6 >= num2value# )
always ( id1 <= num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) -> not (eventually [0:num2temporal#] (id2 == id3)) )
always ( (not (id1 > num1valuea# and id1 < num1valueb#)) since [0:num2temporal#] (id2 == id3) -> always [0:num4temporal#] (id4 <= num3value#) )
eventually [0:num2temporal#] (not (id1 <= num1value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == id2 -> not (id3 >= num1value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 <= num2value#) )
eventually (id1 == num1value# and id2 == id3)
always (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 < num1value# or rise (id2 >= num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 == num1value# and id2 == id3 -> always [0:num3temporal#] (not (id4 >= num2valuea# and id4 < num2valueb#)) )
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (not rise (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually [0:num4temporal#] (id3 == id4) )
always ( not ((id1 == num1value#) since [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) -> always [0:num5temporal#] (id3 > num4value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (rise (id2 == id3)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not (eventually (id2 > num2value#)) )
always ( rise (id1 == id2) -> fall (id3 == num1value#) )
always ( fall (id1 == id2) -> not ((not (id3 >= num1value#)) since [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 < num2valueb#)) )
always ( id1 <= num1value# or fall (id2 == num2value#) -> id3 == num3value# and id4 == num4value# )
eventually (rise (id1 > num1value#) and id2 < num2value#)
always ( id1 > num1value# and id2 >= num2value# -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 >= num3value#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( id1 == num1value# and id2 == num2value# -> id3 >= num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always (not (id1 < num1value#) and id2 == id3)
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 == num1value#) or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> rise ((id2 == id3) until [0:num3temporal#] (not fall (id4 > num2value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always [0:num2temporal#] (id1 >= num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
always ( id1 >= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (not rise (id2 == id3))) )
always ( once [0:num2temporal#] (id1 > num1value#) -> not rise (eventually [0:num4temporal#] (id2 <= num3value#)) )
always ( rise (id1 > num1value#) -> always (eventually (id2 <= num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 -> not (id3 == num1value#) )
always ( rise (id1 == id2) -> always (eventually [0:num2temporal#] (id3 <= num1value#)) )
always ( rise (id1 <= num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( not (once (rise (id1 >= num1value#))) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 > num1value# -> not (id2 < num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( not rise (id1 > num1valuea# and id1 < num1valueb#) or not (id2 < num2value#) -> eventually [0:num4temporal#] (id3 >= num3value#) )
always ( id1 == num1value# -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 > num3valuea# and id3 <= num3valueb#) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) or not (id2 >= num2value#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1value#)) )
always ( id1 < num1value# or id2 == id3 -> not (always [0:num3temporal#] (id4 >= num2value#)) )
always ( id1 < num1value# and rise (id2 == num2value#) -> rise (id3 <= num3value#) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( historically [0:num2temporal#] (id1 >= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id2 >= num3value#))) )
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
eventually (id1 == id2)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 > num1value#) -> (id2 == id3) since [0:num3temporal#] (id4 > num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually [0:num3temporal#] (not fall (id1 == num1value#) or (id2 >= num2valuea# and id2 < num2valueb#))
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 <= num2value#) since [0:num4temporal#] (id3 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 > num3value# or not (id4 < num4value#) )
always [0:num1temporal#] (id1 == id2)
always (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (not (id2 == num2value#)) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> (id2 < num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( fall (id1 == id2) -> id3 >= num1value# )
eventually (rise (id1 == num1value#))
always [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
always ( id1 == id2 or fall (id3 == num1value#) -> id4 >= num2valuea# and id4 <= num2valueb# )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 >= num1value# and rise (id2 == num2value#) -> not (eventually [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( not (once [0:num2temporal#] (id1 >= num1value#)) -> always [0:num4temporal#] (not (id2 <= num3value#)) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( not (id1 >= num1value#) and fall (id2 == num2value#) -> id3 >= num3valuea# and id3 < num3valueb# )
always [num2temporala#:num2temporalb#] (id1 > num1value# or id2 == id3)
always ( rise (id1 == id2) -> once (id3 == id4) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num3temporal#] (not (id1 <= num1value#) or id2 < num2value#)
always ( historically (id1 <= num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( not (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( not fall (id1 >= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> historically [0:num4temporal#] (id3 == num3value#) )
eventually (rise (id1 == id2))
eventually (not (id1 == num1value#) or id2 >= num2value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( (id1 >= num1valuea# and id1 < num1valueb#) or id2 < num2value# -> not (id3 == id4) )
always [0:num1temporal#] (not rise (id1 == id2))
always ( id1 == num1value# -> id2 == num2value# or id3 < num3value# )
always ( once (not (id1 <= num1value#)) -> not ((id2 == id3) until (id4 == id5)) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( not (id1 < num1value#) -> rise (id2 > num2value#) )
always (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == id2) -> always (eventually (id3 == num1value#)) )
always ( rise (eventually (rise (id1 == id2))) -> (not (id3 == num1value#)) since [0:num3temporal#] (fall (id4 > num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> not (always [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (not (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 < num2value#) until (not (id3 > num3valuea# and id3 < num3valueb#))) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or id2 <= num2value#)
always ( fall (id1 == num1value#) -> id2 > num2value# )
always ( rise (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( id1 == id2 and rise (id3 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( id1 == id2 and id3 == id4 -> id5 > num1value# )
always ( once [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 >= num1value#))) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( not (id1 == id2) or id3 > num1value# -> not rise (id4 == num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == num2value#) -> not (eventually [0:num4temporal#] (not (id3 <= num3value#))) )
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always [0:num3temporal#] (not (id1 < num1value#) and not (id2 == num2value#))
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> rise ((not rise (id2 >= num2value#)) since (fall (id3 == num3value#))) )
always ( fall (id1 == num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( id1 >= num1value# -> id2 == id3 )
always ( id1 > num1value# -> always [0:num2temporal#] (eventually (id2 == id3)) )
always ( historically [0:num2temporal#] (not (id1 == num1value#)) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id2 >= num3value#))) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
eventually [0:num3temporal#] (rise (id1 == num1value#) and id2 < num2value#)
always ( id1 == num1value# or id2 <= num2value# -> eventually (always (id3 == id4)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 < num1value#) -> rise ((not (id2 > num2valuea# and id2 < num2valueb#)) since [num4temporala#:num4temporalb#] (id3 < num3value#)) )
eventually (rise (id1 == id2))
always ( id1 == num1value# or id2 < num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) )
always ( id1 >= num1value# and id2 <= num2value# -> always [0:num4temporal#] (eventually (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (id3 <= num1value#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 == id2 or id3 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 == num1value#) -> not ((not (id2 == id3)) until [0:num2temporal#] (id4 == id5)) )
always (id1 <= num1value# and id2 <= num2value#)
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually (not (id2 > num2value#)) )
eventually (id1 == id2 or id3 == num1value#)
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 >= num3valuea# and id2 <= num3valueb#) until [0:num5temporal#] (fall (id3 == num4value#)) )
always ( rise (id1 == num1value#) -> historically [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 >= num1value#) -> (not (id2 > num2valuea# and id2 <= num2valueb#)) since [0:num4temporal#] (id3 < num3value#) )
always ( not (id1 > num1value#) -> id2 == num2value# )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 <= num2value#))
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> eventually [0:num4temporal#] (rise (id3 < num3value#)) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 == num1value# -> not ((id2 > num2valuea# and id2 < num2valueb#) until (rise (id3 > num3valuea# and id3 <= num3valueb#))) )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> not (id2 <= num2value#) )
always ( rise (id1 == id2) -> id3 == num1value# or (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 == id2) -> not rise (always [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
always ( rise (id1 == id2) -> (id3 == num1value#) until [num2temporala#:num2temporalb#] (id4 == id5) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( id1 < num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num3temporal#] (rise (id1 < num1value#) and fall (id2 == num2value#))
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 >= num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) or id3 >= num3value# )
always ( rise (id1 <= num1value#) or id2 > num2value# -> id3 == num3value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 > num1value#) since (rise (id2 >= num2value#)) -> once [0:num3temporal#] (fall (id3 == id4)) )
eventually [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
always ( rise (id1 < num1value#) -> not rise (historically [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> once [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) or id2 > num2value# -> id3 == num3value# )
always ( id1 < num1value# -> not (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (not (id3 < num1value#))) )
always ( fall (id1 == num1value#) -> not rise (id2 == id3) )
always ( always [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 <= num2value#) )
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (not rise (id1 >= num1value#))
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1value#))
always ( id1 >= num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 <= num3value#)) )
always [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always (id1 == id2 or id3 <= num1value#)
always ( id1 > num1valuea# and id1 <= num1valueb# -> id2 <= num2value# and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (not (id3 >= num3value#))) )
always ( not (id1 < num1value#) -> always [0:num3temporal#] (eventually (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 or id4 == id5 )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 <= num1value# or id2 == id3 -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( id1 >= num1value# and not (id2 == id3) -> id4 == id5 and rise (id6 == num2value#) )
always ( id1 <= num1value# and not (id2 >= num2value#) -> (id3 <= num3value#) until (id4 == num4value#) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) or not (id3 > num3value#) )
always ( not (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 == num1value#) and id2 == num2value# -> eventually (always (id3 >= num3valuea# and id3 < num3valueb#)) )
always (id1 < num1value#)
always [0:num2temporal#] (id1 >= num1value# and not (id2 == id3))
always ( historically (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 > num1value#)
always (id1 < num1value# or id2 > num2value#)
always ( once [0:num2temporal#] (id1 <= num1value#) -> not (always [num4temporala#:num4temporalb#] (id2 < num3value#)) )
always [0:num3temporal#] (id1 == num1value# or not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1value# and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always [0:num2temporal#] (not (id1 < num1value#) and not (id2 == id3))
always ( always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) since [0:num4temporal#] (id4 == num3value#) )
always ( eventually (rise (id1 >= num1value#)) -> (id2 >= num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == num1value# -> not (always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 > num1value#) or id2 >= num2value# -> id3 > num3value# )
always ( rise (id1 >= num1value#) -> (id2 < num2value#) since [0:num3temporal#] (rise (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (id3 <= num3value#) )
always ( id1 == num1value# or id2 < num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) until [0:num5temporal#] (id4 == num4value#) )
always ( always [0:num2temporal#] (id1 <= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (fall (id2 > num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 > num1value#) or rise (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( rise (id1 == id2) -> not (always [0:num1temporal#] (id3 == id4)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not (always [0:num3temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 <= num1value#) and not rise (id2 >= num2value#) -> always [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (not fall (id1 > num1value#))
always ( id1 >= num1value# -> always [num3temporala#:num3temporalb#] (not (id2 >= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#))
always ( rise (id1 >= num1value#) -> (id2 > num2value#) until (id3 >= num3value#) )
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always ( id1 == num1value# or not (id2 <= num2value#) -> not (id3 == id4) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 == id3))
always ( id1 == num1value# and id2 >= num2value# -> always (id3 == num3value#) )
always [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always (id1 == id2 or id3 == id4)
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (historically [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( id1 <= num1value# -> (not (id2 > num2value#)) since (id3 == num3value#) )
always ( id1 <= num1value# -> id2 == id3 )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == id3) since (id4 == num2value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 > num2value#) until (id3 <= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( id1 == num1value# -> rise (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always (id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num2temporal#] (not (id2 == id3)) -> eventually (always [num4temporala#:num4temporalb#] (id4 >= num3valuea# and id4 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) and id2 >= num2value# -> rise (id3 == id4) )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( not (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> not ((id2 >= num3valuea# and id2 <= num3valueb#) until (id3 == id4)) )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( (id1 >= num1value#) until [0:num3temporal#] (id2 <= num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == id4)) )
always [0:num2temporal#] (id1 == num1value#)
always ( not (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> eventually (always [0:num4temporal#] (id3 < num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 > num2value#) and id3 == id4 )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> once [0:num3temporal#] (rise (id2 > num2value#)) )
always ( id1 == num1value# -> rise (id2 <= num2value#) or id3 == num3value# )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and id2 > num2value# -> eventually [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( not (id1 == num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) or id3 < num3value# )
always ( id1 < num1value# or id2 <= num2value# -> not (always [0:num4temporal#] (id3 > num3value#)) )
always ( eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#)) -> always (eventually (rise (id2 >= num3value#))) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always (id1 < num1value# or id2 == id3)
always [0:num3temporal#] (not rise (id1 > num1value#) and (id2 >= num2valuea# and id2 < num2valueb#))
always ( (id1 >= num1value#) since [0:num3temporal#] (id2 == num2value#) -> fall (eventually [0:num5temporal#] (rise (id3 >= num4valuea# and id3 < num4valueb#))) )
always ( id1 > num1value# and rise (id2 >= num2value#) -> eventually (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 < num1value#) -> not (id2 <= num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 >= num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 == num1value# or rise (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (not rise (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 -> id3 <= num1value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == id3 )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 > num2value#) until [0:num4temporal#] (rise (id3 <= num3value#))) )
always ( not (id1 == num1value#) and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (not rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2value#))
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num3temporal#] (id1 > num1value# and not rise (id2 >= num2value#))
always ( once (id1 == id2) -> always (id3 <= num1value#) )
always ( rise (id1 < num1value#) -> id2 <= num2value# or id3 == num3value# )
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) or not fall (id2 > num2value#))
always [0:num1temporal#] (id1 == id2)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 > num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 < num4value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 < num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) until [0:num3temporal#] (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( not (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
eventually [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))
always ( id1 == id2 -> (id3 <= num1value#) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( fall (id1 == id2) -> (id3 < num1value#) until (not fall (id4 == num2value#)) )
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (not (id2 == num2value#)) )
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always ( rise (id1 <= num1value#) -> rise (id2 == id3) )
always ( fall (id1 == num1value#) -> not (always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( historically [0:num2temporal#] (id1 < num1value#) -> (id2 > num3valuea# and id2 < num3valueb#) until (id3 < num4value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) or rise (id3 > num3value#) )
always ( fall (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) or id4 == id5 )
always ( id1 <= num1value# or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( id1 == num1value# and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 > num1value# or id2 == num2value# -> fall (id3 >= num3valuea# and id3 <= num3valueb#) or rise (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> id4 >= num2value# and id5 > num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (id2 < num2value#) -> eventually [0:num4temporal#] (always (id3 == id4)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( rise (id1 == id2) -> rise (id3 > num1valuea# and id3 < num1valueb#) )
always ( not (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> historically (not (id3 == num3value#)) )
always ( rise (id1 == num1value#) or id2 <= num2value# -> id3 < num3value# )
always ( id1 == num1value# and id2 == id3 -> eventually (always (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [0:num3temporal#] (id2 < num2value#) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 < num2value#)
always ( fall (id1 == num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> eventually [num5temporala#:num5temporalb#] (id3 == num4value#) )
always ( id1 <= num1value# or id2 > num2value# -> not fall (eventually [0:num4temporal#] (id3 < num3value#)) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 >= num1valuea# and id1 < num1valueb# -> (id2 >= num2value#) until (not (id3 <= num3value#)) )
eventually (id1 == id2)
always ( historically [0:num1temporal#] (id1 == id2) -> eventually (always (id3 > num2valuea# and id3 < num2valueb#)) )
always ( not (id1 < num1value#) -> id2 == num2value# )
always ( id1 >= num1value# -> id2 == id3 )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( id1 == id2 and id3 == num1value# -> not (id4 < num2value#) and id5 == num3value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 > num1value#) or not (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#) -> always (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
eventually [0:num3temporal#] (rise (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always [0:num3temporal#] (id1 <= num1value# or id2 == num2value#)
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
always (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == id2) -> not (always [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 == id2 or id3 == num1value# -> eventually (always (id4 <= num2value#)) )
always (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 == id2) -> fall (id3 == id4) )
always [0:num2temporal#] (id1 >= num1value#)
always [num2temporala#:num2temporalb#] (id1 <= num1value# or id2 == id3)
always ( not (id1 > num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [0:num3temporal#] (id1 > num1value# or not fall (id2 == num2value#))
always ( (id1 == id2) until [num1temporala#:num1temporalb#] (id3 == id4) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id5 == num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 > num2valuea# and id2 < num2valueb#) since [0:num3temporal#] (id3 == id4)) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( not (once [num2temporala#:num2temporalb#] (not fall (id1 == num1value#))) -> (id2 == num3value#) until [num5temporala#:num5temporalb#] (id3 == num4value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num3temporal#] (id1 < num1value# and id2 <= num2value#)
always ( id1 == num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 >= num2valuea# and id4 <= num2valueb#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# -> (id2 >= num2value#) until [0:num4temporal#] (id3 > num3value#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# -> once [0:num3temporal#] (not (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( id1 == num1value# -> historically [0:num2temporal#] (not rise (id2 == id3)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( id1 == num1value# or rise (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (not fall (id3 > num3value#))) )
always ( id1 <= num1value# and rise (id2 >= num2value#) -> always [0:num3temporal#] (eventually (fall (id3 == id4))) )
always ( fall (id1 == num1value#) -> id2 == num2value# )
always ( (id1 < num1value#) since (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 < num3valueb#)) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( rise ((id1 < num1value#) since (id2 >= num2value#)) -> (not rise (id3 > num3value#)) since [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#) )
always [0:num3temporal#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( id1 == num1value# or id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always [0:num3temporal#] (id1 <= num1value# and not (id2 > num2value#))
always [0:num2temporal#] (id1 >= num1value# or id2 == id3)
always (not (id1 == id2) or id3 < num1value#)
always ( rise (id1 >= num1value#) -> rise (id2 == id3) )
always ( id1 < num1value# and fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( fall (id1 == num1value#) -> fall (once [num3temporala#:num3temporalb#] (not (id2 < num2value#))) )
always ( not rise (id1 == id2) and (id3 > num1valuea# and id3 < num1valueb#) -> id4 >= num2value# )
always ( id1 == id2 -> eventually (always [0:num2temporal#] (id3 == num1value#)) )
always ( id1 > num1value# and not fall (id2 > num2value#) -> always (id3 > num3valuea# and id3 < num3valueb#) )
always [num2temporala#:num2temporalb#] (not fall (id1 == id2) or id3 == num1value#)
always ( id1 < num1value# -> id2 < num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> (id3 > num3value#) until [0:num5temporal#] (id4 >= num4value#) )
always ( id1 > num1value# or id2 >= num2value# -> (id3 < num3value#) until [0:num5temporal#] (fall (id4 == num4value#)) )
always ( id1 <= num1value# or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) until (id4 == num4value#) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> not (id2 < num2value#) )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> not (historically (id4 >= num2valuea# and id4 <= num2valueb#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> id2 <= num2value# )
always ( rise (id1 >= num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( (id1 <= num1value#) since [num3temporala#:num3temporalb#] (not (id2 < num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 > num4valuea# and id3 < num4valueb#))) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (historically [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == num1value#) -> not ((id2 == id3) until [num3temporala#:num3temporalb#] (id4 <= num2value#)) )
always ( rise (id1 == id2) -> id3 < num1value# or id4 == id5 )
always ( rise (id1 < num1value#) -> (not (id2 == num2value#)) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) and id2 < num2value# -> not fall (id3 == id4) or id5 == num3value# )
always ( fall (id1 == num1value#) -> once [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 == num1value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id4 >= num2value#)) )
always ( id1 == id2 -> not ((id3 == id4) until [num2temporala#:num2temporalb#] (id5 == num1value#)) )
always ( id1 == num1value# or rise (id2 <= num2value#) -> (id3 >= num3valuea# and id3 < num3valueb#) and id4 <= num4value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 == num2value#) -> id3 == num3value# )
always ( id1 == num1value# or not (id2 > num2value#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 >= num1value# -> always (id2 == id3) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [num2temporala#:num2temporalb#] (id3 == id4)) )
always ( id1 == id2 and rise (id3 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( id1 < num1value# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
eventually (id1 == id2)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 <= num1value# or id2 == num2value# -> not (id3 == id4) )
always ( id1 == num1value# -> id2 >= num2value# )
always ( not rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 <= num1value#)) )
always ( rise (id1 < num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always [0:num2temporal#] (not (id1 <= num1value#))
always (id1 == num1value# and id2 > num2value#)
always ( id1 > num1value# -> rise (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (historically (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 <= num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( not (id1 <= num1value#) -> id2 == id3 )
always ( historically [0:num1temporal#] (id1 == id2) -> not (eventually (id3 >= num2value#)) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 < num1value# -> id2 < num2value# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
always ( fall (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 <= num1value# and id2 >= num2value# -> not fall (id3 == id4) )
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (rise (id2 == num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 -> id3 == id4 and not (id5 >= num1value#) )
always ( id1 < num1value# -> always (id2 <= num2value#) )
always ( rise (id1 < num1value#) and id2 == id3 -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id4 == id5)) )
always ( (id1 == num1value#) since (rise (id2 < num2value#)) -> eventually [0:num4temporal#] (rise (id3 < num3value#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( not rise (id1 == id2) and id3 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always [0:num2temporal#] (id1 > num1value#)
always (id1 == id2)
eventually [0:num2temporal#] (id1 <= num1value# and not fall (id2 == id3))
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until (id3 == num3value#) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 < num2value#)
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( historically (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 > num1value# or not (id2 > num2value#) -> id3 == num3value# )
always ( id1 >= num1value# and rise (id2 <= num2value#) -> id3 == num3value# )
always ( rise (id1 <= num1value#) -> not ((id2 > num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (rise (id1 == num1value#) and id2 == id3)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num2temporal#] (id2 == id3) -> always [0:num3temporal#] (id4 == id5) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 > num2value#) )
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 == id2) -> not rise (id3 == id4) and id5 < num1value# )
always ( id1 <= num1value# and id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) and id4 < num4value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) and id3 == id4 )
eventually [0:num2temporal#] (id1 == num1value#)
always ( not (id1 == id2) or not (id3 > num1value#) -> id4 == id5 )
always ( fall (id1 == id2) -> not (id3 >= num1valuea# and id3 <= num1valueb#) )
always (id1 <= num1value# or id2 < num2value#)
always ( rise (id1 == num1value#) -> (id2 == id3) until [0:num2temporal#] (not (id4 == id5)) )
always ( rise (id1 <= num1value#) -> eventually (not (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (id2 <= num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> id4 == num2value# or id5 == num3value# )
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( (id1 == id2) since [0:num2temporal#] (not (id3 <= num1value#)) -> always [0:num3temporal#] (id4 == id5) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#)) -> (id2 == id3) until (rise (id4 <= num3value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( id1 >= num1value# and id2 >= num2value# -> (id3 == id4) since [0:num4temporal#] (not (id5 <= num3value#)) )
always ( rise (id1 < num1value#) -> not (id2 <= num2value#) )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> (id2 >= num3value#) since [num5temporala#:num5temporalb#] (id3 == num4value#) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2value#))) )
always [0:num2temporal#] (not (id1 < num1value#))
eventually [0:num3temporal#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 <= num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> always (id3 < num4value#) )
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always (id1 > num1value#)
always ( id1 == num1value# -> not (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 or (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 <= num1value# -> id2 == id3 )
always ( not fall (id1 >= num1value#) -> id2 == id3 )
always [0:num2temporal#] (id1 > num1value#)
eventually (id1 > num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 >= num1value# and id2 == num2value# -> id3 >= num3value# and id4 < num4value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#) -> (not fall (id3 == num3value#)) until [0:num5temporal#] (id4 == num4value#) )
always [0:num2temporal#] (not (id1 < num1value#))
eventually [0:num3temporal#] (id1 == num1value# and fall (id2 == num2value#))
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not (once [0:num4temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> (id3 == id4) until [num4temporala#:num4temporalb#] (id5 >= num3valuea# and id5 <= num3valueb#) )
eventually [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id3 > num1value#))) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always ( id1 > num1value# -> always (eventually [num3temporala#:num3temporalb#] (not (id2 >= num2value#))) )
always ( rise (id1 == num1value#) -> once [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == id2) -> rise ((id3 == num1value#) until (id4 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall ((id2 >= num2valuea# and id2 <= num2valueb#) since (id3 <= num3value#)) )
always ( (id1 < num1value#) since (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually (id1 >= num1value# or id2 > num2value#)
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == id2) -> always (eventually [num1temporala#:num1temporalb#] (id3 == id4)) )
eventually [0:num1temporal#] (id1 == id2)
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( historically [0:num2temporal#] (id1 < num1value#) -> (id2 == num3value#) since [0:num5temporal#] (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 <= num1value#) )
always ( fall (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (rise (id3 >= num3value#)) )
always (id1 == num1value# and id2 == num2value#)
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (not fall (id3 > num2value#)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (rise (id1 > num1value#) or rise (id2 == num2value#))
always ( id1 < num1value# and id2 >= num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( not (eventually [0:num1temporal#] (id1 == id2)) -> always (not (id3 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise ((id1 >= num1valuea# and id1 <= num1valueb#) until [num3temporala#:num3temporalb#] (id2 >= num2value#)) -> always [0:num5temporal#] (eventually [num6temporala#:num6temporalb#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# and id3 == id4 )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 <= num3value# )
always ( (id1 == id2) until [0:num2temporal#] (rise (id3 > num1valuea# and id3 < num1valueb#)) -> eventually [0:num4temporal#] (id4 <= num3value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( id1 >= num1value# and not fall (id2 == id3) -> eventually [0:num3temporal#] (rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
eventually (id1 == num1value#)
always (id1 == id2 or id3 < num1value#)
always ( fall (id1 == id2) -> (id3 > num1value#) until [0:num3temporal#] (not (id4 > num2valuea# and id4 < num2valueb#)) )
always ( id1 <= num1value# or rise (id2 >= num2value#) -> not (once [num4temporala#:num4temporalb#] (fall (id3 == num3value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( once [0:num2temporal#] (id1 > num1value#) -> (id2 > num3valuea# and id2 < num3valueb#) until [0:num5temporal#] (id3 == num4value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
eventually [0:num2temporal#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always ( id1 >= num1value# and id2 == num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) and not (id4 >= num4valuea# and id4 <= num4valueb#) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> id2 == num2value# and fall (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num3temporal#] (id1 <= num1value# or rise (id2 <= num2value#))
always ( id1 > num1value# -> eventually (always (id2 == id3)) )
always ( not (once [0:num1temporal#] (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 < num2value#)) )
always ( id1 == num1value# or id2 == num2value# -> always (eventually [0:num4temporal#] (rise (id3 == num3value#))) )
always ( id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not fall (id3 == id4) )
always (not (id1 >= num1value#) or id2 >= num2value#)
always ( (id1 <= num1value#) since [0:num3temporal#] (rise (id2 <= num2value#)) -> always [0:num5temporal#] (id3 > num4valuea# and id3 < num4valueb#) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> rise ((not (id2 > num2value#)) since [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == num1value# or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 <= num2value#)) )
always ( id1 == num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 == num1value#) -> rise ((id2 < num2value#) until (id3 == id4)) )
eventually [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always [0:num2temporal#] (id1 < num1value# and not fall (id2 == id3))
eventually [0:num3temporal#] (id1 >= num1value# or id2 == num2value#)
always [0:num3temporal#] (id1 == num1value# and not (id2 >= num2valuea# and id2 < num2valueb#))
always ( id1 == num1value# -> id2 < num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( (id1 > num1value#) until (id2 >= num2valuea# and id2 <= num2valueb#) -> not fall ((id3 == num3value#) until [0:num5temporal#] (id4 < num4value#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually (not fall (id2 == num3value#)) )
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
eventually [0:num2temporal#] (id1 > num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( id1 == id2 or id3 >= num1value# -> id4 < num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( id1 >= num1value# and id2 == num2value# -> (id3 == num3value#) until [num4temporala#:num4temporalb#] (id4 == id5) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( id1 < num1value# -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (not (id2 == id3))) )
always ( (id1 >= num1value#) since (id2 < num2value#) -> (id3 == num3value#) since [0:num5temporal#] (id4 >= num4value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value# or id2 == id3)
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
eventually (rise (id1 <= num1value#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 < num2value# or id3 > num3value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) since (id2 >= num2value#)) -> (id3 <= num3value#) until [num5temporala#:num5temporalb#] (id4 == num4value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 > num1value#) -> id2 > num2value# and rise (id3 > num3value#) )
eventually [num2temporala#:num2temporalb#] (fall (id1 > num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 >= num2value# and rise (id3 < num3value#) )
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#) or id2 == id3)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( rise (id1 < num1value#) -> not (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually (not rise (id2 >= num2value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> (not (id2 == num2value#)) since [num3temporala#:num3temporalb#] (id3 == id4) )
always ( (id1 == id2) until [0:num2temporal#] (id3 == num1value#) -> always [0:num3temporal#] (not (id4 == id5)) )
eventually (rise (id1 < num1value#) and id2 >= num2value#)
always ( rise (id1 >= num1value#) and id2 >= num2value# -> eventually [0:num3temporal#] (id3 == id4) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
eventually [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (not (id2 <= num2value#)) )
always ( rise (once [num2temporala#:num2temporalb#] (id1 >= num1value#)) -> eventually [num4temporala#:num4temporalb#] (always (id2 > num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id2 == id3))) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually (id1 == num1value# or id2 < num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# and id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id3 > num3value#)) )
eventually (id1 > num1value#)
always ( id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id4 == id5))) )
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( not (historically (id1 < num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always ( id1 == id2 and id3 == num1value# -> id4 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
eventually (rise (id1 >= num1value#))
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not (id2 <= num2value#))
always ( rise (id1 == num1value#) -> rise (id2 < num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise ((not (id2 == num2value#)) until [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> rise (id2 > num2value#) or id3 > num3value# )
always ( id1 >= num1value# or id2 == id3 -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> id2 < num2value# or not (id3 == num3value#) )
always ( fall (id1 == id2) -> id3 == num1value# )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 == num1value# -> not (eventually (rise (id2 < num2value#))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( not (historically (id1 == id2)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( fall (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 == num1value# -> rise (id2 > num2value#) )
always ( id1 == num1value# -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> not (id2 > num2value#) )
always ( not (once [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))) -> (id2 >= num3value#) until (id3 >= num4valuea# and id3 <= num4valueb#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 == num1value#) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( id1 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( historically (not fall (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
eventually (id1 == id2 and id3 < num1value#)
eventually [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#))
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 > num3value#) )
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num2temporal#] (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 >= num3valuea# and id2 < num3valueb#))) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> not (eventually [num3temporala#:num3temporalb#] (id2 > num2value#)) )
eventually [0:num3temporal#] (not (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (once [num2temporala#:num2temporalb#] (id1 > num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 == id3) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> (id2 == id3) until [0:num3temporal#] (not (id4 < num2value#)) )
always ( id1 <= num1value# or not (id2 < num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( historically [0:num2temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#)) -> eventually [num3temporala#:num3temporalb#] (fall (id2 == id3)) )
always [num2temporala#:num2temporalb#] (not (id1 == num1value#))
eventually [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 < num1value#) -> always (eventually (rise (id2 >= num2value#))) )
always ( not (once (id1 > num1valuea# and id1 < num1valueb#)) -> eventually (always (id2 == id3)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always (id1 <= num1value#)
always [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (fall (id4 == num2value#)) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and not (id3 >= num3value#) )
always ( id1 == num1value# and not (id2 < num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( id1 < num1value# and id2 == num2value# -> id3 == id4 )
always ( fall (id1 == num1value#) -> historically (not (id2 == id3)) )
always [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( id1 > num1value# and rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 == num4value#))) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> always (id2 == num3value#) )
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( eventually [0:num1temporal#] (fall (id1 == id2)) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id3 == num2value#))) )
always (id1 == id2 or id3 == id4)
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> always (id2 >= num2value#) )
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
always ( id1 >= num1value# -> id2 == num2value# )
always ( id1 < num1value# -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( not (id1 < num1value#) -> not (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( not rise (id1 > num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 == id4) until [0:num4temporal#] (rise (id5 > num3valuea# and id5 < num3valueb#)) )
always ( id1 == id2 or fall (id3 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id4 < num2value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( not fall (id1 >= num1value#) and id2 < num2value# -> id3 == id4 )
always ( historically (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [0:num3temporal#] (fall (id1 == num1value#) or id2 <= num2value#)
eventually (not (id1 < num1value#) and not (id2 <= num2value#))
always ( rise (id1 == num1value#) and id2 < num2value# -> (id3 == id4) until [0:num4temporal#] (id5 == num3value#) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( fall (id1 == num1value#) -> not (id2 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> eventually [num3temporala#:num3temporalb#] (id4 > num2value#) )
always ( rise (id1 == id2) -> eventually (always [0:num1temporal#] (id3 == id4)) )
always ( once [num2temporala#:num2temporalb#] (rise (id1 >= num1value#)) -> always [num4temporala#:num4temporalb#] (not fall (id2 >= num3valuea# and id2 <= num3valueb#)) )
always (not (id1 == num1value#))
always ( eventually [0:num1temporal#] (rise (id1 == id2)) -> always (eventually [num2temporala#:num2temporalb#] (fall (id3 == id4))) )
always ( fall (id1 == id2) -> id3 > num1value# )
always ( id1 > num1valuea# and id1 <= num1valueb# -> id2 <= num2value# or rise (id3 < num3value#) )
always (id1 == id2)
always ( rise (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 <= num1value#) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always (id1 > num1value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> always (eventually [0:num4temporal#] (id2 < num3value#)) )
eventually [0:num3temporal#] (fall (id1 == num1value#) or not (id2 > num2value#))
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == id2) -> rise (historically [num2temporala#:num2temporalb#] (id3 == num1value#)) )
eventually [0:num2temporal#] (not (id1 == id2) and id3 <= num1value#)
always ( fall (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( not (once [0:num1temporal#] (fall (id1 == id2))) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == num2value#)) )
always (id1 < num1value# and not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always (not (id1 == num1value#) or id2 >= num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2value#))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 == id2 or id3 >= num1value# -> id4 <= num2value# )
always ( id1 == id2 or id3 == id4 -> (id5 > num1valuea# and id5 < num1valueb#) until [num3temporala#:num3temporalb#] (id6 > num2value#) )
always ( not rise ((id1 > num1value#) until (id2 >= num2value#)) -> always [0:num4temporal#] (eventually (id3 < num3value#)) )
always ( id1 < num1value# -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( fall (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (id3 == num1value#)) )
always ( fall (id1 == num1value#) -> rise (eventually (fall (id2 == id3))) )
always ( rise (id1 == id2) -> id3 == num1value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( id1 > num1valuea# and id1 < num1valueb# -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and fall (id2 == num2value#) -> id3 >= num3value# or id4 == num4value# )
always ( id1 == num1value# -> eventually (fall (id2 == num2value#)) )
always (not (id1 == id2))
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1valuea# and id3 < num1valueb#))) )
always ( id1 == id2 -> eventually [0:num1temporal#] (id3 == id4) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 == num1value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 > num1value# -> not (historically [num2temporala#:num2temporalb#] (not (id2 == id3))) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( not fall (id1 == id2) or id3 < num1value# -> id4 <= num2value# )
always [0:num1temporal#] (id1 == id2 and not (id3 == id4))
always ( historically (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( (not (id1 <= num1value#)) until [0:num3temporal#] (rise (id2 > num2valuea# and id2 <= num2valueb#)) -> eventually [num5temporala#:num5temporalb#] (always (id3 >= num4value#)) )
always ( id1 == num1value# -> rise (id2 >= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( once [0:num1temporal#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == id4)) )
always ( id1 == num1value# or id2 > num2value# -> eventually [0:num4temporal#] (always (id3 == num3value#)) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# -> id2 >= num2value# )
always (not (id1 == id2))
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#))
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( rise (id1 == num1value#) -> id2 >= num2value# or (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( id1 < num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (id3 == num3value#) )
always ( not rise (id1 == num1value#) -> rise (always (id2 > num2value#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# -> not fall (id2 == id3) )
always ( not rise (historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> not fall (historically (not (id2 < num3value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#) or id2 == id3)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 == num1value#) -> always (id2 == num2value#) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 >= num1value#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( not (historically [0:num2temporal#] (id1 == num1value#)) -> eventually (not (id2 > num3valuea# and id2 < num3valueb#)) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not fall (id1 == id2) -> not (eventually [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (rise (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always [num2temporala#:num2temporalb#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 >= num1value#) -> rise (id2 < num2value#) and (id3 >= num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 < num1value#) -> (id2 == num2value#) until [0:num3temporal#] (not (id3 == id4)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 == num1value#) -> fall (id2 == num2value#) )
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) and not (id2 == num2value#))
always ( id1 == num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( fall (id1 == id2) -> not (historically [num1temporala#:num1temporalb#] (not (id3 == id4))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (rise (id2 > num2value#)) )
always ( id1 <= num1value# and id2 < num2value# -> rise (id3 >= num3valuea# and id3 <= num3valueb#) and id4 == num4value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 <= num2value#)
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) or id3 == id4 )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( rise (id1 < num1value#) -> id2 == id3 or id4 >= num2value# )
always ( fall (id1 == num1value#) or id2 >= num2value# -> not (eventually [0:num4temporal#] (rise (id3 < num3value#))) )
always ( historically (not (id1 <= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 == id2 -> rise (id3 > num1value#) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( fall (id1 == num1value#) -> (id2 > num2value#) until (not (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> not (historically [0:num3temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) until [0:num3temporal#] (rise (id2 > num2value#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
eventually (id1 < num1value#)
always ( not (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( not ((id1 >= num1value#) since [num2temporala#:num2temporalb#] (rise (id2 == id3))) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id4 <= num3value#)) )
always ( rise (id1 == num1value#) -> always (id2 < num2value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> once (id3 < num4value#) )
always [0:num3temporal#] (id1 >= num1value# and id2 == num2value#)
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) -> not fall (once (id2 <= num2value#)) )
always ( rise (id1 == id2) -> not (id3 >= num1value#) )
always ( id1 < num1value# and id2 > num2value# -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( not (id1 < num1value#) and not rise (id2 == id3) -> (id4 > num2valuea# and id4 < num2valueb#) until [0:num3temporal#] (id5 == id6) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) since [0:num4temporal#] (fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always (id1 == num1value#)
always ( id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 < num2value# )
eventually [0:num3temporal#] (rise (id1 >= num1value#) and id2 > num2value#)
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (not (id3 == num1value#))) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (id3 < num1value#)) )
always ( rise (id1 == id2) -> id3 < num1value# )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always (id3 == id4)) )
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (id3 == id4)) )
always (id1 == id2)
always (id1 == id2)
always ( id1 == id2 and not rise (id3 > num1value#) -> historically (id4 <= num2value#) )
always ( fall (id1 == num1value#) -> eventually (id2 == id3) )
always ( id1 == id2 and id3 == num1value# -> id4 == id5 )
always ( fall (id1 == num1value#) -> always (eventually [0:num3temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) or id2 == num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == num1value# and id2 == num2value# -> rise (id3 > num3value#) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> id4 > num2value# )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
eventually [num1temporala#:num1temporalb#] (not (id1 == id2) or id3 == id4)
always ( rise (id1 == num1value#) -> rise (id2 >= num2valuea# and id2 < num2valueb#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 <= num2value#)
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually (id1 < num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( fall (id1 == id2) -> eventually (always [num1temporala#:num1temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (fall (id3 >= num1valuea# and id3 <= num1valueb#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value# and id2 == id3)
always ( rise (id1 > num1value#) or id2 < num2value# -> id3 == num3value# or id4 <= num4value# )
eventually [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( rise (id1 == id2) -> eventually (not fall (id3 == num1value#)) )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( not (id1 > num1value#) and id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always (id1 < num1value# and not (id2 == id3))
always ( not (once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)) -> (id2 == num3value#) until [0:num5temporal#] (rise (id3 == num4value#)) )
always ( fall (id1 == num1value#) -> always (id2 >= num2value#) )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (rise (id3 >= num3valuea# and id3 < num3valueb#)) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == num1value#) -> (not fall (id2 == id3)) until (rise (id4 >= num2value#)) )
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) or id4 > num2value# )
always ( not (once (rise (id1 >= num1value#))) -> fall ((id2 == num2value#) until (id3 > num3value#)) )
always ( id1 > num1value# or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 <= num3value#)) )
always (id1 == num1value#)
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 == num1value#) -> (id2 == id3) until (rise (id4 < num2value#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> fall (once (rise (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( not (id1 > num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 >= num3valuea# and id3 < num3valueb# )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( rise (id1 == num1value#) and rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> not (historically [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (rise (id1 > num1value#))
always ( id1 == num1value# or id2 == id3 -> id4 < num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not fall (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> not (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == num1value#) -> not ((id2 == id3) until [0:num3temporal#] (id4 >= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value#)
always ( not (id1 == num1value#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( id1 > num1value# or id2 <= num2value# -> id3 > num3value# )
always ( once (rise (id1 == num1value#)) -> not (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 == num1value# or id2 > num2value# -> (id3 >= num3value#) until [0:num4temporal#] (id4 == id5) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
eventually (id1 == id2 or rise (id3 == num1value#))
always ( (id1 <= num1value#) until [0:num3temporal#] (id2 < num2value#) -> eventually [num5temporala#:num5temporalb#] (always [num6temporala#:num6temporalb#] (id3 > num4valuea# and id3 < num4valueb#)) )
always (id1 == id2 and not fall (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 < num1value#) -> fall (historically (id2 >= num2value#)) )
always ( id1 == num1value# and not (id2 <= num2value#) -> id3 == id4 )
always ( rise (id1 < num1value#) -> not (id2 == id3) )
always ( rise (id1 <= num1value#) -> not fall (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( not (once [0:num2temporal#] (id1 == num1value#)) -> not (always [num4temporala#:num4temporalb#] (not (id2 >= num3value#))) )
always ( id1 < num1value# and id2 == id3 -> eventually [num2temporala#:num2temporalb#] (always (id4 == id5)) )
always ( rise (id1 > num1value#) and id2 < num2value# -> eventually (not (id3 == num3value#)) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( id1 == num1value# and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 <= num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> always (eventually [0:num3temporal#] (id2 < num2value#)) )
always ( id1 < num1value# or id2 == id3 -> eventually [num3temporala#:num3temporalb#] (rise (id4 > num2valuea# and id4 < num2valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (fall (id2 == num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 == num4value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1value# and not (id2 == num2value#) -> (id3 <= num3value#) until [0:num5temporal#] (id4 == num4value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( id1 == num1value# and not rise (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) or id2 <= num2value#)
always ( id1 == id2 -> (not (id3 == id4)) until (id5 < num1value#) )
always ( (id1 == num1value#) until [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) -> (id3 >= num4valuea# and id3 <= num4valueb#) until (id4 >= num5value#) )
always ( not rise (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> (id2 == id3) until [0:num4temporal#] (rise (id4 == num3value#)) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
eventually [0:num1temporal#] (rise (id1 == id2))
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( not ((id1 == id2) since [0:num2temporal#] (id3 == num1value#)) -> not fall (eventually [0:num4temporal#] (id4 <= num3value#)) )
always ( id1 == num1value# -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> eventually (always [0:num3temporal#] (id2 <= num2value#)) )
always ( fall (id1 == num1value#) -> (id2 == id3) until (id4 >= num2value#) )
always ( eventually (rise (id1 == id2)) -> (id3 <= num1value#) since [0:num3temporal#] (id4 > num2value#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 > num1value# and not rise (id2 == id3))
always ( historically (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 <= num1value# or id2 >= num2value# -> not (eventually [num3temporala#:num3temporalb#] (id3 == id4)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> always (eventually (rise (id2 <= num2value#))) )
always ( not (historically (id1 >= num1value#)) -> once (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> always (id2 >= num2value#) )
always ( id1 <= num1value# or id2 == num2value# -> (id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (id4 == num4value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == num1value# and id2 < num2value# -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> not fall (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 >= num1value# -> not (id2 < num2value#) )
always ( not (always [0:num2temporal#] (id1 > num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( historically (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 >= num3value#) until [0:num5temporal#] (id4 > num4value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not rise ((id2 < num2value#) until (id3 <= num3value#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (always [0:num2temporal#] (not rise (id3 == id4))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( id1 == id2 -> always [0:num2temporal#] (id3 > num1valuea# and id3 <= num1valueb#) )
always ( (not (id1 >= num1valuea# and id1 <= num1valueb#)) until (not (id2 >= num2value#)) -> not ((not (id3 == id4)) since [num3temporala#:num3temporalb#] (fall (id5 == id6))) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> once (not rise (id3 == id4)) )
always ( rise (id1 > num1value#) -> id2 == id3 )
eventually (id1 == id2 and id3 <= num1value#)
always ( not rise (id1 == num1value#) and id2 < num2value# -> (id3 == num3value#) until [0:num5temporal#] (not rise (id4 > num4value#)) )
always ( rise (id1 >= num1value#) -> historically [0:num3temporal#] (not fall (id2 == num2value#)) )
eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> fall (always (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> once [0:num2temporal#] (rise (id2 == id3)) )
always ( id1 == num1value# -> id2 >= num2value# )
always ( fall (historically [num1temporala#:num1temporalb#] (id1 == id2)) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( rise (id1 == id2) -> not ((id3 >= num1valuea# and id3 <= num1valueb#) until (id4 > num2value#)) )
always ( not fall (eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 == num3value#) )
always [0:num2temporal#] (id1 <= num1value#)
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> always (id2 == num2value#) )
always ( rise (id1 == id2) -> not (eventually (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( historically (not (id1 >= num1value#)) -> always (id2 >= num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> (not (id3 > num3value#)) until [num5temporala#:num5temporalb#] (rise (id4 >= num4valuea# and id4 <= num4valueb#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
eventually [0:num1temporal#] (id1 == id2)
eventually (rise (id1 < num1value#))
always ( rise (id1 == id2) -> rise (id3 < num1value#) )
always ( fall (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> rise (id4 == num2value#) and id5 < num3value# )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( fall (id1 == id2) -> always (id3 < num1value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( (id1 == id2) since (id3 >= num1valuea# and id3 <= num1valueb#) -> (id4 >= num2valuea# and id4 < num2valueb#) until [0:num4temporal#] (not (id5 >= num3valuea# and id5 <= num3valueb#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always (id1 <= num1value#)
always ( eventually [0:num2temporal#] (rise (id1 < num1value#)) -> not (always [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 == num1value# -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always (id1 < num1value#)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 == num1value# -> fall (always (not (id2 == num2value#))) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 > num1valuea# and id3 <= num1valueb#) )
always ( fall (id1 == id2) -> historically [0:num2temporal#] (id3 > num1valuea# and id3 <= num1valueb#) )
always [0:num2temporal#] (not fall (id1 >= num1value#))
always ( rise (id1 < num1value#) and id2 == num2value# -> historically [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 == num1value#) -> id2 >= num2value# and id3 == id4 )
eventually (id1 >= num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 == num2value#)) )
always (id1 <= num1value# and not (id2 < num2value#))
always [0:num1temporal#] (id1 == id2)
eventually ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 < num2valueb#) or id3 == id4 )
always ( once (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually (id1 == id2)
always ( id1 == id2 -> eventually [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#) )
always [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
eventually (rise (id1 < num1value#) and id2 > num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> id2 == id3 and id4 == num2value# )
always ( id1 == id2 -> rise (id3 > num1value#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# or not (id3 == num3value#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 > num2value#))
always [0:num1temporal#] (not (id1 == id2))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 <= num3valueb#) )
always (id1 == id2 or not (id3 == num1value#))
always ( rise (id1 == id2) -> id3 == id4 )
eventually [0:num2temporal#] (id1 == id2 and id3 < num1value#)
always ( id1 == num1value# or not (id2 > num2value#) -> (id3 == num3value#) until [0:num5temporal#] (id4 >= num4value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( rise (id1 <= num1value#) -> not ((id2 > num2value#) until (id3 <= num3value#)) )
eventually (id1 < num1value# and id2 == num2value#)
always ( id1 <= num1value# or id2 <= num2value# -> always (id3 < num3value#) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( id1 == id2 or fall (id3 == num1value#) -> (id4 > num2valuea# and id4 < num2valueb#) until [0:num4temporal#] (id5 == num3value#) )
always [0:num3temporal#] (not (id1 >= num1value#) and id2 > num2value#)
eventually [0:num3temporal#] (id1 <= num1value# or rise (id2 <= num2value#))
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually (rise (id2 < num2value#))) )
always ( rise (id1 <= num1value#) -> (not (id2 <= num2value#)) until (id3 == id4) )
always ( rise (id1 < num1value#) -> not ((not fall (id2 == id3)) until (rise (id4 <= num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 < num1value#) -> id2 == num2value# and id3 == id4 )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 <= num2value#)
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> (id2 == num2value#) until (id3 < num3value#) )
always ( id1 == num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == id2) -> eventually [0:num1temporal#] (always (id3 == id4)) )
always ( id1 <= num1value# or id2 == id3 -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
eventually (not (id1 == id2))
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) and rise (id2 == num2value#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( id1 < num1value# -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always [0:num2temporal#] (id1 > num1value# and id2 == id3)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always [0:num2temporal#] (id1 > num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> not fall (id4 == num2value#) )
always ( not ((id1 == num1value#) since [num2temporala#:num2temporalb#] (id2 == id3)) -> always [num4temporala#:num4temporalb#] (id4 >= num3value#) )
always [0:num3temporal#] (id1 < num1value# or not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == id2 -> eventually (id3 == id4) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> not rise (eventually (id3 > num3value#)) )
eventually (rise (id1 >= num1value#) or id2 <= num2value#)
always ( id1 < num1value# -> eventually [0:num2temporal#] (fall (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [0:num4temporal#] (id3 > num3value#)) )
always ( once (rise (id1 == num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( not (id1 < num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 == num2value#) -> id3 > num3value# and rise (id4 <= num4value#) )
always ( rise (id1 < num1value#) -> id2 == id3 or id4 >= num2value# )
always ( id1 == id2 and id3 == id4 -> not (id5 >= num1value#) )
always ( rise (id1 == id2) -> id3 < num1value# )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( id1 == num1value# and id2 <= num2value# -> (not rise (id3 >= num3value#)) until [0:num5temporal#] (id4 <= num4value#) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> once [0:num3temporal#] (id3 == num2value#) )
always ( id1 < num1value# or id2 == id3 -> not ((id4 >= num2valuea# and id4 <= num2valueb#) until (not fall (id5 == id6))) )
always ( (not (id1 >= num1value#)) until [0:num3temporal#] (not fall (id2 == num2value#)) -> always [0:num5temporal#] (id3 <= num4value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> always [num4temporala#:num4temporalb#] (eventually (id3 == num3value#)) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3value#) since [0:num5temporal#] (not rise (id4 > num4valuea# and id4 < num4valueb#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 > num1value#) or id2 == num2value# -> id3 == num3value# )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> (id2 >= num2value#) until (id3 >= num3valuea# and id3 <= num3valueb#) )
always [0:num2temporal#] (id1 < num1value#)
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 < num1valueb#) or not (id2 <= num2value#))
eventually [0:num2temporal#] (not fall (id1 == id2) and id3 < num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( (id1 == num1value#) since [0:num2temporal#] (id2 == id3) -> (id4 == num3value#) until [0:num5temporal#] (id5 == num4value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) or rise (id4 == num4value#) )
always ( rise (once [0:num2temporal#] (id1 == num1value#)) -> eventually (id2 == id3) )
always ( rise (id1 == num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> id2 == num2value# or id3 == id4 )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 >= num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 < num1value# or id2 == id3)
always [0:num3temporal#] (id1 == num1value# or not fall (id2 == num2value#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always [0:num3temporal#] (id1 < num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (once [0:num2temporal#] (id1 == num1value#)) -> eventually [0:num4temporal#] (always (id2 == num3value#)) )
always ( id1 == num1value# -> id2 <= num2value# or id3 < num3value# )
always ( not (id1 == num1value#) -> id2 == num2value# )
always ( (not (id1 == id2)) since [num2temporala#:num2temporalb#] (id3 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id4 >= num3valuea# and id4 < num3valueb#))) )
always [0:num2temporal#] (id1 == num1value#)
eventually (rise (id1 > num1valuea# and id1 < num1valueb#))
eventually [0:num3temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always [0:num2temporal#] (id1 == id2 or id3 > num1value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id3 == num1value#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> (not (id2 > num2value#)) until (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually (id1 >= num1value# or fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (rise (id3 < num1value#))) )
always ( eventually [0:num2temporal#] (not (id1 > num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 > num2valuea# and id2 <= num2valueb#) -> id3 == id4 )
always ( not (eventually [num1temporala#:num1temporalb#] (id1 == id2)) -> fall ((id3 > num2valuea# and id3 < num2valueb#) until (id4 > num3value#)) )
always ( rise (id1 >= num1value#) and not (id2 > num2valuea# and id2 <= num2valueb#) -> not (always [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( (id1 > num1value#) since [0:num3temporal#] (id2 == num2value#) -> eventually (id3 == id4) )
always ( not (id1 < num1value#) -> eventually (always (id2 > num2value#)) )
eventually (id1 == id2 and (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 == num1value#))) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 == id2 and rise (id3 <= num1value#) -> id4 > num2value# )
always ( rise (id1 > num1value#) -> always (id2 >= num2value#) )
always ( fall (id1 == id2) -> id3 < num1value# )
always [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always ( id1 == id2 -> id3 == id4 )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
eventually [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not ((id1 <= num1value#) since [0:num3temporal#] (rise (id2 < num2value#))) -> (id3 == num4value#) until [num6temporala#:num6temporalb#] (id4 <= num5value#) )
always [0:num3temporal#] (not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#))
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually (rise (id3 >= num1value#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
eventually [0:num3temporal#] (not fall (id1 >= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num3temporal#] (not (id1 < num1value#) or id2 > num2value#)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) -> id2 < num2value# and id3 == id4 )
eventually [0:num2temporal#] (id1 >= num1value#)
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> (not (id3 > num3valuea# and id3 < num3valueb#)) until (id4 == id5) )
always ( historically [0:num2temporal#] (not (id1 < num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always ( id1 <= num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 == num1value#) -> not fall (once [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( once [0:num2temporal#] (rise (id1 >= num1value#)) -> once [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( fall (id1 == id2) -> id3 == num1value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> once [0:num2temporal#] (id2 == id3) )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( id1 > num1value# or rise (id2 >= num2value#) -> id3 == num3value# )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always [num2temporala#:num2temporalb#] (id3 == id4)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (not (id2 >= num2value#)) )
always ( (id1 < num1value#) since [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) -> eventually (id3 > num4valuea# and id3 < num4valueb#) )
eventually (id1 > num1value#)
always ( fall (once (not (id1 > num1value#))) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( (id1 == num1value#) until [0:num3temporal#] (id2 == num2value#) -> (id3 > num4value#) until [0:num6temporal#] (rise (id4 > num5valuea# and id4 < num5valueb#)) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 < num1valueb#))
always [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( fall (id1 == num1value#) -> rise (id2 == id3) )
always ( not ((id1 < num1value#) since (rise (id2 > num2value#))) -> always (eventually [0:num4temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 -> fall (id3 >= num1valuea# and id3 <= num1valueb#) and (id4 >= num2valuea# and id4 <= num2valueb#) )
always (id1 == id2 or id3 > num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( eventually [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (id3 == num2value#) )
always ( rise (id1 <= num1value#) -> rise (id2 == id3) )
always ( id1 > num1value# and rise (id2 > num2value#) -> eventually (not (id3 < num3value#)) )
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) and id4 == id5 )
always ( not ((id1 == id2) since [0:num2temporal#] (id3 == num1value#)) -> not ((id4 > num3value#) since [0:num4temporal#] (id5 == id6)) )
always [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually (fall (id2 == num2value#))) )
always ( rise (id1 == num1value#) and id2 <= num2value# -> not ((id3 == num3value#) until [num5temporala#:num5temporalb#] (id4 < num4value#)) )
always ( fall (id1 == num1value#) -> eventually (rise (id2 == id3)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( id1 > num1value# -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( fall (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (rise (id3 > num1valuea# and id3 < num1valueb#))) )
eventually (id1 <= num1value# or id2 == id3)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# and id2 >= num2value# -> eventually (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 == num2value#) -> not ((not (id3 < num3value#)) until [0:num5temporal#] (id4 == num4value#)) )
eventually (id1 == id2)
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) and id4 < num2value# )
always ( not ((id1 == id2) since (id3 < num1value#)) -> (id4 > num2value#) since [0:num4temporal#] (rise (id5 < num3value#)) )
always ( fall (id1 == num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
eventually [0:num3temporal#] (not (id1 == num1value#) and id2 > num2value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 >= num3value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> eventually (rise (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( not fall (historically [0:num2temporal#] (id1 >= num1value#)) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 == id3)) )
always ( id1 == num1value# and rise (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( not (id1 < num1value#) and rise (id2 < num2value#) -> historically [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always [0:num2temporal#] (not (id1 >= num1value#))
eventually [0:num2temporal#] (id1 > num1value#)
always ( id1 == num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( id1 == num1value# and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> eventually (id3 == num1value#) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always [0:num3temporal#] (id1 <= num1value# and not (id2 == num2value#))
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not fall (id1 == num1value#) and id2 == num2value# -> not rise ((id3 == num3value#) until (fall (id4 == id5))) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 == num1value# -> id2 >= num2value# )
always ( id1 < num1value# -> id2 == num2value# )
always [0:num2temporal#] (id1 >= num1value#)
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( fall (id1 == id2) -> id3 <= num1value# or (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually (id1 == num1value#)
always ( not rise (historically [0:num2temporal#] (id1 >= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always ( rise (id1 > num1value#) -> id2 == num2value# and rise (id3 >= num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) or id2 == num2value#)
always ( id1 == num1value# -> id2 > num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) and rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 <= num1value#) -> eventually (rise (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> not ((id2 <= num2value#) until [0:num3temporal#] (fall (id3 == id4))) )
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always [num1temporala#:num1temporalb#] (not (id1 == id2))
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( not (always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (id2 > num3value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) or rise (id2 < num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (once (id1 >= num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == num1value#) -> id2 == num2value# and id3 == num3value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not rise (once [num2temporala#:num2temporalb#] (id1 > num1value#)) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( not ((id1 > num1value#) since (id2 == id3)) -> eventually [0:num3temporal#] (always (id4 == num2value#)) )
always ( id1 >= num1value# and rise (id2 <= num2value#) -> id3 <= num3value# and not (id4 == id5) )
always (id1 == id2)
eventually (fall (id1 > num1valuea# and id1 < num1valueb#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) or id2 > num2value# -> once [0:num3temporal#] (fall (id3 == id4)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( (id1 == id2) since [0:num2temporal#] (id3 >= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id4 == num3value#)) )
always ( id1 == num1value# and id2 == id3 -> (id4 > num2valuea# and id4 < num2valueb#) and rise (id5 >= num3valuea# and id5 < num3valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and fall (id2 > num2valuea# and id2 < num2valueb#))
always ( not (historically [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))) -> always [num4temporala#:num4temporalb#] (not fall (id2 > num3value#)) )
always (id1 == id2)
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( rise (id1 == num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num3value#))) )
always ( id1 <= num1value# and rise (id2 < num2value#) -> id3 > num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not fall (id2 >= num2value#) -> historically [0:num3temporal#] (id3 == id4) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 >= num1value#) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( not fall (id1 == num1value#) -> id2 == id3 )
eventually [0:num3temporal#] (rise (id1 < num1value#) and id2 >= num2value#)
always ( rise (id1 < num1value#) -> not rise (id2 == id3) and fall (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) or id3 == id4 )
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually (id1 >= num1value# and id2 == num2value#)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (not (id2 > num2value#)) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> eventually (always [num4temporala#:num4temporalb#] (not fall (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 < num1value#) -> eventually (id2 > num2value#) )
always ( historically (id1 == num1value#) -> always [0:num3temporal#] (id2 < num2value#) )
eventually [0:num2temporal#] (not (id1 == num1value#))
eventually [num3temporala#:num3temporalb#] (id1 > num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == num1value# or id2 <= num2value# -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
eventually (rise (id1 == num1value#))
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 == num2value#) )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always (id3 == id4)) )
eventually (id1 <= num1value#)
eventually (fall (id1 == num1value#) and rise (id2 > num2value#))
always ( rise (id1 <= num1value#) and not (id2 <= num2value#) -> id3 > num3value# )
always ( rise (id1 > num1value#) or rise (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3value#) until (id4 == num4value#) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually (not fall (id1 == id2))
always ( id1 > num1value# and id2 > num2value# -> id3 == num3value# )
always (not fall (id1 == num1value#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) and not fall (id2 >= num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not (always (id1 > num1valuea# and id1 < num1valueb#)) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> (id2 < num2value#) until (id3 >= num3value#) )
always ( id1 <= num1value# -> not fall (id2 >= num2value#) )
always (not (id1 == num1value#) and not fall (id2 == id3))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#) -> (id3 == num3value#) until [num5temporala#:num5temporalb#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 < num1value#) -> not rise (id2 == id3) )
always (id1 >= num1value#)
eventually [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == id2) -> id3 == id4 )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 <= num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 == num1value#) and not (id2 > num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 == id2 and rise (id3 >= num1valuea# and id3 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( rise (id1 <= num1value#) -> not ((id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == num1value# -> not ((not (id2 >= num2valuea# and id2 <= num2valueb#)) since (id3 == id4)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [0:num3temporal#] (not fall (id1 == num1value#) or id2 == num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 < num1value#) and rise (id2 > num2value#) -> always [0:num4temporal#] (id3 > num3value#) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2value#)) )
always ( not (historically (id1 == id2)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == id2 and not rise (id3 >= num1value#) -> id4 == num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 <= num3value#))) )
always ( rise (id1 <= num1value#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 > num3value#))) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( (not (id1 == id2)) since [0:num2temporal#] (not (id3 > num1valuea# and id3 < num1valueb#)) -> not (eventually [0:num4temporal#] (fall (id4 >= num3valuea# and id4 <= num3valueb#))) )
eventually [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always [0:num2temporal#] (id1 < num1value# and id2 == id3)
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( not (id1 == id2) -> not (always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 <= num1valueb#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value# and id2 == id3)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2value#) -> not (id3 < num3value#) or id4 >= num4value# )
always ( (id1 == num1value#) since [0:num2temporal#] (rise (id2 == id3)) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id4 >= num3value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( fall (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 == num1value#) and id2 >= num2value# -> rise (id3 == id4) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 == num1value# or id2 == num2value# -> (id3 < num3value#) until [0:num5temporal#] (id4 > num4valuea# and id4 < num4valueb#) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 == num1value#) -> historically [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1value#) -> (id2 <= num2value#) until (id3 >= num3value#) )
always [0:num2temporal#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( historically (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> once [0:num3temporal#] (rise (id2 > num2value#)) )
always ( id1 >= num1value# and id2 < num2value# -> eventually (always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( once [num1temporala#:num1temporalb#] (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == id4)) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 <= num2value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (not (id3 == num1value#)) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or (id2 > num2valuea# and id2 <= num2valueb#))
always ( rise (id1 < num1value#) -> id2 < num2value# and rise (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# )
always ( fall (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually [num2temporala#:num2temporalb#] (not rise (id3 == id4))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( not (id1 == num1value#) and id2 == id3 -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (id4 == id5)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 <= num2value#) )
always ( rise (id1 < num1value#) -> eventually (fall (id2 == num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) )
always ( not rise (id1 == id2) and rise (id3 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 <= num2value#))) )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value# and not fall (id2 == id3))
always ( id1 > num1value# -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( always [0:num2temporal#] (id1 < num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( id1 == num1value# and fall (id2 == num2value#) -> always (eventually [0:num3temporal#] (rise (id3 == id4))) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 == id2) -> id3 < num1value# and (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always [0:num3temporal#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) and id2 >= num2value# -> (id3 > num3valuea# and id3 <= num3valueb#) until [0:num4temporal#] (not (id4 == id5)) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
always ( rise (id1 == id2) -> id3 > num1value# or id4 <= num2value# )
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (rise (id3 > num1value#))) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) or id2 < num2value#)
always ( fall (id1 == num1value#) -> not (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> id2 < num2value# or fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 == num1value# and id2 >= num2value# -> always [0:num4temporal#] (not (id3 < num3value#)) )
always ( id1 == num1value# and fall (id2 == num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
always ( rise (id1 == num1value#) -> once (fall (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) or rise (id3 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( fall (id1 == id2) -> (id3 >= num1value#) until (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 == id2 and id3 == id4 -> always (eventually (rise (id5 == num1value#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 and not (id3 == num1value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
eventually [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( fall (id1 == num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) or id3 == id4 )
always ( once [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always (id2 == num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 >= num1value# -> (id2 == id3) until (id4 == id5) )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3value# )
always ( rise (id1 == num1value#) -> not rise (id2 == id3) )
always ( rise (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( id1 == num1value# and id2 <= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
eventually (rise (id1 > num1valuea# and id1 <= num1valueb#))
always (id1 == num1value#)
eventually (rise (id1 >= num1value#))
always ( rise (id1 == id2) -> id3 == num1value# and id4 >= num2value# )
always ( id1 == id2 -> id3 == num1value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( once [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id3 < num2value#))) )
always ( fall (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since [0:num3temporal#] (id3 == id4) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) and id2 == id3 -> eventually [0:num2temporal#] (always (not (id4 == id5))) )
always ( rise (id1 < num1value#) -> (not (id2 == num2value#)) until [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( rise (id1 == num1value#) and id2 < num2value# -> eventually [0:num4temporal#] (not (id3 < num3value#)) )
always ( eventually [num2temporala#:num2temporalb#] (id1 == num1value#) -> always (id2 < num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 == id2 or id3 < num1value#)
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
eventually (id1 == id2 and id3 == num1value#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [num2temporala#:num2temporalb#] (not fall (id1 == num1value#) and id2 == id3)
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( (id1 >= num1value#) since (id2 == id3) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( once [0:num2temporal#] (rise (id1 <= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 == num3value#))) )
always ( not (id1 == id2) or not (id3 == id4) -> eventually [num2temporala#:num2temporalb#] (rise (id5 < num1value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( rise (id1 < num1value#) -> (not (id2 == num2value#)) until [0:num4temporal#] (not fall (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
eventually [0:num2temporal#] (rise (id1 == num1value#) and id2 == id3)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) until [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num5temporal#] (eventually (fall (id3 > num4valuea# and id3 <= num4valueb#))) )
always (id1 >= num1value# and id2 == id3)
always ( id1 == num1value# -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (id1 == id2 and id3 == id4)
always ( id1 < num1value# -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 < num2value# )
always ( id1 == id2 -> rise (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> always (eventually (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 == num1value# or id2 >= num2value# -> id3 > num3value# )
always ( id1 == id2 -> (id3 == id4) until [num2temporala#:num2temporalb#] (rise (id5 == num1value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( id1 == id2 -> id3 > num1value# )
always ( rise (id1 == num1value#) -> not (id2 == id3) )
always ( rise (id1 <= num1value#) -> not (eventually [0:num2temporal#] (not (id2 == id3))) )
always ( id1 == id2 -> not ((id3 == id4) until (id5 <= num1value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 <= num1value#) -> id2 > num2value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# or id3 == id4 )
always ( id1 < num1value# -> id2 == num2value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( historically [0:num2temporal#] (id1 <= num1value#) -> not fall (always [num4temporala#:num4temporalb#] (id2 > num3value#)) )
always ( rise (id1 >= num1value#) -> rise (id2 < num2value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always (eventually (rise (id2 == id3))) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 == num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == id3))) )
always ( id1 < num1value# -> always [0:num3temporal#] (eventually (rise (id2 >= num2value#))) )
always [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 <= num1value#) -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
always [0:num2temporal#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# or id2 == id3)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( id1 == id2 or id3 < num1value# -> not (id4 > num2value#) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( (id1 >= num1value#) since [0:num3temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#)) -> always (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( fall (id1 == num1value#) -> (id2 == id3) since [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 < num1value#) -> not ((id2 > num2valuea# and id2 < num2valueb#) since (id3 < num3value#)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( id1 == id2 -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [0:num2temporal#] (id2 == id3)) )
always ( rise (id1 == id2) -> not (eventually [0:num2temporal#] (id3 >= num1valuea# and id3 < num1valueb#)) )
eventually [0:num3temporal#] (id1 <= num1value# or not (id2 > num2value#))
eventually (id1 > num1value#)
always ( rise (id1 < num1value#) and fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always [num3temporala#:num3temporalb#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) since (id2 == id3) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id4 < num2value#)) )
always ( rise (id1 > num1value#) -> id2 >= num2value# )
always ( not (id1 == num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always ( rise (id1 < num1value#) -> (id2 == num2value#) since [num3temporala#:num3temporalb#] (id3 == id4) )
always ( not (historically [num1temporala#:num1temporalb#] (id1 == id2)) -> eventually (id3 > num2valuea# and id3 < num2valueb#) )
always ( historically [0:num1temporal#] (id1 == id2) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 <= num2value#))) )
always ( (not rise (id1 >= num1valuea# and id1 <= num1valueb#)) since (id2 <= num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( not (id1 <= num1value#) -> id2 > num2value# )
always ( rise (id1 >= num1value#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( once [0:num2temporal#] (rise (id1 < num1value#)) -> always [num4temporala#:num4temporalb#] (not (id2 > num3valuea# and id2 < num3valueb#)) )
always ( not ((id1 == id2) since [0:num1temporal#] (id3 == id4)) -> (not fall (id5 == num2value#)) until [0:num4temporal#] (id6 > num3valuea# and id6 <= num3valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 == id3) and not (id4 <= num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (id2 > num2value#) )
always ( id1 == id2 -> id3 >= num1valuea# and id3 <= num1valueb# )
always (not (id1 == id2))
always ( fall (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 <= num3value#) )
always ( not (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 == num3value#)) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( rise (id1 == num1value#) -> id2 < num2value# )
always (id1 > num1value#)
always [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 == num2value#)
always ( id1 == num1value# and id2 == id3 -> not (once [0:num2temporal#] (rise (id4 == id5))) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 < num1value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always (id3 > num1value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id2 == id3))) )
always ( id1 == num1value# -> rise (eventually (id2 < num2value#)) )
always ( id1 >= num1value# and id2 == num2value# -> always (id3 == id4) )
always ( id1 >= num1value# and id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> once [0:num2temporal#] (id3 == num1value#) )
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 <= num2value#)
always [0:num2temporal#] (not (id1 == num1value#) and id2 == id3)
always [0:num2temporal#] (id1 > num1value# and not (id2 == id3))
always ( rise (id1 >= num1value#) -> fall (id2 == num2value#) or rise (id3 == num3value#) )
always ( not ((id1 >= num1value#) since (rise (id2 >= num2value#))) -> eventually [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (not rise (id2 == id3)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> once (not (id2 < num2value#)) )
always ( rise (id1 < num1value#) -> eventually (always (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always (id1 > num1valuea# and id1 < num1valueb#)
always (not fall (id1 == id2))
always ( always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( id1 <= num1value# and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( (id1 <= num1value#) since [num3temporala#:num3temporalb#] (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> always (eventually [0:num5temporal#] (fall (id3 > num4valuea# and id3 < num4valueb#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( id1 > num1value# and id2 <= num2value# -> eventually [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 > num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1value# or id2 == id3)
always ( id1 == num1value# or id2 == id3 -> not (eventually [num3temporala#:num3temporalb#] (id4 >= num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 == num1value#) and id2 == id3 -> id4 < num2value# )
always ( fall (id1 == id2) -> id3 == id4 )
always [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> always (id2 >= num2value#) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
always ( (id1 > num1value#) since [0:num3temporal#] (id2 == num2value#) -> eventually [num5temporala#:num5temporalb#] (always (id3 <= num4value#)) )
always ( once [num1temporala#:num1temporalb#] (not (id1 == id2)) -> not rise ((id3 == num2value#) until (not fall (id4 > num3value#))) )
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (eventually (not (id2 == id3))) )
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( not fall (id1 > num1value#) and id2 == id3 -> id4 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually (id2 >= num2value#) )
always ( id1 < num1value# -> id2 == num2value# or id3 >= num3value# )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#) or not rise (id2 == id3))
always ( once [0:num2temporal#] (id1 == num1value#) -> fall (always [0:num4temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( not (once (id1 == num1value#)) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( not rise (id1 == id2) -> always [0:num2temporal#] (id3 > num1value#) )
always ( historically (id1 == num1value#) -> always (eventually (id2 <= num2value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 < num1value# -> always [0:num3temporal#] (id2 < num2value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> not rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == num1value#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# or id2 > num2value# -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( id1 == num1value# or rise (id2 == num2value#) -> rise (id3 == id4) )
always ( fall (id1 == id2) -> once (id3 == num1value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (not (id2 >= num2value#)) until [0:num4temporal#] (id3 == num3value#) )
always ( fall (id1 == num1value#) -> not (eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == id2) -> not rise (always (id3 == id4)) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
eventually [0:num2temporal#] (rise (id1 >= num1value#) and id2 == id3)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( id1 > num1value# or not (id2 == id3) -> not (eventually [num3temporala#:num3temporalb#] (fall (id4 > num2valuea# and id4 < num2valueb#))) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 < num2value#) -> rise (id3 >= num3valuea# and id3 <= num3valueb#) or id4 <= num4value# )
always ( rise (id1 >= num1value#) -> id2 > num2value# or rise (id3 > num3value#) )
always ( (not (id1 > num1value#)) since [num2temporala#:num2temporalb#] (id2 == id3) -> eventually (id4 >= num3value#) )
eventually [0:num3temporal#] (id1 >= num1value# or id2 > num2value#)
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( not (id1 == num1value#) -> always [0:num2temporal#] (eventually (rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> eventually (always (id2 > num2value#)) )
always ( id1 <= num1value# and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 >= num1value# -> id2 == num2value# and rise (id3 > num3value#) )
always ( once [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#) -> not ((id2 == id3) until [num4temporala#:num4temporalb#] (id4 < num3value#)) )
always ( rise (id1 == num1value#) -> not (id2 == id3) and rise (id4 < num2value#) )
always ( id1 >= num1value# or id2 == num2value# -> id3 == id4 and fall (id5 > num3valuea# and id5 < num3valueb#) )
always [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 >= num1value#)
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 > num1value#) -> not fall (eventually [num3temporala#:num3temporalb#] (id2 < num2value#)) )
eventually (rise (id1 > num1value#) or id2 <= num2value#)
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> not (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> rise (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (not (id3 > num3value#)) )
always ( fall (id1 == id2) -> (id3 < num1value#) until [num3temporala#:num3temporalb#] (id4 <= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 < num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( not rise (id1 == id2) and id3 == id4 -> not (eventually [0:num1temporal#] (rise (id5 == id6))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == id2 -> id3 == id4 )
always (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 <= num1valueb#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> not rise ((id3 == id4) since [num4temporala#:num4temporalb#] (id5 == num3value#)) )
always ( id1 == num1value# or id2 == num2value# -> (id3 < num3value#) until [num5temporala#:num5temporalb#] (fall (id4 == num4value#)) )
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (rise (id2 > num2value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( id1 <= num1value# -> always (eventually [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> not fall (eventually [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 > num1value# -> rise (id2 <= num2value#) or (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num2temporal#] (id1 <= num1value#)
eventually (id1 >= num1value#)
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 <= num2value#) until (fall (id3 == id4)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
eventually [0:num3temporal#] (id1 == num1value# or fall (id2 > num2valuea# and id2 < num2valueb#))
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] (not (id1 < num1value#) or id2 >= num2value#)
always ( id1 <= num1value# and id2 == id3 -> id4 == id5 )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == id2) -> always [0:num2temporal#] (id3 >= num1value#) )
always ( id1 <= num1value# -> (id2 > num2valuea# and id2 < num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always (id1 == id2 and id3 == id4)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (fall (id2 == id3)) )
always [num3temporala#:num3temporalb#] (id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) )
always [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id2 > num3value#))) )
always ( id1 < num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 > num1value# or not (id2 <= num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 >= num3value#)) )
always ( id1 > num1value# -> eventually (rise (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> historically [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always (not fall (id1 >= num1value#))
always (id1 <= num1value#)
always ( not (once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( fall (id1 == num1value#) -> not (historically [num2temporala#:num2temporalb#] (not (id2 == id3))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 and (id5 >= num3valuea# and id5 <= num3valueb#) )
eventually [num2temporala#:num2temporalb#] (not fall (id1 > num1value#) and id2 == id3)
eventually (rise (id1 >= num1valuea# and id1 <= num1valueb#))
eventually [num2temporala#:num2temporalb#] (not rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 == num1value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( (id1 == num1value#) since [0:num3temporal#] (not (id2 <= num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and rise (id3 == num1value#))
always ( rise (id1 >= num1value#) -> not (id2 < num2value#) )
always ( not (id1 >= num1value#) and id2 >= num2value# -> always (id3 < num3value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 < num1value#)) )
always ( id1 == num1value# and not rise (id2 == id3) -> id4 <= num2value# )
always ( rise (id1 < num1value#) or fall (id2 == num2value#) -> not (eventually [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> rise (id2 >= num2value#) )
eventually (id1 > num1value# and not fall (id2 == id3))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
eventually [0:num3temporal#] (id1 == num1value# or id2 < num2value#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( not fall ((not (id1 > num1value#)) since (id2 > num2valuea# and id2 < num2valueb#)) -> always [0:num4temporal#] (eventually (not (id3 > num3valuea# and id3 < num3valueb#))) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( rise (id1 <= num1value#) -> rise (historically (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually (id1 == num1value#)
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always ( id1 <= num1value# and not (id2 == num2value#) -> always [0:num4temporal#] (id3 == num3value#) )
always ( id1 == id2 and not (id3 == num1value#) -> id4 > num2value# )
always ( (id1 <= num1value#) since (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 <= num1value#) )
always ( rise (id1 == num1value#) -> eventually (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (id2 >= num2value#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( (id1 < num1value#) since (not (id2 >= num2valuea# and id2 < num2valueb#)) -> always [0:num3temporal#] (id3 == id4) )
always ( rise (id1 == id2) -> id3 < num1value# and id4 > num2value# )
always ( fall (id1 == num1value#) or rise (id2 > num2value#) -> always [0:num3temporal#] (eventually (rise (id3 == id4))) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num4temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( id1 <= num1value# -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always [num2temporala#:num2temporalb#] (not (id1 >= num1value#))
always ( fall (id1 == num1value#) -> (id2 > num2value#) since [0:num4temporal#] (rise (id3 == num3value#)) )
eventually (not (id1 == num1value#))
always ( id1 == num1value# or rise (id2 == num2value#) -> historically [num4temporala#:num4temporalb#] (not (id3 == num3value#)) )
always ( rise (id1 >= num1value#) -> fall (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (rise (id2 == id3)) )
always (id1 < num1value#)
always ( fall (id1 == num1value#) -> id2 < num2value# or (id3 >= num3valuea# and id3 <= num3valueb#) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 > num1value#)
always ( rise (id1 > num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> fall ((id4 == id5) until (id6 == id7)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 == id2) -> not (eventually [num2temporala#:num2temporalb#] (id3 < num1value#)) )
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always [num3temporala#:num3temporalb#] (id1 > num1value# or id2 < num2value#)
always (id1 > num1value#)
always ( id1 > num1value# or rise (id2 >= num2value#) -> always [num4temporala#:num4temporalb#] (not (id3 < num3value#)) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not rise (once [0:num4temporal#] (rise (id3 >= num3value#))) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> eventually (always [0:num3temporal#] (not (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 == id4)) )
always ( fall (id1 == num1value#) -> rise (id2 == num2value#) or id3 > num3value# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 == num1value#)
always [0:num3temporal#] (id1 < num1value# and not rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) -> (id2 >= num2value#) until [0:num3temporal#] (not rise (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) or not (id2 == num2value#))
always ( id1 == num1value# and rise (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( fall (id1 == id2) -> rise (id3 >= num1value#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( id1 == num1value# -> fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> not ((id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
eventually [0:num3temporal#] (id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 <= num2value#)) )
always ( id1 == num1value# or id2 > num2value# -> id3 == num3value# and rise (id4 < num4value#) )
always ( id1 > num1value# and id2 > num2value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( id1 >= num1value# -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> not fall ((id2 < num2value#) until [0:num4temporal#] (id3 <= num3value#)) )
always (id1 <= num1value#)
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 > num2value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> not (once [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 == num1value# and id2 == id3 -> always (eventually [0:num3temporal#] (rise (id4 >= num2value#))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 > num2valuea# and id2 < num2valueb#))
eventually (id1 == num1value# and id2 < num2value#)
always ( id1 >= num1value# -> (not rise (id2 == id3)) since [0:num2temporal#] (id4 == id5) )
always ( rise (id1 <= num1value#) -> eventually (always [0:num3temporal#] (id2 > num2value#)) )
always ( id1 >= num1value# -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( once (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always [0:num2temporal#] (not (id1 == id2) or id3 == num1value#)
always ( fall (id1 == id2) -> once [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not (id2 == id3) )
always ( rise (id1 >= num1value#) -> historically (id2 >= num2value#) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) )
always ( id1 == num1value# and not (id2 <= num2value#) -> not fall (id3 == num3value#) )
always ( (id1 < num1value#) since [0:num3temporal#] (id2 == num2value#) -> (id3 >= num4valuea# and id3 <= num4valueb#) since (id4 > num5value#) )
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( rise (id1 >= num1value#) -> id2 >= num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num3temporal#] (not (id1 < num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (rise (id1 <= num1value#) or not (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 > num1value# and id2 == id3 -> (id4 > num2value#) until (fall (id5 >= num3valuea# and id5 <= num3valueb#)) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 < num1valueb# )
eventually [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> not (always [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (fall (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 < num1value#) or id2 > num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) or (id4 >= num4valuea# and id4 < num4valueb#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not ((id1 == num1value#) until (rise (id2 < num2value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num3temporal#] (rise (id1 > num1value#) or id2 == num2value#)
eventually [0:num2temporal#] (id1 == id2 or rise (id3 >= num1value#))
always [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1value# and not (id2 == id3) -> not (id4 <= num2value#) )
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (fall (id2 == num2value#))) )
always ( id1 >= num1value# and not (id2 == num2value#) -> fall (eventually (id3 >= num3value#)) )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( fall (id1 == id2) -> eventually (id3 > num1value#) )
always ( fall (id1 == id2) -> not (id3 < num1value#) )
eventually [0:num3temporal#] (id1 < num1value# or id2 == num2value#)
always ( rise (id1 <= num1value#) -> once (id2 <= num2value#) )
always ( rise (id1 >= num1value#) or id2 == id3 -> always (eventually [num2temporala#:num2temporalb#] (rise (id4 == id5))) )
always ( (id1 <= num1value#) until (rise (id2 < num2value#)) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( rise (id1 >= num1value#) -> not (id2 <= num2value#) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 <= num1value# -> not rise (always [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 > num1value#) )
always ( rise (id1 > num1value#) or id2 > num2value# -> id3 == num3value# and id4 <= num4value# )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( not fall (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always (id3 >= num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 <= num1value#) -> historically (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( not (once [0:num2temporal#] (id1 == num1value#)) -> (not (id2 == num3value#)) until (id3 < num4value#) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> not ((id3 == num3value#) until [num4temporala#:num4temporalb#] (rise (id4 == id5))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#) -> eventually (always [0:num4temporal#] (not (id3 > num3value#))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( not (eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( not fall (eventually [num2temporala#:num2temporalb#] (id1 == num1value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( rise (id1 < num1value#) -> (not (id2 > num2value#)) until (id3 == num3value#) )
always ( rise (id1 <= num1value#) and id2 > num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 < num1value# -> not (always (id2 == num2value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 == num1value#) -> id2 == num2value# and id3 == id4 )
eventually (id1 < num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always (id2 == num2value#)) )
always [0:num2temporal#] (id1 == id2 or id3 >= num1value#)
always ( historically [0:num2temporal#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 == num3value#))) )
always ( always [0:num1temporal#] (not (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always (id3 == id4) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not rise (eventually [0:num3temporal#] (not (id2 == num2value#))) )
always ( once [num2temporala#:num2temporalb#] (not (id1 < num1value#)) -> (id2 == id3) since [0:num3temporal#] (not fall (id4 == id5)) )
eventually [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 >= num2value#) and fall (id3 == num3value#) )
always ( rise (id1 == id2) -> always (eventually [num2temporala#:num2temporalb#] (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( not (id1 == id2) or id3 > num1value# -> id4 < num2value# )
always ( fall (id1 == id2) -> rise (eventually [0:num2temporal#] (id3 > num1value#)) )
always ( fall (historically [0:num2temporal#] (id1 >= num1value#)) -> fall ((id2 >= num3valuea# and id2 <= num3valueb#) until (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( once (rise (id1 < num1value#)) -> eventually (always [num2temporala#:num2temporalb#] (not fall (id2 == id3))) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) or id2 == id3 -> always [0:num2temporal#] (not (id4 == id5)) )
always ( id1 == id2 and id3 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 < num2value#)) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == id3))
always ( rise (id1 == id2) -> not (id3 < num1value#) )
eventually [0:num2temporal#] (not (id1 > num1value#))
always ( historically (not (id1 > num1valuea# and id1 < num1valueb#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually (id1 >= num1value# or id2 > num2value#)
always ( rise (id1 > num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
always ( id1 == num1value# or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 == id2 -> not fall (id3 == num1value#) or id4 == id5 )
always ( id1 == id2 -> not rise (always [num2temporala#:num2temporalb#] (id3 == num1value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) or rise (id2 < num2value#))
always ( id1 == id2 -> always [0:num2temporal#] (not fall (id3 == num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
eventually (id1 < num1value# and (id2 >= num2valuea# and id2 < num2valueb#))
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> fall (eventually [num2temporala#:num2temporalb#] (rise (id2 == id3))) )
always ( rise (id1 == num1value#) -> not (always [num3temporala#:num3temporalb#] (not fall (id2 == num2value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( rise (id1 < num1value#) -> historically (not (id2 <= num2value#)) )
always ( id1 > num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( not (id1 <= num1value#) -> id2 < num2value# )
eventually [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num2temporal#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (not (id2 > num2value#)) )
always (id1 == id2)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1value#) )
always [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( eventually [0:num1temporal#] (id1 == id2) -> always [0:num2temporal#] (id3 == id4) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 >= num1value#) or rise (id2 <= num2value#) -> id3 == id4 )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 == num1value#) -> eventually (fall (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( (id1 > num1value#) until [0:num2temporal#] (id2 == id3) -> always [num3temporala#:num3temporalb#] (eventually (rise (id4 == id5))) )
always ( eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
always ( rise (id1 >= num1value#) -> not rise ((id2 >= num2value#) since [0:num3temporal#] (id3 == id4)) )
always (id1 == num1value#)
always ( id1 < num1value# -> not (eventually [0:num3temporal#] (id2 > num2value#)) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (not (id2 >= num2value#))) )
always ( rise (id1 < num1value#) -> rise (id2 > num2value#) or id3 == num3value# )
always ( fall (id1 == id2) -> id3 >= num1value# )
always ( id1 >= num1value# or id2 == num2value# -> historically [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually (id1 == id2)
always [0:num3temporal#] (id1 > num1value# and not fall (id2 == num2value#))
always ( id1 >= num1value# and id2 == id3 -> not fall (always (id4 > num2valuea# and id4 < num2valueb#)) )
always ( rise (id1 > num1value#) -> not (id2 > num2valuea# and id2 < num2valueb#) )
eventually (fall (id1 == num1value#))
always ( id1 == num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 > num1value#) -> not (once (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (not (id3 > num1valuea# and id3 < num1valueb#)) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 <= num2value#)
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (id2 < num2value#)) )
always ( id1 > num1value# -> id2 < num2value# )
always ( rise (id1 == num1value#) -> rise (id2 > num2valuea# and id2 < num2valueb#) or id3 <= num3value# )
always ( rise (id1 <= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (id1 == id2)
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( (id1 > num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (not fall (id2 == num2value#)) -> (id3 > num4valuea# and id3 < num4valueb#) until [0:num6temporal#] (rise (id4 >= num5value#)) )
always ( id1 == num1value# and rise (id2 >= num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( id1 == id2 or not (id3 == num1value#) -> (id4 > num2valuea# and id4 < num2valueb#) and id5 == num3value# )
always ( id1 < num1value# and id2 <= num2value# -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
eventually [0:num3temporal#] (not (id1 < num1value#) and id2 >= num2value#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( not (id1 == id2) and id3 == num1value# -> id4 >= num2value# or id5 == id6 )
always ( (id1 == num1value#) since [num2temporala#:num2temporalb#] (id2 == id3) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (not (id4 <= num3value#))) )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> (id3 > num3value#) until [0:num5temporal#] (rise (id4 < num4value#)) )
always ( once [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> not (historically [0:num4temporal#] (id2 == num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> once [num3temporala#:num3temporalb#] (rise (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (not (id2 >= num3valuea# and id2 < num3valueb#)) )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( rise (id1 > num1value#) and id2 > num2value# -> eventually (always [num4temporala#:num4temporalb#] (not fall (id3 == num3value#))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( not (id1 == num1value#) or id2 <= num2value# -> not (id3 == num3value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 and rise (id3 > num1valuea# and id3 < num1valueb#) -> not fall (eventually [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always (id1 >= num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise (id1 == id2) -> not (always (id3 > num1value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num1temporal#] (not rise (id1 == id2))
eventually [0:num3temporal#] (id1 >= num1value# or id2 < num2value#)
always ( not (id1 == num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) since [num3temporala#:num3temporalb#] (id3 == id4) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id3 == id4))) )
always [0:num3temporal#] (id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( not (always (not (id1 > num1value#))) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( (not (id1 >= num1value#)) until [num2temporala#:num2temporalb#] (rise (id2 == id3)) -> once [0:num3temporal#] (rise (id4 == id5)) )
always ( rise (id1 >= num1value#) -> rise (id2 == num2value#) and rise (id3 > num3value#) )
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 >= num3value# )
always ( id1 == id2 -> (id3 == num1value#) until [0:num3temporal#] (rise (id4 > num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == num1value# and rise (id2 >= num2value#) -> always (eventually (id3 >= num3value#)) )
always ( fall (id1 == id2) -> once (id3 == num1value#) )
always ( not (id1 >= num1value#) or id2 == num2value# -> id3 > num3value# )
eventually [0:num3temporal#] (id1 >= num1value# or not (id2 >= num2valuea# and id2 < num2valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> not (eventually (id2 == num3value#)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually (not (id3 < num1value#))) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 == id2 -> id3 < num1value# and id4 >= num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 == num1value# -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (id3 >= num3value#) )
always ( id1 > num1value# -> not ((id2 == num2value#) until [0:num3temporal#] (id3 == id4)) )
always ( fall (id1 == id2) -> id3 < num1value# or id4 < num2value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( id1 == num1value# and id2 > num2value# -> once [0:num4temporal#] (rise (id3 >= num3value#)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> always [0:num4temporal#] (id3 <= num3value#) )
always ( (id1 == num1value#) until [0:num3temporal#] (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == id4))) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( rise (id1 == num1value#) -> fall (id2 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( not rise (once [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (not fall (id2 == num3value#))) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 >= num1value# or id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == num2value#)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until (rise (id3 < num3value#)) )
eventually [0:num2temporal#] (not (id1 <= num1value#))
always ( rise (id1 == num1value#) -> not fall (once [0:num2temporal#] (id2 == id3)) )
always ( id1 <= num1value# and rise (id2 <= num2value#) -> (id3 == id4) until [num3temporala#:num3temporalb#] (id5 == id6) )
always [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always (id1 == num1value# and id2 <= num2value#)
always ( id1 == id2 -> eventually [0:num1temporal#] (always [0:num2temporal#] (not (id3 == id4))) )
always (id1 == num1value# or id2 > num2value#)
always ( fall (id1 == id2) -> id3 == num1value# and id4 == id5 )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually [0:num3temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 == num2value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) -> not (always [num5temporala#:num5temporalb#] (id3 >= num4value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 and id3 < num1value# -> id4 < num2value# )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not (id2 > num2value#))) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [num3temporala#:num3temporalb#] (id2 > num2value#) -> always [0:num5temporal#] (id3 >= num4value#) )
always ( id1 < num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( id1 == num1value# and id2 == id3 -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 < num2valueb#))) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value# -> (id3 == num3value#) until [0:num5temporal#] (id4 > num4value#) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 > num2value#)
eventually (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( once [0:num2temporal#] (rise (id1 > num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 > num3value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 == num1value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( id1 <= num1value# -> id2 == num2value# )
always ( (id1 > num1value#) since (id2 < num2value#) -> always [0:num4temporal#] (not fall (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 >= num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
eventually [0:num3temporal#] (id1 < num1value# and id2 < num2value#)
always ( rise (id1 < num1value#) -> not ((id2 >= num2value#) until [0:num3temporal#] (id3 == id4)) )
always [num3temporala#:num3temporalb#] (not (id1 < num1value#) and id2 < num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
eventually [0:num3temporal#] (id1 < num1value# or id2 <= num2value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (id2 > num2value#) )
always ( rise (id1 >= num1value#) and id2 > num2value# -> eventually [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 == num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (not (id3 == id4))) )
always ( (id1 >= num1valuea# and id1 < num1valueb#) until [num3temporala#:num3temporalb#] (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (rise (id3 == id4)) )
always [0:num2temporal#] (id1 < num1value#)
always (id1 == id2 and id3 == num1value#)
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 > num1value#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
always (not (id1 >= num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) since (id3 <= num3value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1value#) )
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( id1 == id2 and id3 == num1value# -> id4 > num2value# )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 < num2value#)
always ( id1 > num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value# or id2 == id3)
always ( rise (id1 > num1value#) -> fall ((id2 >= num2value#) until [0:num4temporal#] (rise (id3 == num3value#))) )
always ( historically [num2temporala#:num2temporalb#] (id1 < num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( id1 == id2 or id3 > num1value# -> id4 >= num2valuea# and id4 <= num2valueb# )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
eventually [0:num2temporal#] (id1 < num1value#)
always ( id1 >= num1value# and id2 <= num2value# -> (id3 == num3value#) until [0:num4temporal#] (fall (id4 == id5)) )
always ( once [0:num2temporal#] (not (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( rise (id1 < num1value#) -> id2 == id3 and id4 == id5 )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> always (eventually [num4temporala#:num4temporalb#] (id3 < num3value#)) )
always ( (id1 == id2) since [num2temporala#:num2temporalb#] (rise (id3 > num1value#)) -> eventually (always (id4 == id5)) )
always ( rise (id1 == id2) -> id3 > num1value# )
always (id1 == id2 and id3 == num1value#)
always ( not fall (id1 > num1value#) and id2 == num2value# -> eventually (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 < num1value#) -> id2 >= num2value# and not (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( id1 > num1value# -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 >= num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> (not (id3 <= num3value#)) until [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> (id2 == num3value#) until [0:num5temporal#] (id3 > num4value#) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#) -> not rise ((id2 == num3value#) until [0:num5temporal#] (not rise (id3 >= num4valuea# and id3 <= num4valueb#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 > num3value#))) )
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 == num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> (not rise (id3 > num3valuea# and id3 < num3valueb#)) since (id4 == id5) )
always ( fall (id1 == id2) -> not fall (always [0:num2temporal#] (id3 <= num1value#)) )
always ( id1 == id2 -> id3 < num1value# )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> not (once [0:num4temporal#] (rise (id2 >= num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 < num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always (id1 >= num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not fall (once [num2temporala#:num2temporalb#] (id1 < num1value#)) -> eventually [num3temporala#:num3temporalb#] (always (id2 == id3)) )
always [0:num2temporal#] (not (id1 > num1value#))
always ( not (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always [0:num3temporal#] (id1 > num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( historically (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always [0:num2temporal#] (not (id1 > num1value#))
always ( historically (not fall (id1 == num1value#)) -> not rise (once (id2 == id3)) )
always ( rise (id1 == num1value#) -> fall (eventually [num3temporala#:num3temporalb#] (not (id2 >= num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not ((id2 > num2valuea# and id2 < num2valueb#) since (rise (id3 > num3value#))) )
always ( rise (id1 < num1value#) -> id2 < num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always (id1 == id2)
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
eventually ((id1 > num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
always ( historically (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> (id2 == id3) until [0:num3temporal#] (id4 >= num2value#) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( once (not (id1 == id2)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 > num1value#)) )
always ( (id1 >= num1value#) since [0:num3temporal#] (rise (id2 > num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not rise (id3 == id4))) )
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and id3 == id4 )
always ( rise (id1 == num1value#) -> not rise (id2 == id3) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( not fall (id1 == num1value#) -> id2 < num2value# )
always ( always (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (historically (id1 == num1value#)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( id1 > num1value# and not fall (id2 >= num2value#) -> (id3 >= num3value#) until [0:num5temporal#] (rise (id4 > num4value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( id1 == num1value# or id2 >= num2value# -> id3 < num3value# )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( id1 > num1value# and rise (id2 > num2value#) -> id3 <= num3value# or rise (id4 > num4value#) )
eventually [0:num2temporal#] (not (id1 == num1value#))
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (always (id3 == id4)) )
always ( id1 == num1value# -> always [0:num3temporal#] (id2 >= num2value#) )
always ( id1 == id2 -> id3 <= num1value# and id4 == id5 )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always (id3 >= num1value#)) )
eventually [0:num3temporal#] (not (id1 >= num1valuea# and id1 < num1valueb#) and id2 > num2value#)
always ( id1 > num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3valuea# and id3 <= num3valueb#) until (id4 >= num4value#) )
always ( id1 == id2 and id3 > num1value# -> id4 > num2value# or id5 >= num3value# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# or not fall (id3 == num3value#) )
eventually (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 <= num1value#) -> (id2 > num2value#) since (rise (id3 == num3value#)) )
always [num3temporala#:num3temporalb#] (id1 < num1value# or id2 == num2value#)
always ( rise (id1 > num1value#) -> always (id2 >= num2value#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1value#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( id1 == id2 -> id3 == id4 )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> not fall (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value# -> (id3 == num3value#) until [0:num4temporal#] (id4 == id5) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 and id3 == num1value# -> (id4 > num2valuea# and id4 < num2valueb#) until (id5 == id6) )
always ( id1 < num1value# -> id2 == num2value# )
always ( rise (id1 >= num1value#) -> id2 == num2value# )
always ( rise (id1 > num1value#) -> id2 < num2value# )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( fall (id1 == id2) -> id3 == id4 )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and not fall (id2 == num2value#))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually (always (id2 <= num2value#)) )
always ( id1 <= num1value# -> historically (id2 > num2value#) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [0:num2temporal#] (rise (id1 < num1value#))
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2value#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 > num4valuea# and id3 < num4valueb#)) )
always ( id1 == num1value# or not rise (id2 > num2valuea# and id2 < num2valueb#) -> fall (id3 == num3value#) )
always ( historically [0:num2temporal#] (id1 >= num1value#) -> not (always [num4temporala#:num4temporalb#] (id2 == num3value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( not (id1 == num1value#) and id2 <= num2value# -> (id3 == num3value#) until [0:num5temporal#] (id4 > num4value#) )
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( eventually (not (id1 == num1value#)) -> (not (id2 > num2value#)) until [0:num3temporal#] (id3 == id4) )
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> rise (id3 < num3value#) )
always [0:num2temporal#] (id1 == id2 and id3 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (id2 == id3) )
eventually (not (id1 == num1value#))
always ( id1 == id2 or rise (id3 > num1valuea# and id3 < num1valueb#) -> (id4 == num2value#) until (id5 >= num3valuea# and id5 <= num3valueb#) )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
eventually (id1 < num1value#)
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 <= num1value# or id2 == id3 -> not (always [num3temporala#:num3temporalb#] (not fall (id4 == num2value#))) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( id1 >= num1value# or not (id2 == id3) -> id4 <= num2value# )
always ( fall (id1 == num1value#) -> always (id2 == id3) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (not (id1 == id2))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) since [0:num2temporal#] (not (id2 == id3)) -> always (id4 > num3value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 >= num2value#) -> always [0:num4temporal#] (eventually (id3 > num3value#)) )
always ( id1 == id2 -> eventually [0:num1temporal#] (always (id3 == id4)) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [0:num3temporal#] (id3 == id4) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (not (id2 == num2value#)) )
eventually [0:num3temporal#] (not (id1 == num1value#) or id2 == num2value#)
always ( rise (id1 >= num1value#) -> historically (id2 <= num2value#) )
always ( fall (id1 == id2) -> id3 == num1value# )
always ( id1 == id2 -> not ((id3 >= num1value#) until [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( eventually [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 > num2value#)) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 < num2value#))
always ( fall (id1 == num1value#) and not (id2 > num2valuea# and id2 <= num2valueb#) -> id3 < num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) since (not (id2 == num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> eventually (always [0:num4temporal#] (id3 == num3value#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> not rise ((id2 > num3valuea# and id2 < num3valueb#) until (id3 == num4value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( once (rise (id1 < num1value#)) -> eventually (always [0:num3temporal#] (not (id2 == num2value#))) )
always ( not (id1 >= num1value#) or id2 <= num2value# -> not (id3 == num3value#) and (id4 > num4valuea# and id4 < num4valueb#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (once (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num3temporal#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always ( id1 == id2 -> id3 > num1valuea# and id3 < num1valueb# )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
always ( fall (id1 == num1value#) or id2 >= num2value# -> id3 >= num3value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always [0:num1temporal#] (id1 == id2 or id3 == id4)
eventually [0:num2temporal#] (id1 == id2 or id3 < num1value#)
always ( rise (id1 <= num1value#) -> historically (id2 == id3) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 < num2value#) )
always ( id1 == id2 or not (id3 == id4) -> id5 <= num1value# )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1value#)) )
always ( fall (once (rise (id1 > num1value#))) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == num2value# )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( not (id1 >= num1value#) and id2 == id3 -> id4 == num2value# )
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 < num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 > num1value#) and id2 > num2value# -> id3 == id4 and id5 == num3value# )
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) and id2 == id3 -> not fall (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( not fall ((id1 <= num1value#) since [0:num3temporal#] (id2 < num2value#)) -> eventually [num5temporala#:num5temporalb#] (id3 >= num4value#) )
always (id1 > num1valuea# and id1 < num1valueb#)
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> once (rise (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( (not fall (id1 == id2)) since [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 < num1valueb#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id4 == num3value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually (fall (id2 == num2value#))) )
eventually (id1 == num1value# and id2 == id3)
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( id1 <= num1value# or id2 <= num2value# -> id3 == id4 )
eventually [num2temporala#:num2temporalb#] (fall (id1 >= num1valuea# and id1 < num1valueb#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
eventually (fall (id1 == num1value#) or id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 or id4 == num2value# )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( id1 == id2 -> id3 == num1value# )
always ( fall (id1 == id2) -> (id3 >= num1value#) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
eventually (not (id1 == id2) or id3 < num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( not fall (id1 == num1value#) and id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( eventually [0:num2temporal#] (id1 == num1value#) -> once (id2 == num3value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not fall (id3 == num1value#))) )
always ( id1 == id2 and rise (id3 >= num1value#) -> id4 <= num2value# or not (id5 > num3valuea# and id5 < num3valueb#) )
always [0:num1temporal#] (not (id1 == id2))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> not fall (id3 == num3value#) )
always ( (id1 == num1value#) since [0:num2temporal#] (fall (id2 == id3)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id4 == num3value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always [0:num2temporal#] (not (id1 == id2) or id3 > num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> id2 == id3 )
eventually [0:num3temporal#] (id1 == num1value# and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 == id2) -> id3 < num1value# and rise (id4 > num2valuea# and id4 < num2valueb#) )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) since [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( fall (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (fall (id4 > num2valuea# and id4 < num2valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == num2value#) or fall (id3 >= num3valuea# and id3 <= num3valueb#) )
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 < num2value#)
always (id1 <= num1value# or id2 == id3)
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( not (id1 < num1value#) and not rise (id2 == num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 > num3valuea# and id3 <= num3valueb#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> not (id2 == num2value#) and rise (id3 > num3value#) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == id3) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( not fall (historically [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)) -> (id2 == id3) until [0:num4temporal#] (rise (id4 >= num3value#)) )
eventually (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( fall (id1 == id2) -> historically [num2temporala#:num2temporalb#] (id3 < num1value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
always [0:num1temporal#] (id1 == id2)
always ( once (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2value#))) )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( once [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 >= num3valuea# and id2 <= num3valueb#))) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> eventually (id2 == num2value#) )
always ( id1 > num1value# and not (id2 == id3) -> id4 <= num2value# )
always [0:num1temporal#] (not rise (id1 == id2))
always [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == id3))
always [num1temporala#:num1temporalb#] (id1 == id2)
eventually (rise (id1 == num1value#))
always ( id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (id4 >= num2value#) )
always ( id1 == id2 and (id3 > num1valuea# and id3 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id4 >= num2value#) )
always ( fall (id1 == id2) -> (id3 <= num1value#) until (id4 > num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( id1 == id2 -> not (id3 < num1value#) and id4 == id5 )
always ( id1 == num1value# and rise (id2 < num2value#) -> (id3 == id4) until [num3temporala#:num3temporalb#] (not fall (id5 == id6)) )
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( once (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always ( rise (id1 < num1value#) -> (id2 < num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) or rise (id3 > num3value#) )
always ( fall (id1 == num1value#) -> historically [num2temporala#:num2temporalb#] (not fall (id2 == id3)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 > num2value#) -> eventually (always [num4temporala#:num4temporalb#] (id3 == num3value#)) )
always ( id1 == num1value# and id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id3 > num3valuea# and id3 <= num3valueb#))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 == num2value#) -> (id3 >= num3value#) since [num5temporala#:num5temporalb#] (id4 == num4value#) )
always ( rise (id1 == id2) -> (id3 >= num1value#) until [0:num2temporal#] (id4 == id5) )
always (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 < num1value# -> rise (id2 == id3) )
always ( rise (id1 == num1value#) -> rise (id2 <= num2value#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 > num1value# -> id2 == id3 )
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( not fall (id1 >= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( once (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( (id1 > num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (id2 <= num2value#) -> (id3 > num4valuea# and id3 < num4valueb#) until [0:num6temporal#] (id4 > num5value#) )
always [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always ( id1 == id2 or id3 == id4 -> id5 < num1value# )
always [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1value# and id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 == num2value#))) )
always ( id1 == num1value# and id2 >= num2value# -> not (id3 <= num3value#) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( fall (id1 == id2) -> rise (id3 > num1value#) )
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually [0:num4temporal#] (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 <= num3value#))) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( id1 == num1value# and id2 == id3 -> id4 == id5 or (id6 > num2valuea# and id6 < num2valueb#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( not (id1 == id2) -> not (id3 < num1value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 > num1value#) -> not ((id2 == num2value#) until (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
eventually (rise (id1 == num1value#) and rise (id2 <= num2value#))
eventually [num2temporala#:num2temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always (id1 == num1value#)
eventually [0:num3temporal#] (not (id1 <= num1value#) and id2 > num2value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> once [0:num3temporal#] (id2 <= num2value#) )
always ( historically (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( fall (id1 == id2) -> rise (eventually (id3 > num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always [0:num3temporal#] (id1 == num1value# and id2 >= num2value#)
always ( id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until [0:num4temporal#] (not (id3 < num3value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 >= num2value#) until [0:num4temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( (id1 == num1value#) since [num2temporala#:num2temporalb#] (not rise (id2 == id3)) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id4 < num3value#))) )
eventually (id1 <= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 < num1value#) since [0:num3temporal#] (id2 >= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id4 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not ((id2 == id3) until (not (id4 >= num2value#))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (rise (id2 == num2value#))) )
always ( id1 == id2 or not (id3 > num1valuea# and id3 < num1valueb#) -> id4 == id5 )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 <= num3value#)) )
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#) -> not (eventually (id2 > num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always [0:num2temporal#] (id1 > num1value#)
always ( not (once [0:num2temporal#] (rise (id1 < num1value#))) -> not ((not (id2 == num3value#)) until [num5temporala#:num5temporalb#] (id3 >= num4value#)) )
always ( (id1 > num1value#) since (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( id1 >= num1value# and rise (id2 <= num2value#) -> once [0:num4temporal#] (fall (id3 == num3value#)) )
always ( id1 == id2 -> id3 == num1value# )
always ( id1 <= num1value# -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( rise (id1 == id2) -> eventually [num1temporala#:num1temporalb#] (fall (id3 == id4)) )
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 > num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> not (id3 > num3value#) )
always ( (id1 == num1value#) until [0:num3temporal#] (id2 >= num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (not (id3 == num4value#))) )
eventually [0:num2temporal#] (not (id1 >= num1value#) and id2 == id3)
always ( id1 < num1value# -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 <= num1value# and rise (id2 > num2value#) -> id3 <= num3value# )
always ( rise (id1 > num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (id3 >= num3value#) or not (id4 > num4value#) )
always ( id1 < num1value# and not (id2 > num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id3 >= num3value#))) )
always ( id1 == id2 -> eventually [0:num2temporal#] (rise (id3 >= num1valuea# and id3 < num1valueb#)) )
always (not (id1 == id2) or not rise (id3 == num1value#))
always ( id1 == num1value# or fall (id2 == num2value#) -> always [0:num4temporal#] (id3 == num3value#) )
always ( id1 == num1value# or not (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( rise (id1 > num1value#) or rise (id2 < num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( id1 >= num1value# -> id2 >= num2value# )
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 <= num1value# and id2 == id3 -> id4 < num2value# )
always ( id1 >= num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> id3 == id4 and not rise (id5 > num3value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually (rise (id1 == num1value#))
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 == id2) -> eventually (not (id3 <= num1value#)) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( fall (id1 == num1value#) -> fall ((id2 >= num2value#) until [num4temporala#:num4temporalb#] (rise (id3 > num3value#))) )
eventually [0:num2temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 < num1value# and rise (id2 <= num2value#) -> id3 == id4 )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num3value#) until [0:num5temporal#] (id3 > num4value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2valuea# and id4 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 > num2value# -> always (id3 == num3value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> always [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 > num1value# and rise (id2 < num2value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id3 == id4)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or rise (id3 >= num1value#))
always ( rise (id1 <= num1value#) -> rise (id2 >= num2value#) and fall (id3 == num3value#) )
always ( id1 == num1value# or id2 == num2value# -> not ((id3 == id4) until (not (id5 == num3value#))) )
always [num3temporala#:num3temporalb#] (not (id1 >= num1value#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == id2) -> not (eventually (fall (id3 >= num1valuea# and id3 <= num1valueb#))) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( id1 >= num1value# and id2 < num2value# -> id3 > num3value# and id4 <= num4value# )
always ( not (id1 >= num1value#) or id2 == id3 -> always [0:num3temporal#] (id4 <= num2value#) )
always ( id1 == num1value# -> id2 >= num2value# )
always ( once [0:num2temporal#] (not rise (id1 >= num1value#)) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id2 <= num3value#)) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 == num1value#))
always ( not (historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (not (id2 == num3value#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not (id2 == id3) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and id2 < num2value#)
always ( rise (id1 <= num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 > num2value# )
always [0:num2temporal#] (id1 == num1value#)
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( (not (id1 == id2)) since [0:num2temporal#] (id3 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id4 < num3value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value# -> eventually (id3 > num3value#) )
always ( (id1 <= num1value#) since [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) -> (not rise (id3 >= num4value#)) until [0:num6temporal#] (rise (id4 < num5value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 and id3 < num1value#)
always ( id1 == num1value# or id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
always ( not (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always [0:num3temporal#] (not (id1 == num1value#) and id2 > num2value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always [0:num2temporal#] (id1 == num1value# and id2 == id3)
always [0:num2temporal#] (not (id1 >= num1value#))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 < num2valueb#)) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 <= num2value#)
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( id1 >= num1value# -> id2 == id3 )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 == num3value# )
always ( rise (id1 < num1value#) -> not (eventually [0:num3temporal#] (not (id2 == num2value#))) )
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) or not (id2 == num2value#))
always [0:num1temporal#] (id1 == id2)
always ( id1 == id2 and id3 <= num1value# -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (fall (id4 == id5))) )
always ( id1 == id2 or fall (id3 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id4 == num2value#))) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 > num2valuea# and id2 < num2valueb#))
eventually (id1 == num1value#)
always [0:num3temporal#] (id1 == num1value# and id2 < num2value#)
always ( (not (id1 < num1value#)) since (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( (id1 >= num1value#) since [num3temporala#:num3temporalb#] (fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually [0:num5temporal#] (always [num6temporala#:num6temporalb#] (id3 >= num4value#)) )
always ( (not (id1 > num1value#)) since (id2 == id3) -> (not (id4 > num2valuea# and id4 < num2valueb#)) since (rise (id5 == num3value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> (id2 <= num2value#) until (id3 > num3value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 <= num3value# )
always ( rise (id1 == num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always [0:num1temporal#] (id1 == id2)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value# -> not fall (id3 > num3value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> not rise ((not fall (id4 == num2value#)) until [num4temporala#:num4temporalb#] (id5 < num3value#)) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and rise (id2 == num2value#))
always ( id1 >= num1value# and rise (id2 == num2value#) -> always [0:num4temporal#] (eventually (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [0:num2temporal#] (fall (id1 == num1value#))
eventually [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 < num1value#) -> not (id2 == id3) )
always ( id1 < num1value# or id2 >= num2value# -> id3 == id4 or id5 == id6 )
always ( rise (id1 >= num1value#) -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1valuea# and id3 < num1valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> id2 < num2value# )
always ( fall (id1 == id2) -> once (id3 >= num1valuea# and id3 < num1valueb#) )
always ( rise (id1 >= num1value#) -> (id2 == num2value#) until [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> not (id3 == id4) )
always [0:num2temporal#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( fall (id1 == id2) -> not (eventually (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 == id2) -> id3 == id4 and id5 == num1value# )
eventually [0:num1temporal#] (fall (id1 == id2))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 >= num1value# -> id2 < num2value# or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 == id2 or rise (id3 == num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id4 == id5)) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( rise (id1 <= num1value#) -> fall ((id2 <= num2value#) since [0:num3temporal#] (id3 == id4)) )
always ( fall (id1 == id2) -> (id3 > num1value#) since [0:num3temporal#] (not fall (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
eventually (id1 == id2 and id3 < num1value#)
always (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 == num1value#)
eventually (id1 > num1value#)
always ( not (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 < num1value#) or id2 >= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
eventually [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always (id1 == id2)
always ( not ((id1 >= num1valuea# and id1 <= num1valueb#) since [0:num3temporal#] (rise (id2 < num2value#))) -> (id3 >= num4value#) since [0:num6temporal#] (fall (id4 >= num5valuea# and id4 <= num5valueb#)) )
always ( rise (id1 < num1value#) -> fall (eventually [0:num3temporal#] (id2 >= num2value#)) )
always ( (not fall (id1 >= num1valuea# and id1 <= num1valueb#)) since [0:num3temporal#] (id2 < num2value#) -> eventually (always [0:num5temporal#] (id3 < num4value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value# -> id3 == id4 )
always ( not (id1 < num1value#) or fall (id2 == num2value#) -> id3 == num3value# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( id1 == id2 -> always [num2temporala#:num2temporalb#] (eventually (not (id3 >= num1valuea# and id3 <= num1valueb#))) )
always ( rise (id1 == num1value#) -> not ((id2 >= num2value#) until (id3 > num3value#)) )
always ( id1 == id2 -> always [0:num1temporal#] (id3 == id4) )
always ( rise (id1 >= num1value#) -> not fall (id2 == num2value#) )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> rise (id2 >= num2valuea# and id2 < num2valueb#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> not (id3 == id4) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 >= num1value#) -> not (id2 == id3) )
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always [0:num3temporal#] (id1 <= num1value# and id2 >= num2value#)
always ( id1 <= num1value# -> eventually (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 < num1value# -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( id1 > num1value# -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( not ((not (id1 == num1value#)) since (id2 > num2valuea# and id2 < num2valueb#)) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (not (id3 > num3value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 == num2value#) -> not rise ((id3 == num3value#) since [num5temporala#:num5temporalb#] (id4 > num4value#)) )
always ( once [num2temporala#:num2temporalb#] (id1 > num1value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id2 == num3value#))) )
eventually (id1 <= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) -> not fall (id2 == num2value#) )
always ( id1 == num1value# and id2 < num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id3 == id4))) )
always [0:num2temporal#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always (not (id1 > num1valuea# and id1 < num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 == id2 or id3 < num1value#)
always ( (id1 < num1value#) until [num3temporala#:num3temporalb#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 <= num4value#)) )
always [0:num3temporal#] (id1 >= num1value# and id2 <= num2value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> rise (id2 <= num2value#) and rise (id3 <= num3value#) )
eventually [0:num1temporal#] (rise (id1 == id2))
always ( rise (id1 == num1value#) -> (id2 > num2value#) since [num4temporala#:num4temporalb#] (rise (id3 == num3value#)) )
always ( id1 >= num1value# -> (id2 == id3) until [0:num3temporal#] (id4 == num2value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> eventually (id2 == id3) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
eventually (id1 <= num1value# and rise (id2 < num2value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 <= num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( not (id1 <= num1value#) and id2 <= num2value# -> always [num4temporala#:num4temporalb#] (eventually (rise (id3 >= num3value#))) )
always (id1 < num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> once [0:num3temporal#] (id3 == id4) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 >= num1value#)
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (not (id1 == id2) and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 >= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (not rise (id2 == id3)) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( (id1 >= num1valuea# and id1 < num1valueb#) and id2 == id3 -> id4 == num2value# )
always ( (id1 == id2) since (not fall (id3 > num1valuea# and id3 < num1valueb#)) -> eventually [0:num3temporal#] (id4 <= num2value#) )
always ( id1 == num1value# or rise (id2 <= num2value#) -> not ((id3 == num3value#) until [0:num4temporal#] (not fall (id4 == id5))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == id3 )
always ( once (id1 == id2) -> (id3 <= num1value#) until [0:num3temporal#] (not (id4 > num2valuea# and id4 < num2valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( (id1 == id2) since [0:num1temporal#] (rise (id3 == id4)) -> eventually [0:num2temporal#] (fall (id5 == id6)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> fall (eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> not (historically [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == id2 and rise (id3 >= num1valuea# and id3 <= num1valueb#) -> id4 == num2value# )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 == id2 or fall (id3 > num1valuea# and id3 < num1valueb#) -> not (id4 == num2value#) )
always ( not fall (once (id1 > num1valuea# and id1 < num1valueb#)) -> eventually (id2 > num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not rise (id2 == id3) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( not (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (not fall (id3 == num1value#))) )
eventually (id1 == id2)
always ( id1 == id2 -> (id3 > num1valuea# and id3 < num1valueb#) and id4 <= num2value# )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always (id1 == id2)
always ( rise (id1 < num1value#) -> not (id2 == id3) )
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 >= num1value# and id2 == id3)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> once (id2 >= num2value#) )
eventually [0:num1temporal#] (id1 == id2)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always ( id1 > num1value# and rise (id2 >= num2value#) -> id3 >= num3valuea# and id3 < num3valueb# )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 == num3value# )
always [0:num2temporal#] (not (id1 == num1value#))
always ( rise (id1 < num1value#) -> rise (id2 == num2value#) )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 == id2) -> not (id3 >= num1valuea# and id3 <= num1valueb#) or id4 == num2value# )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value#)
always ( id1 == id2 -> historically [0:num2temporal#] (not (id3 > num1valuea# and id3 < num1valueb#)) )
always ( id1 >= num1value# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 > num2value#)
always ( not rise (id1 >= num1value#) -> not (always [0:num3temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually (rise (id2 == num2value#)) )
always ( id1 == id2 and rise (id3 <= num1value#) -> rise (id4 == id5) )
always ( rise (id1 == num1value#) -> rise (id2 == num2value#) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
eventually [0:num3temporal#] (not (id1 == num1value#) and id2 < num2value#)
always ( rise (id1 == id2) -> eventually (id3 >= num1value#) )
always ( id1 == id2 -> eventually (always [num2temporala#:num2temporalb#] (id3 >= num1value#)) )
always ( rise (id1 >= num1value#) -> historically [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 == num1value#) -> always (id2 < num2value#) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
eventually [0:num3temporal#] (id1 <= num1value# and rise (id2 < num2value#))
always ( not (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always (not fall (id1 == num1value#) and id2 >= num2value#)
always ( not (historically (id1 > num1value#)) -> (id2 <= num2value#) until (rise (id3 >= num3value#)) )
always [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 == num2value#) )
always ( (id1 == num1value#) since [num3temporala#:num3temporalb#] (id2 == num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 < num4value#)) )
always ( rise (id1 < num1value#) -> id2 == id3 )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always (id1 < num1value# or id2 <= num2value#)
always ( rise (id1 < num1value#) or id2 == num2value# -> eventually (always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always [0:num2temporal#] (not (id1 == num1value#))
always ( (id1 > num1valuea# and id1 < num1valueb#) since (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
eventually [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 >= num1valuea# and id1 < num1valueb# -> not (id2 == num2value#) )
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) )
always ( id1 <= num1value# -> id2 == id3 )
always ( id1 == num1value# and id2 <= num2value# -> id3 == num3value# )
always ( rise (id1 <= num1value#) -> not (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
eventually [num3temporala#:num3temporalb#] (not (id1 == num1value#) and id2 < num2value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> rise (id2 > num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and (id2 > num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# -> eventually (always [0:num3temporal#] (id2 >= num2value#)) )
eventually [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 >= num1value# -> not (id2 < num2value#) )
always ( not (id1 == id2) and fall (id3 == num1value#) -> rise (id4 >= num2value#) or id5 == id6 )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 > num2value#))
always ( id1 == num1value# -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
eventually [0:num3temporal#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 >= num2value#)
eventually (id1 <= num1value# and id2 == id3)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == num1value#) -> historically [0:num3temporal#] (id2 == num2value#) )
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( fall (id1 == id2) -> eventually (rise (id3 > num1value#)) )
eventually (id1 < num1value# or not fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [0:num2temporal#] (id2 == id3) )
always ( once (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (id3 == num1value#) )
always ( rise (id1 >= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [0:num4temporal#] (id3 <= num3value#)) )
always ( id1 <= num1value# or rise (id2 == num2value#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> always (eventually (rise (id3 >= num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> rise (id2 <= num2value#) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> (id3 > num3valuea# and id3 < num3valueb#) until (id4 > num4value#) )
always (id1 == id2)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> not rise (historically [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( id1 == id2 -> id3 < num1value# )
always ( id1 == num1value# and rise (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id3 == num3value#))) )
always ( rise (id1 == id2) -> id3 == id4 )
always [0:num1temporal#] (id1 == id2)
always ( id1 <= num1value# -> id2 > num2value# )
always ( id1 >= num1value# or id2 == id3 -> always [num3temporala#:num3temporalb#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always [num3temporala#:num3temporalb#] (id1 > num1value# and id2 < num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == num2value#))) )
always ( id1 <= num1value# or rise (id2 > num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always [num3temporala#:num3temporalb#] (id1 >= num1value# or id2 > num2value#)
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( not (id1 == num1value#) or id2 >= num2value# -> id3 <= num3value# or id4 == num4value# )
always ( rise (id1 == num1value#) -> not (eventually (id2 == num2value#)) )
always ( not fall (id1 == num1value#) -> id2 == id3 )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or not (id3 < num1value#))
always ( id1 < num1value# or id2 <= num2value# -> not (eventually [0:num4temporal#] (id3 == num3value#)) )
always ( rise (id1 == num1value#) or id2 == id3 -> not (id4 == num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 <= num1valueb# )
always ( rise (id1 == num1value#) -> not ((id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( historically (id1 <= num1value#) -> fall ((id2 == id3) since [num3temporala#:num3temporalb#] (rise (id4 < num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 < num1value# -> id2 > num2valuea# and id2 <= num2valueb# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (always [0:num3temporal#] (id2 > num2value#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not (id2 == num2value#)) until [0:num4temporal#] (rise (id3 == num3value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually ((id1 >= num1valuea# and id1 < num1valueb#) and id2 <= num2value#)
always ( not (id1 < num1value#) or id2 == num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (eventually [0:num2temporal#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
eventually (id1 == id2)
always [num2temporala#:num2temporalb#] (id1 == id2 or not fall (id3 == num1value#))
always (id1 == num1value#)
always ( id1 == id2 -> id3 >= num1valuea# and id3 <= num1valueb# )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2value#))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( id1 < num1value# and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) or fall (id2 >= num2valuea# and id2 < num2valueb#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 <= num3value#)) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 >= num3value#) until [num4temporala#:num4temporalb#] (id3 == id4) )
always (id1 > num1value# or id2 > num2value#)
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and not fall (id2 == num2value#))
eventually ((id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 == num2value#))
always ( id1 >= num1value# and rise (id2 >= num2value#) -> id3 == id4 )
always ( fall (id1 == id2) -> (id3 == id4) until [0:num1temporal#] (id5 == id6) )
always ( id1 == id2 and id3 == id4 -> once (id5 >= num1value#) )
eventually (id1 == id2 and id3 < num1value#)
always ( once [num2temporala#:num2temporalb#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always ( id1 >= num1value# -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( once [0:num2temporal#] (id1 <= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (not (id2 == num3value#))) )
always ( fall (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 >= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (rise (id3 <= num3value#)) )
always ( id1 == id2 or id3 < num1value# -> eventually [num3temporala#:num3temporalb#] (always (id4 > num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [0:num2temporal#] (not (id1 > num1value#))
always [0:num3temporal#] (id1 >= num1value# and id2 >= num2value#)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 == num1value# -> id2 == id3 )
always ( rise (id1 < num1value#) -> not ((not (id2 == id3)) until (rise (id4 == id5))) )
always ( rise (id1 < num1value#) -> (not (id2 == num2value#)) since (id3 > num3value#) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [num3temporala#:num3temporalb#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always (id1 == num1value# or id2 == num2value#)
always ( id1 == id2 and id3 <= num1value# -> always (eventually (id4 > num2value#)) )
eventually (id1 == num1value# and rise (id2 >= num2value#))
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value# and not rise (id2 == id3))
always ( id1 == id2 and id3 <= num1value# -> (id4 >= num2valuea# and id4 <= num2valueb#) or id5 == id6 )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and rise (id2 == num2value#))
always ( rise (id1 > num1value#) -> id2 > num2value# )
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( id1 == id2 -> (id3 > num1valuea# and id3 <= num1valueb#) or not (id4 == id5) )
always ( rise (id1 == id2) -> id3 == num1value# )
eventually (rise (id1 < num1value#) or id2 < num2value#)
always ( id1 >= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 == id2) -> id3 <= num1value# )
eventually [0:num2temporal#] (id1 <= num1value#)
always ( (id1 > num1value#) until (fall (id2 >= num2valuea# and id2 <= num2valueb#)) -> (id3 == num3value#) since [0:num5temporal#] (not (id4 > num4value#)) )
always ( id1 <= num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always (not (id1 == num1value#))
always ( rise (id1 < num1value#) -> not fall (id2 == num2value#) )
always ( id1 < num1value# -> id2 > num2value# and rise (id3 > num3value#) )
always ( rise (id1 >= num1value#) -> id2 > num2value# )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( once (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 > num1value#)) )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or id3 == num3value# )
always ( rise (id1 >= num1value#) -> fall (id2 > num2valuea# and id2 <= num2valueb#) )
always ( id1 > num1value# or not (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 <= num1value#)) )
eventually (rise (id1 >= num1value#) and id2 == num2value#)
eventually [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( id1 == num1value# or not fall (id2 == num2value#) -> not (id3 == num3value#) )
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 <= num1value# -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( not rise (once [0:num2temporal#] (rise (id1 >= num1value#))) -> always [0:num4temporal#] (id2 >= num3value#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 == num1value#) -> id2 >= num2value# )
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (not (id2 > num2value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == id4)) )
always (id1 < num1value# or id2 < num2value#)
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
eventually (id1 == num1value#)
eventually [0:num3temporal#] (id1 >= num1value# and id2 <= num2value#)
always ( rise (id1 <= num1value#) -> rise (id2 > num2value#) or (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( id1 <= num1value# and id2 <= num2value# -> id3 <= num3value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# )
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always (id1 >= num1value# and not (id2 == num2value#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (not fall (id2 >= num2valuea# and id2 <= num2valueb#)) until (id3 > num3value#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2value#) since [0:num4temporal#] (not (id3 == num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and rise (id2 == num2value#) -> always [0:num4temporal#] (not (id3 > num3value#)) )
always [0:num2temporal#] (id1 < num1value# and not (id2 == id3))
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> historically (id3 <= num3value#) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually [num2temporala#:num2temporalb#] (not (id1 > num1value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == num2value# and id3 == id4 )
eventually [0:num2temporal#] (id1 == id2 and rise (id3 >= num1value#))
always ( not rise (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always (not fall (id3 == id4))) )
always ( id1 > num1value# -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always (id1 == id2 and id3 >= num1value#)
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (rise (id2 == num2value#)) )
always [0:num2temporal#] (id1 <= num1value# and id2 == id3)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == id2) -> once [0:num2temporal#] (not rise (id3 > num1valuea# and id3 < num1valueb#)) )
always [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always (id1 == id2)
always (id1 == id2 and id3 == id4)
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and not fall (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == id2) -> fall (always (id3 == id4)) )
always ( fall (id1 == id2) -> rise (id3 == id4) )
always ( rise (id1 < num1value#) -> not (id2 <= num2value#) )
always ( not ((not (id1 > num1value#)) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) -> once [0:num5temporal#] (id3 == num4value#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [0:num3temporal#] (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 >= num1value# -> (id2 > num2value#) until (fall (id3 == num3value#)) )
always ( once [0:num2temporal#] (rise (id1 <= num1value#)) -> (id2 == id3) until [num4temporala#:num4temporalb#] (rise (id4 == num3value#)) )
always ( rise (id1 >= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( id1 == num1value# and id2 == id3 -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (fall (id4 == id5))) )
always (id1 <= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( not (id1 == num1value#) or id2 <= num2value# -> id3 == id4 )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually (id3 <= num1value#)) )
always ( id1 > num1value# -> always [0:num3temporal#] (eventually (not fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 <= num2value# )
always ( rise (id1 >= num1value#) or id2 <= num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( fall (id1 == id2) -> id3 <= num1value# and (id4 > num2valuea# and id4 < num2valueb#) )
always ( id1 > num1value# and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2value#))) )
eventually [0:num2temporal#] (rise (id1 >= num1value#) and id2 == id3)
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always (not (id1 == num1value#) or not (id2 <= num2value#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> historically (id2 > num2valuea# and id2 < num2valueb#) )
always ( id1 <= num1value# -> rise (id2 > num2valuea# and id2 < num2valueb#) )
eventually [0:num1temporal#] (id1 == id2)
always [0:num3temporal#] (id1 == num1value# or id2 > num2value#)
always ( rise (id1 == num1value#) and id2 == id3 -> (id4 == num2value#) until [0:num4temporal#] (id5 == num3value#) )
always ( id1 == id2 and rise (id3 >= num1value#) -> rise (always (id4 == id5)) )
always ( rise (id1 > num1value#) -> id2 > num2value# )
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num3temporal#] (rise (id1 >= num1value#) or not fall (id2 > num2value#))
eventually (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 == num1value#) -> rise (id2 > num2value#) and (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == id2) -> not rise (id3 == id4) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 < num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3valuea# and id3 <= num3valueb#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == num1value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 <= num2value#) )
always ( fall (id1 == id2) -> (not (id3 > num1valuea# and id3 < num1valueb#)) since [num3temporala#:num3temporalb#] (rise (id4 > num2value#)) )
always ( rise (id1 <= num1value#) -> always (id2 == id3) )
always [num3temporala#:num3temporalb#] (not (id1 <= num1value#) or id2 < num2value#)
eventually [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always (not (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) and id3 >= num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (id3 <= num1value#) )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 == id4)) )
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> eventually [0:num3temporal#] (id3 == id4) )
always [0:num2temporal#] (id1 > num1value# or id2 == id3)
always ( rise (id1 == id2) -> eventually (always [0:num2temporal#] (not (id3 > num1valuea# and id3 < num1valueb#))) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> not fall (always (id2 <= num2value#)) )
eventually (id1 == num1value# and rise (id2 == num2value#))
always [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1value#) -> id2 <= num2value# )
eventually [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (rise (id2 > num2value#))) )
always (id1 == num1value# and not fall (id2 == id3))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always [0:num3temporal#] (not (id1 < num1value#) or id2 == num2value#)
always ( fall (id1 == num1value#) -> (id2 >= num2value#) until [0:num4temporal#] (id3 == num3value#) )
always ( not ((id1 > num1value#) until (rise (id2 == num2value#))) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 < num3value#)) )
always ( id1 == num1value# and id2 >= num2value# -> id3 == num3value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
always (id1 <= num1value# and id2 >= num2value#)
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always [0:num2temporal#] (id1 < num1value#)
always ( rise ((not rise (id1 >= num1value#)) since (id2 >= num2valuea# and id2 < num2valueb#)) -> always (eventually (not fall (id3 == num3value#))) )
eventually [0:num2temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#))
always ( (id1 > num1value#) since [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 < num2valueb#) -> once [num5temporala#:num5temporalb#] (rise (id3 == num4value#)) )
always ( rise (id1 < num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( id1 <= num1value# -> (id2 == num2value#) until (id3 >= num3value#) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value#)
always ( fall (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) or (id4 >= num2valuea# and id4 <= num2valueb#) )
eventually (id1 >= num1value#)
eventually [0:num3temporal#] (not (id1 == num1value#) and fall (id2 == num2value#))
always ( rise (id1 <= num1value#) and rise (id2 >= num2value#) -> not (id3 <= num3value#) )
always [0:num2temporal#] (id1 >= num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# and id2 <= num2value#)
always ( rise (id1 < num1value#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( not rise ((id1 == id2) since [0:num2temporal#] (id3 >= num1value#)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 == id5)) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> not rise (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> not fall ((id2 <= num2value#) since (id3 == num3value#)) )
always [num2temporala#:num2temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 < num1value# -> not (id2 < num2value#) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 < num1value#)) )
eventually [0:num2temporal#] (rise (id1 == num1value#) or id2 == id3)
always [0:num2temporal#] (not (id1 == id2) or id3 == num1value#)
always ( id1 == id2 and not (id3 < num1value#) -> (id4 <= num2value#) until [num4temporala#:num4temporalb#] (id5 < num3value#) )
always [num3temporala#:num3temporalb#] (not fall (id1 > num1value#) or id2 > num2value#)
eventually [0:num2temporal#] (id1 <= num1value#)
always ( not (id1 > num1value#) and id2 < num2value# -> not (id3 == id4) and id5 < num3value# )
always ( not fall (id1 > num1value#) -> id2 == id3 )
eventually [num3temporala#:num3temporalb#] (id1 >= num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 <= num1value# or id2 > num2value# -> id3 == num3value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (rise (id2 < num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( id1 == id2 and id3 <= num1value# -> (id4 >= num2value#) until [0:num4temporal#] (fall (id5 == num3value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always [0:num2temporal#] (id1 == num1value# or id2 == id3)
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( rise (id1 <= num1value#) -> not (id2 > num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 > num1value#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 <= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) )
always ( rise (id1 < num1value#) -> id2 == id3 )
always ( id1 >= num1value# or rise (id2 <= num2value#) -> eventually [0:num4temporal#] (id3 > num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 > num1value#) -> not (historically [num3temporala#:num3temporalb#] (not (id2 <= num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num3temporal#] (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id3 < num1value#))) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (rise (id3 >= num1value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) or id2 < num2value#)
always ( not (id1 == num1value#) -> id2 == num2value# )
always ( id1 <= num1value# or rise (id2 > num2value#) -> eventually (always [num4temporala#:num4temporalb#] (id3 > num3value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 >= num1value#))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (not (id2 == num2value#))) )
always ( rise (id1 > num1value#) -> not (eventually [num3temporala#:num3temporalb#] (id2 > num2value#)) )
always ( not fall (id1 >= num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> not (once [0:num4temporal#] (id3 > num3value#)) )
always ( fall (id1 == num1value#) -> eventually (id2 <= num2value#) )
always ( not ((id1 >= num1value#) since (id2 == num2value#)) -> rise (always [0:num3temporal#] (id3 == id4)) )
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and id2 < num2value#)
eventually (id1 > num1value#)
always ( id1 > num1value# and id2 < num2value# -> id3 == num3value# )
always ( once (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num1temporala#:num1temporalb#] (id1 == id2 or not rise (id3 == id4))
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( fall (id1 == id2) -> id3 == num1value# and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( once [0:num2temporal#] (not (id1 <= num1value#)) -> eventually [0:num3temporal#] (id2 == id3) )
eventually [0:num2temporal#] (id1 < num1value#)
eventually (id1 >= num1value# and id2 == id3)
always ( id1 == id2 or rise (id3 >= num1value#) -> id4 >= num2value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 < num2valueb# )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 < num2value#))
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 > num2valuea# and id2 < num2valueb#) )
always ( not (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == id2 -> always [num1temporala#:num1temporalb#] (eventually [num2temporala#:num2temporalb#] (not rise (id3 == id4))) )
always ( rise (once [0:num2temporal#] (not (id1 == num1value#))) -> eventually [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (id2 <= num3value#) )
always (id1 == num1value# and id2 <= num2value#)
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( not (id1 == id2) and not (id3 == id4) -> not (id5 >= num1valuea# and id5 < num1valueb#) )
eventually [0:num1temporal#] (id1 == id2 or id3 == id4)
always ( id1 == id2 or id3 == id4 -> eventually [0:num2temporal#] (not (id5 == num1value#)) )
always (id1 > num1value# and id2 > num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 == num2value# )
always ( id1 > num1value# or id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3value#)) )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 == num1value#) )
always ( rise (id1 < num1value#) -> rise ((id2 >= num2value#) until (id3 < num3value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 == num2value#) -> always [num5temporala#:num5temporalb#] (eventually (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( id1 == id2 -> id3 == id4 )
always ( id1 >= num1value# or id2 <= num2value# -> id3 == num3value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> not (id3 == num3value#) and rise (id4 >= num4valuea# and id4 < num4valueb#) )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( fall (id1 == num1value#) -> rise (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> id2 == id3 or id4 > num2value# )
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 < num2valueb#) )
always ( fall (id1 == id2) -> not (id3 <= num1value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (id1 == num1value# and not (id2 == id3))
always ( id1 == id2 -> (id3 > num1value#) until [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 > num1value#) or id2 < num2value# -> id3 == id4 or rise (id5 == num3value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always (id1 == id2 and not rise (id3 >= num1value#))
always ( id1 == id2 and id3 == num1value# -> id4 <= num2value# )
always ( rise (id1 == id2) -> (id3 > num1valuea# and id3 < num1valueb#) or id4 >= num2value# )
eventually [0:num3temporal#] (not (id1 == num1value#) and not rise (id2 == num2value#))
always ( not (historically [0:num2temporal#] (id1 <= num1value#)) -> eventually [num4temporala#:num4temporalb#] (id2 > num3value#) )
always ( fall (once (id1 > num1valuea# and id1 < num1valueb#)) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (id3 == id4) )
eventually (id1 == id2 or id3 >= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (not (id3 > num3value#)) )
always ( fall (id1 == id2) -> id3 == id4 )
always ( historically (id1 == id2) -> always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always [0:num2temporal#] (id1 <= num1value#)
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value# -> (not (id3 >= num3value#)) until [num5temporala#:num5temporalb#] (not (id4 <= num4value#)) )
always ( id1 > num1value# -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> id2 == id3 )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
eventually (id1 >= num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( id1 < num1value# and id2 == id3 -> not (eventually (id4 < num2value#)) )
always [0:num3temporal#] (id1 < num1value# and id2 >= num2value#)
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> (id2 >= num2value#) until (rise (id3 > num3valuea# and id3 < num3valueb#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 == num1value#) and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always (id1 >= num1value#)
always ( (id1 == id2) since (id3 == id4) -> once [num1temporala#:num1temporalb#] (id5 == id6) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num3temporala#:num3temporalb#] (rise (id2 <= num2value#))) )
eventually [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
always ( fall (once [num2temporala#:num2temporalb#] (fall (id1 > num1valuea# and id1 < num1valueb#))) -> (not rise (id2 == id3)) until (id4 > num3value#) )
always ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( historically [0:num2temporal#] (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 == id3))) )
always ( id1 == id2 and id3 == num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) -> historically [0:num3temporal#] (not (id2 < num2value#)) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#) )
eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#))
eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#) and id2 == id3)
always [0:num2temporal#] (id1 == num1value#)
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( id1 < num1value# or id2 <= num2value# -> (not (id3 <= num3value#)) until (rise (id4 == num4value#)) )
eventually [0:num2temporal#] (not fall (id1 == id2) and id3 == num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always (id1 > num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) and id2 == num2value# -> not (id3 > num3valuea# and id3 <= num3valueb#) or fall (id4 == num4value#) )
always [0:num2temporal#] (id1 == id2 and id3 == num1value#)
always ( id1 == num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> (not (id3 > num3valuea# and id3 < num3valueb#)) until (fall (id4 == num4value#)) )
always ( rise (id1 == id2) -> always (id3 == num1value#) )
always ( id1 <= num1value# -> id2 <= num2value# and id3 > num3value# )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( rise (id1 > num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value# and id2 == id3)
always ( not ((id1 == num1value#) until (id2 > num2value#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 == num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) -> id2 < num2value# )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 <= num1value#))) )
eventually [0:num3temporal#] (rise (id1 > num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 <= num1value#) and id2 == id3 -> (not (id4 == num2value#)) until [0:num3temporal#] (not rise (id5 == id6)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 > num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 < num1value#) and not rise (id2 > num2value#))
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (fall (id3 > num1valuea# and id3 < num1valueb#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> not (eventually [0:num3temporal#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 >= num2value#))
always [0:num1temporal#] (id1 == id2)
always ( not (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == id3) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 < num2value#)) )
always [0:num2temporal#] (not fall (id1 >= num1value#) and id2 == id3)
always ( id1 == id2 -> once [0:num1temporal#] (id3 == id4) )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 <= num1value# and id2 == num2value# -> eventually [0:num4temporal#] (rise (id3 > num3value#)) )
always ( rise (id1 >= num1value#) -> eventually (id2 <= num2value#) )
always ( id1 == num1value# and id2 == id3 -> not (id4 > num2valuea# and id4 < num2valueb#) )
always ( fall (id1 == id2) -> not (eventually [0:num2temporal#] (not (id3 <= num1value#))) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> not (id2 >= num2value#) )
always ( id1 <= num1value# -> not (id2 >= num2valuea# and id2 < num2valueb#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 == num1value#) -> historically [0:num3temporal#] (id2 >= num2value#) )
always (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((id2 <= num2value#) until (id3 <= num3value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) or id3 >= num3value# )
always ( rise (id1 >= num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (not (id2 > num2value#)) )
eventually [0:num3temporal#] (id1 <= num1value# or not (id2 > num2value#))
always [num3temporala#:num3temporalb#] (id1 == num1value# or id2 == num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( fall (id1 == id2) -> not rise (historically [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( not (historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always (id1 >= num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 == num2value#))) )
always ( id1 > num1value# or rise (id2 >= num2value#) -> eventually [0:num3temporal#] (fall (id3 == id4)) )
always ( id1 == num1value# and id2 == id3 -> not (eventually [0:num3temporal#] (not fall (id4 > num2value#))) )
eventually (id1 <= num1value#)
always ( fall (id1 == id2) -> fall (eventually [num2temporala#:num2temporalb#] (rise (id3 >= num1value#))) )
eventually [0:num3temporal#] (fall (id1 == num1value#) or not (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> once [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and rise (id2 <= num2value#))
always ( rise ((id1 == id2) since (id3 <= num1value#)) -> fall (always [num3temporala#:num3temporalb#] (not (id4 > num2valuea# and id4 < num2valueb#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# or rise (id2 <= num2value#) -> id3 < num3value# or id4 == id5 )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( rise (id1 < num1value#) -> not (id2 < num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 >= num1value# and rise (id2 >= num2value#) -> always (eventually [0:num4temporal#] (id3 >= num3value#)) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> rise (id2 <= num2value#) )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( id1 >= num1value# -> id2 == num2value# )
eventually (id1 >= num1value# or not (id2 == id3))
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
eventually (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 <= num2value#) )
always ( id1 >= num1value# and fall (id2 == num2value#) -> not ((id3 <= num3value#) until [0:num5temporal#] (id4 > num4valuea# and id4 <= num4valueb#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( not (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( id1 == num1value# or id2 < num2value# -> id3 == num3value# )
eventually (id1 == id2 and id3 < num1value#)
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( eventually [0:num1temporal#] (id1 == id2) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 < num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually (id2 == id3)) )
always [0:num2temporal#] (id1 >= num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( historically [0:num2temporal#] (not (id1 >= num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (fall (id2 == num3value#))) )
always (id1 <= num1value# and id2 >= num2value#)
always ( not (historically [num1temporala#:num1temporalb#] (not fall (id1 == id2))) -> not ((id3 > num2valuea# and id3 < num2valueb#) until [0:num4temporal#] (id4 < num3value#)) )
always (id1 > num1value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 < num2valueb#))) )
always [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 == num3value#))) )
always ( id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( id1 == num1value# -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (not fall (id2 == id3))) )
always [num3temporala#:num3temporalb#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 <= num1value#) -> eventually [0:num3temporal#] (not (id2 <= num2value#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num3temporal#] (id2 > num2value#) )
always [num3temporala#:num3temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 <= num1value#) -> id2 <= num2value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) since [0:num3temporal#] (id2 < num2value#) -> eventually [0:num5temporal#] (id3 > num4value#) )
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (rise (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 < num1value# -> (id2 >= num2valuea# and id2 < num2valueb#) and id3 < num3value# )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> rise ((id2 >= num2value#) until [0:num4temporal#] (id3 >= num3value#)) )
always [0:num1temporal#] (id1 == id2)
always ( fall (id1 == num1value#) or not (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == num3value# )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always (not (id1 > num1value#) or not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 < num1value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( once (fall (id1 == num1value#)) -> always [0:num3temporal#] (id2 >= num2value#) )
eventually [0:num3temporal#] (fall (id1 == num1value#) and rise (id2 == num2value#))
always ( id1 <= num1value# or rise (id2 > num2value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always ( rise (id1 == id2) -> fall ((not fall (id3 >= num1valuea# and id3 <= num1valueb#)) since [0:num3temporal#] (not fall (id4 == num2value#))) )
eventually (rise (id1 <= num1value#) and id2 == id3)
always ( rise (id1 == num1value#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually [0:num3temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always [0:num3temporal#] (id1 < num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 < num1value# or not (id2 == num2value#) -> not fall (id3 == num3value#) )
always ( rise (id1 < num1value#) -> id2 == id3 and id4 == id5 )
always (id1 <= num1value# and id2 == id3)
eventually [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 >= num2value#) -> not (id3 == id4) )
always ( id1 > num1value# or id2 == id3 -> not (eventually [0:num3temporal#] (rise (id4 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (once [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and fall (id3 == num3value#) )
always [num2temporala#:num2temporalb#] (not (id1 >= num1value#) or id2 == id3)
always ( rise (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( id1 == num1value# or id2 >= num2value# -> (id3 == num3value#) until [0:num5temporal#] (id4 >= num4value#) )
always ( rise (id1 == num1value#) -> not ((id2 > num2value#) until [num3temporala#:num3temporalb#] (fall (id3 == id4))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> (not (id2 > num2valuea# and id2 <= num2valueb#)) until [0:num4temporal#] (id3 < num3value#) )
eventually [0:num2temporal#] (rise (id1 >= num1value#) and not fall (id2 == id3))
always (not (id1 > num1valuea# and id1 < num1valueb#) and id2 == id3)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not ((not (id2 > num2value#)) since (not (id3 >= num3value#))) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( id1 == id2 -> id3 > num1valuea# and id3 < num1valueb# )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# and id2 == num2value#)
always ( id1 <= num1value# and id2 < num2value# -> (id3 > num3valuea# and id3 < num3valueb#) and fall (id4 > num4valuea# and id4 < num4valueb#) )
always ( rise (id1 < num1value#) -> eventually (id2 == num2value#) )
always [0:num3temporal#] (id1 < num1value# and id2 > num2value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> historically [0:num4temporal#] (id3 <= num3value#) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always (id1 == num1value# and id2 >= num2value#)
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( once [0:num2temporal#] (not (id1 > num1value#)) -> not fall (eventually (rise (id2 > num3value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 > num2valuea# and id2 < num2valueb#) since [0:num4temporal#] (rise (id3 >= num3value#)) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [0:num2temporal#] (not (id1 < num1value#))
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 < num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# or id2 == id3 -> always [0:num3temporal#] (eventually (rise (id4 >= num2value#))) )
always ( rise (always [num2temporala#:num2temporalb#] (id1 <= num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2value#) )
always ( rise (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( not ((id1 == num1value#) until (id2 > num2valuea# and id2 < num2valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 == num2value#) until [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not (id1 > num1value#) -> id2 <= num2value# and id3 <= num3value# )
always [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 == id3))
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> fall (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> id2 == num2value# and id3 >= num3value# )
always ( id1 < num1value# or rise (id2 >= num2value#) -> (id3 > num3valuea# and id3 < num3valueb#) since (rise (id4 > num4value#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 > num2value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 == num1value#))
always ( id1 == id2 -> id3 == num1value# and rise (id4 > num2valuea# and id4 < num2valueb#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 == num2value#) )
always (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 <= num1value# or id2 <= num2value# -> (id3 == num3value#) until [num5temporala#:num5temporalb#] (not (id4 <= num4value#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 < num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not (eventually [0:num3temporal#] (id2 == num2value#)) )
eventually (fall (id1 == id2))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 < num2valueb#))) )
eventually [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#) -> always [num4temporala#:num4temporalb#] (id2 >= num3valuea# and id2 <= num3valueb#) )
always [num2temporala#:num2temporalb#] (not (id1 >= num1value#))
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always (not (id1 == id2))
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not (id2 >= num2value#) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 < num1valueb#)) -> once [0:num3temporal#] (id2 == id3) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> id3 > num3value# )
always [0:num2temporal#] (id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#))
always ( rise (id1 == num1value#) -> not ((id2 > num2value#) until [num3temporala#:num3temporalb#] (id3 == id4)) )
always ( not (id1 < num1value#) or (id2 > num2valuea# and id2 < num2valueb#) -> (id3 == id4) until [num4temporala#:num4temporalb#] (id5 <= num3value#) )
always ( rise (id1 >= num1value#) -> not rise (id2 == id3) )
always ( rise (id1 <= num1value#) -> id2 == num2value# and not (id3 == id4) )
always ( id1 == num1value# and not (id2 >= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( rise (id1 == num1value#) and id2 < num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not fall (id3 == id4))) )
always ( rise (id1 == id2) -> always (eventually (id3 == num1value#)) )
always [0:num1temporal#] (id1 == id2 and id3 == id4)
always ( rise (id1 == num1value#) -> not fall ((id2 > num2value#) until [0:num3temporal#] (id3 == id4)) )
always ( not fall (id1 == num1value#) and id2 == num2value# -> eventually [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always [num2temporala#:num2temporalb#] (id1 == id2 or not rise (id3 >= num1valuea# and id3 <= num1valueb#))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 >= num1value# and id2 == id3 -> (id4 >= num2valuea# and id4 <= num2valueb#) since [0:num4temporal#] (not fall (id5 == num3value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> (id2 >= num2value#) since (id3 > num3valuea# and id3 < num3valueb#) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == id2) -> rise (id3 == num1value#) )
always [0:num3temporal#] (id1 > num1value# or (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == num1value#) -> always (eventually (rise (id2 > num2value#))) )
always ( rise (id1 == num1value#) or rise (id2 < num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 >= num1value#)) )
always ( not (id1 <= num1value#) and id2 == id3 -> (id4 >= num2value#) until [0:num4temporal#] (id5 == num3value#) )
always ( rise (id1 == id2) -> not fall (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( eventually [num2temporala#:num2temporalb#] (not rise (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (not (id2 >= num3value#))) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (id2 >= num2value#) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 > num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( id1 == id2 and id3 > num1value# -> id4 < num2value# )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 == id3 )
eventually [num3temporala#:num3temporalb#] (rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( (id1 < num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually [num4temporala#:num4temporalb#] (not (id3 == id4)) )
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 <= num2value#) -> (id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (id4 <= num4value#) )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num3temporal#] (id3 == id4) )
always ( once [0:num2temporal#] (id1 < num1value#) -> eventually [0:num4temporal#] (always (id2 > num3value#)) )
always ( rise (id1 >= num1value#) and id2 >= num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always [0:num3temporal#] (not (id1 == num1value#) and id2 > num2value#)
always [0:num2temporal#] (id1 < num1value# and not (id2 == id3))
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (fall (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> id2 > num2value# and id3 == id4 )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2value# )
always ( id1 == num1value# or rise (id2 < num2value#) -> id3 >= num3value# )
always ( id1 < num1value# -> always (id2 < num2value#) )
always ( not (historically (id1 == num1value#)) -> not fall ((id2 == num2value#) until (id3 == id4)) )
always ( id1 == id2 and not (id3 <= num1value#) -> historically [0:num3temporal#] (id4 >= num2value#) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 <= num2value#) -> always (eventually (rise (id3 >= num3value#))) )
always [0:num2temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( id1 > num1value# and fall (id2 == num2value#) -> not ((id3 == id4) until [0:num4temporal#] (id5 == num3value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (not (id1 < num1value#) or id2 == id3)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#)) )
always (id1 == num1value#)
always [0:num1temporal#] (id1 == id2)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == id2) -> id3 == id4 )
eventually (id1 == id2)
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( id1 > num1value# -> not rise (id2 == id3) )
always ( not (id1 < num1value#) and id2 == id3 -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id4 >= num2valuea# and id4 <= num2valueb#))) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 > num2value#))
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (rise (id2 <= num2value#))) )
always ( id1 > num1value# -> not (once (id2 >= num2value#)) )
always ( rise (id1 == num1value#) -> always (eventually (not fall (id2 == num2value#))) )
eventually (id1 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( fall (id1 == num1value#) -> id2 <= num2value# )
eventually (id1 == id2)
always ( rise (id1 > num1value#) -> not (id2 > num2value#) )
eventually (id1 >= num1value#)
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 < num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not rise (id2 == num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == num2value#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
eventually [0:num1temporal#] (id1 == id2 and id3 == id4)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( historically [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 > num3valuea# and id2 < num3valueb#))) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 > num1valuea# and id3 < num1valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 <= num2valueb#) or not (id3 == id4) )
always ( rise (id1 == num1value#) -> not fall (always [0:num3temporal#] (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> rise (id2 == num2value#) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num3temporal#] (id2 >= num2value#)) )
always ( id1 == id2 and id3 == num1value# -> id4 == num2value# and id5 >= num3value# )
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( not (id1 == id2) and not (id3 == id4) -> rise (eventually [num1temporala#:num1temporalb#] (fall (id5 == id6))) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( rise ((id1 < num1value#) until (rise (id2 > num2value#))) -> (id3 <= num3value#) since (id4 > num4valuea# and id4 < num4valueb#) )
always [0:num2temporal#] (id1 < num1value#)
always ( id1 < num1value# or rise (id2 < num2value#) -> rise (id3 >= num3value#) )
always ( not (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( id1 == id2 or id3 >= num1value# -> once (id4 == num2value#) )
eventually [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) or id2 == num2value#)
always ( id1 == id2 -> eventually [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( not (id1 == num1value#) and id2 <= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#)
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( not (id1 == id2) or rise (id3 <= num1value#) -> eventually (id4 == num2value#) )
always ( always [0:num1temporal#] (id1 == id2) -> always (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( historically [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (not (id3 > num2valuea# and id3 < num2valueb#)) )
eventually [0:num1temporal#] (not (id1 == id2))
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> id2 == id3 )
eventually [0:num2temporal#] (id1 >= num1value#)
always ( id1 > num1value# or not rise (id2 > num2valuea# and id2 < num2valueb#) -> (not (id3 == id4)) until [0:num4temporal#] (id5 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id2 > num2value#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( id1 < num1value# -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
eventually [0:num3temporal#] (id1 < num1value# and id2 <= num2value#)
always (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (not (id1 == num1value#))
always ( id1 < num1value# or id2 < num2value# -> id3 == num3value# )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( id1 == id2 -> id3 == num1value# )
always ( id1 < num1value# and id2 == id3 -> not (always (id4 <= num2value#)) )
always ( once [0:num2temporal#] (id1 >= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [0:num5temporal#] (rise (id2 == num3value#))) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 and id5 > num3value# )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 <= num2value#))) )
always ( id1 > num1value# and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 > num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 == num2value#) -> once [num4temporala#:num4temporalb#] (id3 == id4) )
always ( id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> not (id3 >= num3valuea# and id3 < num3valueb#) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> id3 > num1value# and id4 > num2value# )
always ( id1 == id2 and id3 == num1value# -> rise (id4 >= num2value#) or not fall (id5 > num3value#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (id3 >= num1value#) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always [0:num3temporal#] (not fall (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (not (id1 < num1value#) and rise (id2 == num2value#))
always ( fall (id1 == num1value#) -> id2 == num2value# )
always (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( not (id1 <= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( id1 == id2 or id3 < num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
always ( id1 > num1value# or rise (id2 > num2value#) -> rise (id3 == num3value#) )
always ( rise (id1 == num1value#) -> not (id2 < num2value#) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num1temporal#] (id1 == id2)
always ( id1 > num1value# -> (id2 < num2value#) until [0:num4temporal#] (id3 >= num3value#) )
always ( rise (id1 == id2) -> id3 == num1value# )
eventually [0:num2temporal#] (rise (id1 == num1value#))
eventually [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
eventually [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always [0:num1temporal#] (not (id1 == id2))
eventually (rise (id1 < num1value#))
eventually [0:num3temporal#] (not (id1 < num1value#) or id2 == num2value#)
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 < num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 >= num3value#))) )
always ( id1 >= num1value# or id2 == num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) and not (id2 >= num2value#))
always ( rise (id1 >= num1value#) -> eventually (always (id2 == num2value#)) )
always ( not fall (id1 == id2) -> id3 < num1value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> historically (not (id2 >= num2valuea# and id2 < num2valueb#)) )
eventually [0:num3temporal#] (rise (id1 <= num1value#) and (id2 >= num2valuea# and id2 < num2valueb#))
always ( historically (id1 == id2) -> always [0:num2temporal#] (id3 == num1value#) )
always (not (id1 > num1value#) and id2 == num2value#)
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> always [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always ( historically [0:num2temporal#] (not (id1 <= num1value#)) -> not fall (always (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (once [0:num2temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#))) -> eventually [num4temporala#:num4temporalb#] (rise (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( id1 < num1value# -> rise (id2 <= num2value#) )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (not (id3 >= num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> not ((id3 == num1value#) until [num3temporala#:num3temporalb#] (rise (id4 >= num2value#))) )
always ( rise (id1 < num1value#) -> fall (id2 == num2value#) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 <= num2valueb# )
always ( fall (id1 == id2) -> always (id3 > num1valuea# and id3 < num1valueb#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 > num2value#))
always ( (not (id1 > num1valuea# and id1 < num1valueb#)) since [0:num3temporal#] (id2 >= num2value#) -> eventually [0:num5temporal#] (always (id3 <= num4value#)) )
always ( not (id1 < num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always ( rise ((id1 >= num1valuea# and id1 <= num1valueb#) since (not (id2 == id3))) -> always [0:num3temporal#] (id4 <= num2value#) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 or id3 == num1value# -> id4 >= num2valuea# and id4 <= num2valueb# )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( eventually (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (not fall (id2 == num2value#))) )
always ( rise (id1 < num1value#) -> not (always [0:num3temporal#] (not (id2 >= num2value#))) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 <= num1value# -> not ((id2 == id3) until [num2temporala#:num2temporalb#] (rise (id4 == id5))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [num2temporala#:num2temporalb#] (id1 < num1value# and id2 == id3)
always (not (id1 > num1value#) or id2 >= num2value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( (id1 == num1value#) since (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 <= num2value# -> not (eventually (fall (id3 == num3value#))) )
always ( rise (id1 == num1value#) -> fall (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1value#) or rise (id2 < num2value#) -> once [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( fall (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always [0:num2temporal#] (id1 == id2 and not fall (id3 == num1value#))
always ( historically [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [num4temporala#:num4temporalb#] (eventually (id2 >= num3valuea# and id2 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> once [0:num3temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually (id2 == id3)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or not fall (id2 >= num2value#) -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 > num1value#) -> not rise ((not (id2 == id3)) until [num3temporala#:num3temporalb#] (id4 == num2value#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (rise (id2 <= num2value#)) )
always ( id1 == id2 and not (id3 <= num1value#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id4 >= num2value#)) )
always [0:num3temporal#] (id1 == num1value# or (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1valuea# and id1 < num1valueb# -> not (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == num1value#) -> (id2 > num2value#) until [0:num3temporal#] (id3 == id4) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 or rise (id3 == num1value#) -> id4 == id5 )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or not (id2 == id3) -> (id4 > num2valuea# and id4 < num2valueb#) and id5 <= num3value# )
eventually [0:num2temporal#] (id1 >= num1value#)
eventually (id1 < num1value#)
eventually [num2temporala#:num2temporalb#] (fall (id1 == num1value#))
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( (id1 >= num1valuea# and id1 < num1valueb#) or id2 == num2value# -> not fall (id3 == num3value#) and not (id4 <= num4value#) )
eventually (id1 >= num1value#)
always (id1 >= num1value#)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
eventually [0:num2temporal#] (id1 == id2 or id3 == num1value#)
always ( not (historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [num4temporala#:num4temporalb#] (id2 > num3valuea# and id2 < num3valueb#) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( fall (id1 == num1value#) -> id2 > num2value# )
always [0:num2temporal#] (id1 >= num1value#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> (not rise (id3 >= num3value#)) until [0:num5temporal#] (id4 > num4value#) )
always ( id1 == id2 or rise (id3 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id4 == num2value#))) )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until (id3 > num3value#) )
eventually [0:num2temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( id1 == num1value# -> not ((id2 == id3) until (id4 >= num2value#)) )
always ( rise (id1 >= num1value#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 < num3value#))) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( id1 <= num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> id2 <= num2value# and (id3 > num3valuea# and id3 < num3valueb#) )
always [0:num1temporal#] (id1 == id2 and id3 == id4)
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 <= num1valueb#) and id2 == id3)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
eventually [0:num2temporal#] (rise (id1 >= num1value#))
always [num1temporala#:num1temporalb#] (id1 == id2)
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 < num1value#) -> id2 > num2value# )
eventually [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 < num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 < num2value#)) )
always ( (id1 > num1value#) since (rise (id2 == id3)) -> rise ((id4 < num2value#) until [num4temporala#:num4temporalb#] (fall (id5 == num3value#))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 <= num1value# or id2 == id3)
always ( historically [0:num1temporal#] (not rise (id1 == id2)) -> eventually (always [0:num3temporal#] (id3 == num2value#)) )
always ( eventually [num1temporala#:num1temporalb#] (fall (id1 == id2)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id3 > num2value#)) )
always ( rise (id1 <= num1value#) -> not ((not rise (id2 == id3)) until (id4 < num2value#)) )
always ( rise (id1 >= num1value#) -> fall (id2 == id3) )
always ( rise (id1 <= num1value#) or fall (id2 == num2value#) -> eventually (always (not (id3 == num3value#))) )
always ( id1 == id2 -> (id3 >= num1valuea# and id3 <= num1valueb#) and not (id4 > num2valuea# and id4 < num2valueb#) )
always ( always [0:num2temporal#] (id1 > num1value#) -> eventually (fall (id2 == id3)) )
eventually [0:num3temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num3temporal#] (id1 > num1value# and id2 <= num2value#)
always ( rise (id1 <= num1value#) -> not (id2 == num2value#) )
always [0:num3temporal#] (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
eventually [num3temporala#:num3temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( fall (id1 == num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [0:num2temporal#] (not (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( id1 == id2 -> id3 > num1value# )
always ( rise (id1 == id2) -> rise (id3 == id4) )
always ( rise (id1 == num1value#) -> (id2 == num2value#) since [0:num4temporal#] (id3 == num3value#) )
always ( id1 == num1value# and fall (id2 == num2value#) -> id3 == num3value# and (id4 > num4valuea# and id4 < num4valueb#) )
always ( rise (id1 > num1value#) -> always (id2 == id3) )
eventually [num3temporala#:num3temporalb#] (rise (id1 < num1value#) and fall (id2 >= num2valuea# and id2 <= num2valueb#))
eventually [0:num3temporal#] (id1 > num1value# and id2 < num2value#)
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 == num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> rise (id3 == num3value#) )
always [0:num2temporal#] (id1 == num1value#)
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 == num1value#)
always ( (id1 <= num1value#) until [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num5temporal#] (eventually [num6temporala#:num6temporalb#] (id3 > num4valuea# and id3 < num4valueb#)) )
always [0:num3temporal#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 <= num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always ( rise (id1 == id2) -> (id3 == id4) until (id5 > num1value#) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( rise (id1 < num1value#) -> (id2 > num2valuea# and id2 <= num2valueb#) until (rise (id3 > num3value#)) )
always ( eventually (rise (id1 < num1value#)) -> fall (historically (id2 == id3)) )
always [num2temporala#:num2temporalb#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually [0:num2temporal#] (id1 <= num1value# and id2 == id3)
always ( fall (id1 == id2) -> id3 == id4 )
always ( id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always ( rise (id1 == id2) -> id3 > num1value# )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 < num2value#))) )
always ( rise (id1 >= num1value#) -> always (id2 <= num2value#) )
always ( fall ((id1 < num1value#) since [num2temporala#:num2temporalb#] (id2 == id3)) -> (id4 == id5) until [num3temporala#:num3temporalb#] (id6 == id7) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num2temporal#] (id2 == id3) )
eventually (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> fall (id2 == id3) )
eventually [0:num3temporal#] (not fall (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 <= num2value#))
always ( id1 == num1value# -> always [0:num2temporal#] (id2 == id3) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always (id2 == num2value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( once [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 == num3value#) until [num5temporala#:num5temporalb#] (id3 <= num4value#) )
eventually [num1temporala#:num1temporalb#] (fall (id1 == id2))
always ( rise (id1 >= num1value#) and id2 == num2value# -> eventually (always [0:num4temporal#] (id3 > num3value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> not fall (always (not (id2 <= num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num4temporala#:num4temporalb#] (always [0:num5temporal#] (id2 >= num3value#)) )
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always (id1 == num1value# and id2 == num2value#)
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> id4 > num2valuea# and id4 < num2valueb# )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 > num1value#) and rise (id2 < num2value#) -> always [0:num4temporal#] (eventually [num5temporala#:num5temporalb#] (rise (id3 >= num3value#))) )
always ( id1 < num1value# and rise (id2 <= num2value#) -> not (eventually [num4temporala#:num4temporalb#] (id3 >= num3value#)) )
always ( rise (id1 == id2) -> id3 >= num1value# )
always ( rise (id1 > num1value#) -> not (eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#))) )
always ( once (rise (id1 > num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
always ( not (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == id2 -> id3 >= num1valuea# and id3 <= num1valueb# )
always [num3temporala#:num3temporalb#] (not (id1 == num1value#) and id2 == num2value#)
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( id1 == id2 and rise (id3 == num1value#) -> id4 < num2value# )
eventually (id1 <= num1value#)
always ( (id1 >= num1value#) since [0:num2temporal#] (not rise (id2 == id3)) -> (id4 == id5) until (fall (id6 == id7)) )
always ( fall (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always [0:num3temporal#] (not (id1 > num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( id1 > num1value# and id2 == num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( id1 <= num1value# -> not (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always (id2 == id3)) )
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) or id2 == id3 -> eventually [0:num3temporal#] (id4 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> not rise (id2 == id3) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num3temporal#] (always (not fall (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( id1 > num1value# -> id2 > num2value# )
always ( id1 == num1value# -> eventually (rise (id2 < num2value#)) )
always (id1 >= num1value# and id2 > num2value#)
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always ( rise (id1 >= num1value#) -> id2 > num2value# or id3 == id4 )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 <= num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
eventually [0:num2temporal#] (not (id1 == id2) or id3 == num1value#)
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 <= num1value#) -> not (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> once (not rise (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#) -> always [0:num4temporal#] (eventually (id3 > num3value#)) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> not fall (eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always [0:num2temporal#] (id1 >= num1value#)
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) -> not (eventually [0:num5temporal#] (fall (id3 == num4value#))) )
eventually (not (id1 <= num1value#))
eventually (not (id1 == id2) or id3 == num1value#)
always ( rise (id1 >= num1value#) or fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (id3 > num1value#) )
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [num3temporala#:num3temporalb#] (not (id2 <= num2value#)) )
always ( id1 == id2 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and rise (id2 > num2value#) -> once (rise (id3 > num3value#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( once [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 <= num1value#) -> rise (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == id3 )
always [num3temporala#:num3temporalb#] (id1 <= num1value# and not (id2 == num2value#))
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 < num1value#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 < num2value# or id3 == id4 )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> (id3 > num2valuea# and id3 < num2valueb#) until [num3temporala#:num3temporalb#] (id4 == id5) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( fall (id1 == id2) -> id3 < num1value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise ((not (id2 == num2value#)) until [0:num4temporal#] (not fall (id3 >= num3value#))) )
always ( rise (id1 == num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> eventually (always [0:num4temporal#] (id3 < num3value#)) )
always ( not (once [num2temporala#:num2temporalb#] (not (id1 <= num1value#))) -> not rise (once [num4temporala#:num4temporalb#] (rise (id2 > num3value#))) )
eventually (rise (id1 >= num1value#) and not (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 < num1value# or id2 == num2value# -> id3 == num3value# )
always ( fall (id1 == num1value#) and id2 == num2value# -> (id3 == id4) until [num4temporala#:num4temporalb#] (rise (id5 > num3valuea# and id5 < num3valueb#)) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> id2 == num2value# or not (id3 <= num3value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 -> id3 == id4 and (id5 > num1valuea# and id5 <= num1valueb#) )
always ( id1 <= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 < num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 <= num3value# )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or not rise (id2 == num2value#) -> eventually (id3 == id4) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( once [num2temporala#:num2temporalb#] (id1 == num1value#) -> not ((id2 == num3value#) until [num5temporala#:num5temporalb#] (id3 > num4value#)) )
always ( id1 == num1value# and rise (id2 <= num2value#) -> id3 == num3value# )
always ( fall (id1 == num1value#) -> id2 >= num2value# or id3 == id4 )
always [0:num2temporal#] (id1 == num1value#)
always ( id1 > num1value# and id2 == id3 -> eventually [0:num2temporal#] (always [0:num3temporal#] (id4 == id5)) )
always ( (id1 == num1value#) since [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) -> historically (id3 >= num4value#) )
always ( rise (id1 <= num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) since (id3 == num3value#) )
always ( id1 == id2 -> always [0:num1temporal#] (eventually [0:num2temporal#] (rise (id3 == id4))) )
always ( id1 > num1value# and id2 >= num2value# -> rise ((id3 <= num3value#) until (id4 >= num4valuea# and id4 <= num4valueb#)) )
always [0:num2temporal#] (id1 == num1value#)
eventually [0:num2temporal#] (id1 == num1value# and id2 == id3)
always ( once [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 > num3value#)) )
always (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
eventually (rise (id1 <= num1value#))
always ( id1 == id2 -> not fall (id3 > num1value#) and rise (id4 > num2value#) )
always [0:num2temporal#] (id1 == num1value#)
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#) -> id3 == id4 )
always ( id1 <= num1value# -> not (id2 == id3) )
always ( rise (id1 >= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 == num1value#) -> fall (eventually [num3temporala#:num3temporalb#] (id2 <= num2value#)) )
always ( rise (id1 < num1value#) -> not (id2 <= num2value#) )
always ( not (id1 > num1value#) and not (id2 >= num2value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( (id1 == id2) since (rise (id3 == id4)) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id5 == num1value#))) )
always ( rise (id1 == num1value#) -> (not (id2 == id3)) until [0:num3temporal#] (rise (id4 >= num2value#)) )
always ( historically (id1 == id2) -> not (once (id3 < num1value#)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always (id2 == id3)) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( fall (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num3temporal#] (id1 <= num1value# and id2 == num2value#)
always ( rise (id1 > num1value#) -> eventually (id2 >= num2value#) )
always ( rise (id1 <= num1value#) -> (id2 == num2value#) until (rise (id3 > num3value#)) )
always (id1 > num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 <= num1value# -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (not (id2 < num2value#)) )
eventually (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( id1 > num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( (not fall (id1 >= num1value#)) since (id2 == id3) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2valuea# and id4 <= num2valueb#)) )
always ( not rise (id1 >= num1value#) and id2 == num2value# -> not ((not rise (id3 == id4)) until (id5 == id6)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 <= num3value# )
always (id1 > num1value# or id2 > num2value#)
always [0:num3temporal#] (id1 == num1value# or id2 <= num2value#)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( id1 <= num1value# and id2 == id3 -> id4 == id5 )
always ( rise (id1 == num1value#) -> always (eventually (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == num2value#))) )
always [0:num2temporal#] (id1 == num1value#)
always ( once (id1 == num1value#) -> always [0:num3temporal#] (eventually (id2 < num2value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
eventually [0:num3temporal#] (fall (id1 == num1value#) and id2 < num2value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> id2 > num2value# and rise (id3 <= num3value#) )
eventually (rise (id1 < num1value#) or rise (id2 > num2valuea# and id2 < num2valueb#))
always (id1 > num1value#)
always ( rise (id1 == num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( not ((id1 <= num1value#) since [0:num3temporal#] (rise (id2 == num2value#))) -> eventually [0:num5temporal#] (rise (id3 < num4value#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always [0:num2temporal#] (id1 <= num1value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( id1 == num1value# -> eventually [num3temporala#:num3temporalb#] (id2 > num2value#) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 < num1value# or id2 == id3)
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value# -> always [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2value#)) )
always ( id1 == num1value# or id2 == num2value# -> id3 == num3value# and id4 <= num4value# )
always ( id1 > num1value# or id2 == num2value# -> id3 == id4 )
eventually [0:num2temporal#] (id1 > num1value#)
eventually [0:num3temporal#] (id1 <= num1value# or rise (id2 > num2value#))
always ( not (id1 <= num1value#) or id2 == num2value# -> not ((id3 == num3value#) since (id4 == num4value#)) )
always ( id1 == id2 -> always [0:num2temporal#] (id3 < num1value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( id1 <= num1value# and rise (id2 > num2value#) -> once [0:num4temporal#] (id3 == num3value#) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (fall (id2 >= num2valuea# and id2 < num2valueb#))) )
always ( rise (id1 < num1value#) -> id2 < num2value# )
always [num3temporala#:num3temporalb#] (id1 == num1value# and id2 >= num2value#)
always ( id1 >= num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 > num3value# )
always ( id1 >= num1value# and rise (id2 <= num2value#) -> id3 == id4 and id5 <= num3value# )
eventually [0:num2temporal#] (rise (id1 == num1value#))
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) and id2 == id3 -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 >= num2value#)) )
always (not rise (id1 > num1valuea# and id1 < num1valueb#) and not (id2 == num2value#))
eventually [0:num3temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#) or not (id2 == num2value#))
always ( (id1 == num1value#) since [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> eventually [0:num5temporal#] (id3 > num4valuea# and id3 < num4valueb#) )
always ( rise (id1 >= num1value#) -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# and id2 == num2value#)
always ( rise (id1 < num1value#) -> not (always [0:num2temporal#] (id2 == id3)) )
always ( not fall (id1 > num1valuea# and id1 < num1valueb#) and not rise (id2 == id3) -> eventually [num2temporala#:num2temporalb#] (id4 == id5) )
always [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( not (eventually [0:num2temporal#] (id1 >= num1value#)) -> not (historically (id2 == num3value#)) )
always ( rise (id1 == id2) -> id3 < num1value# and not fall (id4 == id5) )
always ( once [0:num1temporal#] (fall (id1 == id2)) -> not (eventually [num3temporala#:num3temporalb#] (rise (id3 <= num2value#))) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (rise (id1 <= num1value#) or id2 == num2value#)
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 <= num2valueb#) and id3 > num3value# )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 < num2value#) until [0:num4temporal#] (rise (id3 <= num3value#)) )
always ( not rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( not (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == num1value#) -> (id2 <= num2value#) until [0:num4temporal#] (fall (id3 == num3value#)) )
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( id1 > num1value# and id2 >= num2value# -> id3 == num3value# )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (not rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 > num1valuea# and id3 <= num1valueb#)) )
always ( id1 >= num1value# and id2 > num2value# -> id3 == id4 )
always (id1 < num1value#)
always ( rise (id1 > num1value#) and not (id2 > num2valuea# and id2 < num2valueb#) -> id3 < num3value# or not (id4 == id5) )
always ( not (id1 <= num1value#) or not (id2 >= num2value#) -> id3 > num3value# and id4 == id5 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually (id2 == id3)) )
always [0:num2temporal#] (id1 > num1value#)
always ( not (id1 == num1value#) -> (id2 == id3) since (id4 == id5) )
always (id1 == id2 or id3 < num1value#)
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( id1 > num1value# and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> always (eventually [0:num4temporal#] (id3 >= num3value#)) )
always ( rise (id1 >= num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 == id4 )
always ( id1 == id2 and id3 >= num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id4 >= num2valuea# and id4 <= num2valueb#))) )
always ( id1 == id2 -> (id3 > num1value#) since (not (id4 == id5)) )
always [0:num3temporal#] (id1 > num1value# or id2 < num2value#)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 > num1value#))
always ( id1 <= num1value# -> eventually [0:num2temporal#] (fall (id2 == id3)) )
eventually [0:num3temporal#] (id1 == num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( (id1 == id2) since (rise (id3 == id4)) -> eventually [num2temporala#:num2temporalb#] (id5 > num1valuea# and id5 < num1valueb#) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (not (id3 <= num1value#))) )
always [0:num2temporal#] (not (id1 <= num1value#))
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 >= num2value# )
always ( id1 >= num1value# -> historically [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 > num2valuea# and id2 <= num2valueb#))) )
always ( rise (id1 == id2) -> eventually [0:num1temporal#] (rise (id3 == id4)) )
always (id1 == num1value# or id2 > num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 < num1valueb#))
always [num3temporala#:num3temporalb#] (id1 <= num1value# or id2 == num2value#)
always ( fall (id1 == num1value#) -> id2 >= num2value# )
always ( id1 == id2 -> eventually [0:num2temporal#] (id3 == num1value#) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( once [0:num1temporal#] (not rise (id1 == id2)) -> always (eventually [0:num3temporal#] (not (id3 <= num2value#))) )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( fall (id1 == id2) -> always (not (id3 >= num1valuea# and id3 <= num1valueb#)) )
eventually (not (id1 > num1value#))
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
eventually [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 > num1value#) -> not (eventually [num3temporala#:num3temporalb#] (rise (id2 == num2value#))) )
always ( once [0:num2temporal#] (id1 == num1value#) -> (id2 <= num3value#) until (id3 > num4valuea# and id3 < num4valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 < num2valueb#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( not rise (id1 == num1value#) or id2 < num2value# -> always [num4temporala#:num4temporalb#] (id3 == num3value#) )
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 == num1value#) -> rise (id2 > num2value#) and id3 < num3value# )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 < num1value# and not (id2 == num2value#) -> (not (id3 >= num3valuea# and id3 <= num3valueb#)) since [num4temporala#:num4temporalb#] (id4 == id5) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 >= num2value#)
always ( rise (id1 <= num1value#) -> always (id2 < num2value#) )
always ( (not rise (id1 == id2)) since [0:num1temporal#] (id3 == id4) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id5 < num2value#)) )
eventually [0:num2temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#))
always ( id1 < num1value# or not (id2 == num2value#) -> id3 == num3value# )
always ( rise (id1 > num1value#) -> rise (id2 >= num2value#) and id3 < num3value# )
eventually [num3temporala#:num3temporalb#] (fall (id1 > num1valuea# and id1 <= num1valueb#) and fall (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) -> eventually (always [0:num3temporal#] (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> rise ((id2 == id3) until [num3temporala#:num3temporalb#] (id4 > num2value#)) )
always ( once [0:num2temporal#] (not rise (id1 > num1valuea# and id1 < num1valueb#)) -> eventually [0:num4temporal#] (id2 == num3value#) )
always ( fall (id1 == num1value#) -> (id2 < num2value#) since [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#) )
eventually [0:num3temporal#] (id1 >= num1value# or rise (id2 == num2value#))
always ( rise (id1 <= num1value#) -> (not (id2 > num2value#)) until [0:num3temporal#] (id3 == id4) )
always ( id1 <= num1value# -> rise (id2 <= num2value#) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# and id3 == id4 )
always ( rise (id1 == num1value#) or id2 == id3 -> eventually [0:num3temporal#] (id4 < num2value#) )
always ( rise (id1 == num1value#) and id2 < num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 <= num3value#)) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 <= num3value#)) )
always ( rise (id1 < num1value#) -> fall (historically [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( not fall (id1 == num1value#) -> id2 == id3 )
always ( id1 == num1value# and id2 == id3 -> id4 <= num2value# )
always ( rise (id1 < num1value#) -> not (id2 == num2value#) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually (rise (id1 == num1value#))
always ( rise (id1 <= num1value#) -> (id2 == id3) until [0:num2temporal#] (id4 == id5) )
always ( rise (id1 == num1value#) -> id2 > num2value# )
eventually (rise (id1 > num1value#) or rise (id2 > num2value#))
always ( rise (id1 <= num1value#) -> id2 == num2value# and id3 == id4 )
always ( id1 > num1value# -> always (eventually [0:num3temporal#] (rise (id2 < num2value#))) )
eventually [num2temporala#:num2temporalb#] (id1 >= num1value#)
always ( id1 == num1value# or id2 >= num2value# -> always (id3 == id4) )
always ( rise (id1 == id2) -> rise (id3 < num1value#) and (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( fall (id1 == num1value#) and fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 < num3value#)) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
always ( id1 == id2 or id3 == id4 -> not (id5 > num1valuea# and id5 < num1valueb#) )
always ( fall (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (not (id2 > num2value#)) )
always ( id1 > num1value# and id2 == id3 -> id4 == num2value# )
always ( fall (id1 == id2) -> historically (id3 > num1value#) )
always ( rise (id1 < num1value#) -> eventually (id2 >= num2value#) )
eventually (id1 == id2 and id3 == id4)
always ( once (id1 >= num1valuea# and id1 < num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 <= num2value#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( always [0:num2temporal#] (not fall (id1 == num1value#)) -> not (once [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( rise (id1 <= num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always [0:num1temporal#] (id1 == id2 and not (id3 == id4))
always ( not (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 < num2value#)) )
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( rise (id1 == num1value#) -> not (id2 == num2value#) )
always ( not (id1 == id2) or rise (id3 > num1value#) -> id4 <= num2value# )
eventually (id1 <= num1value#)
always ( historically [num2temporala#:num2temporalb#] (id1 <= num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 == num3value#))) )
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( id1 == num1value# or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( (id1 == num1value#) until [0:num3temporal#] (id2 < num2value#) -> eventually [0:num5temporal#] (always [0:num6temporal#] (id3 == num4value#)) )
always [0:num2temporal#] (id1 == num1value#)
eventually (fall (id1 == num1value#))
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( (id1 <= num1value#) until [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#) -> always [num5temporala#:num5temporalb#] (eventually (fall (id3 == num4value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 < num2value#)) )
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and id2 <= num2value#)
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value#)
always ( not (id1 == num1value#) -> (id2 < num2value#) until [0:num4temporal#] (id3 < num3value#) )
always ( rise (id1 == num1value#) -> id2 == num2value# )
always ( id1 < num1value# or id2 < num2value# -> not (id3 == id4) )
always ( fall (id1 == id2) -> eventually (always [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 == num1value# and not (id2 <= num2value#) -> not (eventually (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 > num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) until [0:num4temporal#] (id3 < num3value#) )
always [0:num3temporal#] (not (id1 == num1value#) and id2 <= num2value#)
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually (always [num3temporala#:num3temporalb#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 > num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually (id2 >= num2value#)) )
always ( historically (id1 >= num1valuea# and id1 <= num1valueb#) -> (id2 > num2value#) until (id3 < num3value#) )
always ( rise (id1 == num1value#) -> (id2 == id3) until [0:num2temporal#] (id4 == id5) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (rise (id2 > num2value#)) )
always ( rise (id1 > num1value#) -> not (id2 < num2value#) and id3 == num3value# )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( once (rise (id1 <= num1value#)) -> (id2 <= num2value#) until [0:num3temporal#] (id3 == id4) )
always [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
eventually (id1 == id2)
eventually (id1 == id2 and rise (id3 >= num1value#))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (not (id2 == num2value#))) )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( (id1 == num1value#) since [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) -> eventually (rise (id3 >= num4valuea# and id3 <= num4valueb#)) )
always ( not fall (id1 > num1value#) or id2 == num2value# -> (id3 < num3value#) until [0:num4temporal#] (id4 == id5) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (not (id2 == num2value#)) until [0:num4temporal#] (rise (id3 > num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> (id2 == id3) since [num3temporala#:num3temporalb#] (id4 > num2value#) )
always ( rise (id1 < num1value#) -> always (eventually [num2temporala#:num2temporalb#] (rise (id2 == id3))) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always [num3temporala#:num3temporalb#] (id1 > num1value# or not fall (id2 >= num2valuea# and id2 <= num2valueb#))
always [0:num2temporal#] (id1 <= num1value# or not (id2 == id3))
always [0:num3temporal#] (id1 == num1value# or id2 >= num2value#)
always [0:num3temporal#] (id1 > num1value# and id2 == num2value#)
always ( id1 == num1value# -> id2 <= num2value# or rise (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == num1value#) -> historically [0:num2temporal#] (id2 == id3) )
always ( historically (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 > num1value# or rise (id2 > num2valuea# and id2 < num2valueb#) -> (not fall (id3 >= num3valuea# and id3 <= num3valueb#)) until (id4 > num4value#) )
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( not (id1 == num1value#) or id2 == id3 -> id4 == id5 )
always ( rise (id1 > num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (fall (id2 == id3))) )
always ( not (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 >= num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and id2 == num2value#)
eventually [num3temporala#:num3temporalb#] (rise (id1 >= num1value#) and rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> always (id2 > num2valuea# and id2 < num2valueb#) )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( fall (id1 == num1value#) -> id2 <= num2value# )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 < num2valueb#))
always ( fall (id1 == id2) -> not (id3 < num1value#) )
always ( id1 < num1value# -> not fall ((id2 <= num2value#) until [0:num4temporal#] (id3 > num3value#)) )
always ( rise (id1 == id2) -> id3 == id4 or id5 <= num1value# )
always ( id1 <= num1value# or not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num3temporal#] (id3 == id4) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 <= num1valueb#))
always ( rise (id1 >= num1value#) -> id2 == id3 and id4 == id5 )
always ( id1 > num1value# -> eventually [num3temporala#:num3temporalb#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [0:num2temporal#] (rise (id1 <= num1value#) and id2 == id3)
eventually (id1 <= num1value#)
eventually [0:num2temporal#] (not (id1 <= num1value#))
eventually [0:num3temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#) and id2 < num2value#)
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always [num2temporala#:num2temporalb#] (id1 < num1value# and id2 == id3)
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 >= num1value#)) )
always ( not (once [0:num2temporal#] (id1 == num1value#)) -> (id2 == num3value#) since [0:num5temporal#] (rise (id3 < num4value#)) )
always ( not (eventually (fall (id1 == id2))) -> not (eventually [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 > num2value#)
always ( historically (id1 < num1value#) -> always [0:num2temporal#] (id2 == id3) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#) -> always [num4temporala#:num4temporalb#] (eventually (not (id2 > num3value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 > num1value#))) )
eventually [0:num2temporal#] (rise (id1 > num1value#))
always ( not fall (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 >= num2valuea# and id2 < num2valueb#) until [num4temporala#:num4temporalb#] (id3 == num3value#) )
always ( id1 == num1value# -> eventually (id2 <= num2value#) )
eventually [0:num2temporal#] (id1 == id2 or rise (id3 > num1valuea# and id3 <= num1valueb#))
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 > num2value# )
always [0:num1temporal#] (id1 == id2)
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always ( id1 < num1value# or rise (id2 == num2value#) -> (id3 > num3valuea# and id3 < num3valueb#) until (id4 > num4value#) )
always ( rise (id1 > num1value#) -> historically (id2 >= num2value#) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 <= num1value#)) )
always ( rise (id1 < num1value#) or id2 == num2value# -> always (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( not (id1 < num1value#) and id2 > num2value# -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( rise (id1 == id2) -> id3 > num1value# )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 == id2) -> id3 <= num1value# )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 > num2value#) )
always ( historically [num2temporala#:num2temporalb#] (not (id1 > num1value#)) -> eventually (always [num4temporala#:num4temporalb#] (id2 > num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
eventually [num2temporala#:num2temporalb#] (not (id1 > num1valuea# and id1 < num1valueb#))
eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( fall (id1 == num1value#) -> id2 < num2value# )
always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 < num1valueb#)
always ( not ((id1 > num1value#) until (id2 <= num2value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not fall (id3 == num3value#))) )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always (id1 >= num1value# and not rise (id2 >= num2valuea# and id2 <= num2valueb#))
always ( id1 == id2 and id3 == id4 -> (id5 == num1value#) until [0:num2temporal#] (id6 == id7) )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 > num1value#) -> always (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 < num1value#) -> id2 <= num2value# )
always ( fall (id1 == id2) -> not ((id3 >= num1valuea# and id3 <= num1valueb#) until [num2temporala#:num2temporalb#] (id4 == id5)) )
always ( id1 > num1value# or fall (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( rise (id1 == id2) -> not (id3 > num1value#) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( fall (once [0:num2temporal#] (not rise (id1 > num1value#))) -> always (eventually (id2 >= num3valuea# and id2 <= num3valueb#)) )
always (not (id1 >= num1value#))
always ( once [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id3 == num2value#))) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( (id1 == num1value#) since [0:num3temporal#] (id2 < num2value#) -> always [num5temporala#:num5temporalb#] (eventually [0:num6temporal#] (id3 == num4value#)) )
always ( rise (id1 == num1value#) and id2 < num2value# -> id3 > num3valuea# and id3 < num3valueb# )
always ( rise (id1 <= num1value#) -> id2 == id3 or id4 <= num2value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always [0:num2temporal#] (id1 < num1value#)
always ( not (once [0:num1temporal#] (not (id1 == id2))) -> rise ((not (id3 < num2value#)) since [num4temporala#:num4temporalb#] (id4 == num3value#)) )
always (not rise (id1 == id2) or id3 > num1value#)
always ( not ((id1 == num1value#) since (not (id2 == id3))) -> not fall (eventually [num3temporala#:num3temporalb#] (rise (id4 >= num2valuea# and id4 <= num2valueb#))) )
eventually [num3temporala#:num3temporalb#] (id1 < num1value# or id2 > num2value#)
always ( fall (id1 == id2) -> always (eventually [0:num2temporal#] (rise (id3 < num1value#))) )
always ( id1 == id2 or id3 == num1value# -> id4 == id5 )
always ( eventually (id1 == num1value#) -> (id2 < num2value#) until (rise (id3 >= num3value#)) )
always ( rise (id1 <= num1value#) -> always (eventually [0:num2temporal#] (rise (id2 == id3))) )
always ( id1 > num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#) -> fall ((id3 == num3value#) until [0:num5temporal#] (id4 == num4value#)) )
always ( fall (id1 == num1value#) -> (id2 == id3) since [0:num3temporal#] (not fall (id4 == num2value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or (id3 >= num1valuea# and id3 <= num1valueb#))
always ( rise (id1 > num1value#) -> not (id2 == id3) )
always ( not (once [0:num2temporal#] (id1 == num1value#)) -> eventually [num3temporala#:num3temporalb#] (always (id2 == id3)) )
always ( id1 == id2 -> id3 == id4 )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 >= num1value#) or id2 > num2value# -> id3 == id4 )
always ( historically [0:num2temporal#] (id1 == num1value#) -> eventually [0:num4temporal#] (id2 > num3value#) )
always ( id1 <= num1value# and id2 >= num2value# -> id3 == id4 )
always ( id1 <= num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
eventually (id1 == num1value#)
eventually [num1temporala#:num1temporalb#] (rise (id1 == id2))
eventually (id1 == id2)
always ( id1 == id2 -> id3 == id4 or (id5 >= num1valuea# and id5 <= num1valueb#) )
always (id1 < num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always [num2temporala#:num2temporalb#] (not (id1 <= num1value#) and id2 == id3)
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 < num1value#) -> (id2 <= num2value#) since [num4temporala#:num4temporalb#] (id3 >= num3value#) )
always ( fall (always [num2temporala#:num2temporalb#] (id1 > num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not fall (id2 >= num3valuea# and id2 <= num3valueb#))) )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually (id2 == num2value#)) )
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( id1 < num1value# or id2 == num2value# -> not rise (id3 >= num3valuea# and id3 <= num3valueb#) and id4 == id5 )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 == num2value#) )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and id2 > num2value#)
always ( rise (id1 <= num1value#) -> (id2 > num2valuea# and id2 < num2valueb#) or id3 >= num3value# )
always (id1 == num1value#)
always ( rise (id1 >= num1value#) and id2 >= num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always [0:num2temporal#] (id1 == num1value#)
always [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( id1 < num1value# or id2 < num2value# -> not (id3 == id4) )
always (id1 == num1value# and not (id2 == id3))
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 < num2value# )
always ( rise (id1 <= num1value#) -> not (id2 > num2value#) )
always ( (not (id1 == id2)) since (id3 == id4) -> (id5 > num1value#) until [0:num3temporal#] (rise (id6 > num2valuea# and id6 < num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == id3 )
always ( rise (id1 > num1value#) and rise (id2 < num2value#) -> eventually [num4temporala#:num4temporalb#] (always [num5temporala#:num5temporalb#] (id3 >= num3valuea# and id3 <= num3valueb#)) )
eventually [0:num3temporal#] (id1 == num1value# or rise (id2 == num2value#))
always ( rise (id1 < num1value#) and id2 == id3 -> id4 == id5 )
always ( rise (id1 == num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) until [0:num4temporal#] (rise (id3 > num3value#)) )
always ( id1 > num1value# -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> not (id2 >= num2valuea# and id2 < num2valueb#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> historically [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( historically [0:num1temporal#] (id1 == id2) -> eventually (id3 == id4) )
always ( once [0:num2temporal#] (rise (id1 < num1value#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( not (id1 == id2) -> rise (id3 < num1value#) )
always ( rise (id1 == num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( rise (id1 == num1value#) and id2 == num2value# -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id3 == id4)) )
always ( id1 == num1value# or rise (id2 == num2value#) -> eventually [0:num4temporal#] (not fall (id3 == num3value#)) )
always ( fall (id1 == id2) -> id3 == num1value# and id4 == num2value# )
eventually [0:num3temporal#] (not rise (id1 > num1value#) or not fall (id2 > num2value#))
always [num2temporala#:num2temporalb#] (id1 == id2 or id3 <= num1value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [num3temporala#:num3temporalb#] (not (id2 < num2value#)) )
eventually [0:num2temporal#] (id1 == num1value#)
always ( id1 >= num1value# -> (id2 == id3) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
always ( rise (id1 == num1value#) -> not (historically [0:num3temporal#] (id2 < num2value#)) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == num1value# and id2 == id3 -> not (id4 == num2value#) or id5 == id6 )
eventually [0:num1temporal#] (id1 == id2)
always ( once [0:num1temporal#] (not (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 <= num2value#)) )
eventually [0:num2temporal#] (id1 <= num1value#)
always [0:num2temporal#] (id1 == id2 and not fall (id3 >= num1value#))
eventually [num3temporala#:num3temporalb#] (fall (id1 == num1value#) or rise (id2 >= num2value#))
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (not (id2 == num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and not fall (id2 == id3) -> always [0:num3temporal#] (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( id1 <= num1value# and id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == id3 or id4 == num2value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == num1value#) -> not ((not rise (id2 == id3)) until (id4 == id5)) )
always ( not (id1 <= num1value#) and not (id2 < num2value#) -> (id3 == num3value#) until [0:num5temporal#] (id4 == num4value#) )
always ( rise (id1 == num1value#) -> always (eventually [0:num3temporal#] (fall (id2 == num2value#))) )
always [0:num3temporal#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value#)
always ( once [0:num2temporal#] (id1 == num1value#) -> (id2 == id3) until [num4temporala#:num4temporalb#] (id4 > num3valuea# and id4 < num3valueb#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num3temporala#:num3temporalb#] (not (id2 < num2value#)) )
always ( not (id1 > num1value#) -> not fall ((id2 < num2value#) since [num4temporala#:num4temporalb#] (id3 > num3value#)) )
always [0:num3temporal#] (id1 > num1value# and id2 > num2value#)
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
eventually [0:num1temporal#] (id1 == id2)
always ( id1 == num1value# and id2 == num2value# -> (id3 >= num3value#) until [0:num5temporal#] (rise (id4 < num4value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 <= num1value#))
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( id1 < num1value# -> id2 < num2value# and rise (id3 <= num3value#) )
always ( fall (id1 == num1value#) -> (not (id2 > num2valuea# and id2 < num2valueb#)) since (fall (id3 == num3value#)) )
eventually (not (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 == num2value# )
always ( not (id1 >= num1valuea# and id1 <= num1valueb#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 < num2value#) until [num4temporala#:num4temporalb#] (id3 > num3valuea# and id3 < num3valueb#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 > num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id3 < num1value#))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> id2 > num2valuea# and id2 < num2valueb# )
always ( once (id1 < num1value#) -> always (eventually (id2 == id3)) )
always ( not (id1 < num1value#) or id2 <= num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id3 == id4))) )
always ( id1 <= num1value# and not (id2 > num2value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (fall (id3 > num3valuea# and id3 < num3valueb#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 == num1value#) -> (id2 <= num2value#) since [0:num4temporal#] (id3 > num3value#) )
always [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( rise (id1 >= num1value#) -> (id2 > num2value#) until [num4temporala#:num4temporalb#] (rise (id3 > num3value#)) )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> historically [0:num3temporal#] (id3 > num2valuea# and id3 < num2valueb#) )
always ( id1 >= num1valuea# and id1 <= num1valueb# -> id2 >= num2value# )
eventually [num3temporala#:num3temporalb#] (not (id1 == num1value#) and (id2 > num2valuea# and id2 <= num2valueb#))
eventually [0:num2temporal#] (id1 >= num1value# and id2 == id3)
always ( id1 > num1value# and id2 > num2value# -> always [0:num4temporal#] (eventually [0:num5temporal#] (id3 > num3value#)) )
always ( not (id1 <= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num2temporal#] (not fall (id1 == num1value#))
always [num2temporala#:num2temporalb#] (not (id1 < num1value#))
always [0:num1temporal#] (id1 == id2)
always (id1 >= num1value# and id2 <= num2value#)
always (not rise (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
eventually (rise (id1 >= num1value#))
always ( (id1 > num1value#) since [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) -> not (eventually [0:num4temporal#] (id3 == id4)) )
always ( historically (id1 < num1value#) -> eventually (id2 > num2value#) )
always [0:num2temporal#] (id1 <= num1value#)
always [0:num3temporal#] (id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 <= num1value#) -> rise (id2 <= num2value#) or id3 == id4 )
always ( not (historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> (id2 == num3value#) since [num4temporala#:num4temporalb#] (rise (id3 == id4)) )
always ( id1 >= num1value# and id2 > num2value# -> rise (id3 <= num3value#) )
always ( rise (id1 < num1value#) -> eventually (always (id2 < num2value#)) )
always ( (id1 == num1value#) since [0:num3temporal#] (id2 == num2value#) -> always [0:num5temporal#] (eventually [0:num6temporal#] (id3 <= num4value#)) )
always ( rise (id1 == num1value#) -> eventually (id2 > num2valuea# and id2 < num2valueb#) )
always [0:num3temporal#] (id1 >= num1value# and id2 < num2value#)
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always [0:num3temporal#] (not rise (id1 == num1value#) or id2 == num2value#)
always ( (id1 >= num1value#) until [num2temporala#:num2temporalb#] (id2 == id3) -> eventually [0:num4temporal#] (always [0:num5temporal#] (not (id4 >= num3valuea# and id4 <= num3valueb#))) )
always ( fall (id1 == num1value#) -> once [0:num2temporal#] (id2 == id3) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 <= num2value#))) )
always ( not (once [0:num2temporal#] (fall (id1 > num1valuea# and id1 < num1valueb#))) -> (id2 > num3value#) until [0:num5temporal#] (id3 >= num4value#) )
always ( rise (id1 > num1value#) -> not (id2 == num2value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [0:num2temporal#] (fall (id1 == num1value#))
always ( id1 == id2 -> eventually (always [num2temporala#:num2temporalb#] (not fall (id3 > num1value#))) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
eventually [0:num3temporal#] (not (id1 > num1valuea# and id1 < num1valueb#) and (id2 >= num2valuea# and id2 <= num2valueb#))
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) and id2 > num2value# -> not (id3 <= num3value#) and (id4 >= num4valuea# and id4 < num4valueb#) )
always ( id1 == id2 and not (id3 >= num1valuea# and id3 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id4 > num2value#))) )
always ( rise (id1 < num1value#) -> (id2 >= num2valuea# and id2 <= num2valueb#) and (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 <= num1value#) -> (not (id2 == num2value#)) until [0:num4temporal#] (rise (id3 > num3value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 or rise (id3 > num1valuea# and id3 <= num1valueb#))
always ( not (id1 == num1value#) or id2 <= num2value# -> id3 > num3value# )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> always [num4temporala#:num4temporalb#] (eventually (rise (id3 > num3value#))) )
always ( fall (id1 == id2) -> not ((id3 > num1valuea# and id3 < num1valueb#) until [0:num3temporal#] (id4 == num2value#)) )
eventually [0:num2temporal#] (id1 == id2 and id3 > num1value#)
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not fall (id2 > num2value#) or id3 == num3value# )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( once [0:num2temporal#] (id1 >= num1valuea# and id1 < num1valueb#) -> once [0:num4temporal#] (rise (id2 > num3valuea# and id2 < num3valueb#)) )
always ( not (eventually (rise (id1 > num1value#))) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 <= num2value#))) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (id2 < num2value#) )
always [0:num2temporal#] (not fall (id1 >= num1value#))
always ( rise ((id1 == id2) since [num2temporala#:num2temporalb#] (id3 == num1value#)) -> always [0:num4temporal#] (id4 >= num3valuea# and id4 <= num3valueb#) )
always ( rise (id1 == num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( id1 <= num1value# -> eventually (id2 > num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> (id2 <= num2value#) since [0:num4temporal#] (id3 <= num3value#) )
always ( (id1 > num1valuea# and id1 <= num1valueb#) or id2 < num2value# -> rise ((id3 > num3valuea# and id3 < num3valueb#) until [num4temporala#:num4temporalb#] (id4 == id5)) )
eventually (rise (id1 <= num1value#))
always [0:num1temporal#] (id1 == id2)
always ( not (id1 <= num1value#) -> eventually [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> not (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( not rise (id1 == id2) or id3 <= num1value# -> historically [0:num3temporal#] (id4 > num2value#) )
always ( not (id1 > num1valuea# and id1 <= num1valueb#) or id2 >= num2value# -> eventually (not rise (id3 >= num3value#)) )
always (not (id1 > num1value#))
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 < num1value#)) )
always ( (id1 >= num1value#) since [0:num2temporal#] (id2 == id3) -> always (id4 == id5) )
always ( (id1 <= num1value#) since [num3temporala#:num3temporalb#] (id2 <= num2value#) -> (not (id3 <= num4value#)) until [0:num5temporal#] (rise (id4 == id5)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> id2 == num2value# )
always [num2temporala#:num2temporalb#] (id1 < num1value#)
always ( historically [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually [0:num4temporal#] (id3 >= num2value#)) )
always ( not (id1 >= num1value#) or id2 >= num2value# -> not (eventually [0:num4temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( rise (id1 < num1value#) and (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (not (id3 == num3value#)) )
always ( rise (id1 > num1value#) -> (id2 == id3) until [0:num3temporal#] (rise (id4 >= num2valuea# and id4 <= num2valueb#)) )
always [0:num2temporal#] (id1 > num1value# or id2 == id3)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( fall (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( id1 >= num1value# -> eventually (always (id2 == id3)) )
always ( id1 < num1value# or id2 == id3 -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id4 > num2valuea# and id4 < num2valueb#))) )
always ( fall (id1 == num1value#) -> id2 < num2value# )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (id2 <= num2value#) )
always ( (id1 < num1value#) since (id2 >= num2value#) -> not ((id3 <= num3value#) until [num5temporala#:num5temporalb#] (id4 <= num4value#)) )
always ( rise (id1 == num1value#) -> not (eventually [num3temporala#:num3temporalb#] (rise (id2 < num2value#))) )
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( rise (id1 > num1value#) -> eventually (always [num2temporala#:num2temporalb#] (id2 == id3)) )
always ( rise (id1 == num1value#) -> id2 == id3 )
always ( rise (id1 <= num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
always [0:num3temporal#] (id1 < num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( rise (id1 >= num1value#) or id2 == num2value# -> always [0:num4temporal#] (id3 > num3value#) )
always ( eventually [0:num2temporal#] (id1 >= num1value#) -> always [num4temporala#:num4temporalb#] (id2 == num3value#) )
always ( rise (id1 < num1value#) -> not (id2 == num2value#) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) since (rise (id4 == num2value#)) )
always ( rise (id1 > num1value#) -> not ((id2 > num2value#) until [num4temporala#:num4temporalb#] (id3 <= num3value#)) )
always ( not ((id1 < num1value#) since (id2 > num2value#)) -> always [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 <= num1value#) -> id2 >= num2value# )
always [num2temporala#:num2temporalb#] (not fall (id1 > num1value#))
always ( (id1 > num1valuea# and id1 < num1valueb#) or not (id2 == num2value#) -> id3 >= num3valuea# and id3 <= num3valueb# )
always ( rise (id1 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 > num2value#)) )
always ( rise (id1 >= num1value#) -> once [0:num3temporal#] (rise (id2 < num2value#)) )
always ( id1 == id2 -> id3 == id4 )
always [0:num2temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 == id3)
always (not (id1 <= num1value#))
eventually [0:num3temporal#] (not (id1 < num1value#) and id2 > num2value#)
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id3 >= num1value#))) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( id1 == id2 -> fall (id3 == id4) )
always ( rise (id1 > num1value#) -> eventually (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value# or id2 == id3)
always ( rise (id1 == num1value#) and not fall (id2 > num2valuea# and id2 < num2valueb#) -> fall (id3 > num3valuea# and id3 < num3valueb#) )
always ( (id1 == id2) since [0:num2temporal#] (id3 >= num1value#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (rise (id4 > num3value#))) )
always ( rise (id1 > num1value#) -> eventually (id2 > num2value#) )
eventually [0:num3temporal#] (id1 == num1value# and id2 == num2value#)
eventually [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
eventually [num3temporala#:num3temporalb#] (id1 > num1value# and rise (id2 >= num2value#))
always ( rise (id1 == num1value#) and id2 == num2value# -> id3 == id4 )
always ( (not (id1 == id2)) since (rise (id3 == id4)) -> always (eventually (id5 <= num1value#)) )
always ( rise (id1 == id2) -> once [0:num2temporal#] (id3 <= num1value#) )
always ( (id1 == num1value#) since [0:num3temporal#] (not (id2 >= num2valuea# and id2 <= num2valueb#)) -> (id3 > num4value#) until [0:num6temporal#] (not (id4 >= num5value#)) )
always ( not (historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 < num3value#)) )
eventually (id1 > num1valuea# and id1 < num1valueb#)
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
eventually (id1 == id2)
always ( rise (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (rise (id2 >= num2value#)) )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 <= num2value#))) )
always ( fall (id1 == id2) -> always [0:num2temporal#] (not (id3 == num1value#)) )
always ( (id1 == num1value#) since (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always ( rise (id1 <= num1value#) -> always [num2temporala#:num2temporalb#] (eventually (id2 == id3)) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (always (id2 == num2value#)) )
always ( fall (id1 == id2) -> id3 >= num1value# )
eventually [num3temporala#:num3temporalb#] (id1 == num1value# and rise (id2 > num2value#))
always ( rise (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
always ( always [0:num2temporal#] (not (id1 <= num1value#)) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 == id3))) )
eventually [0:num2temporal#] (not rise (id1 >= num1valuea# and id1 <= num1valueb#))
eventually (id1 < num1value# or id2 <= num2value#)
always [0:num3temporal#] (id1 < num1value# or id2 >= num2value#)
always [0:num2temporal#] (not (id1 == id2) or id3 >= num1value#)
always ( id1 == num1value# -> always [num2temporala#:num2temporalb#] (id2 == id3) )
eventually [0:num2temporal#] (rise (id1 >= num1value#) and id2 == id3)
always ( rise (id1 == num1value#) -> rise (historically [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
eventually [0:num2temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == id3)
eventually (rise (id1 == num1value#))
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 <= num2value#) )
always ( id1 == id2 and rise (id3 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id4 <= num2value#)) )
always ( rise (id1 >= num1value#) -> not (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( rise (id1 == id2) -> always [0:num1temporal#] (id3 == id4) )
always (id1 < num1value# and id2 == id3)
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( (id1 >= num1value#) since (id2 == id3) -> eventually (id4 > num2value#) )
eventually [0:num3temporal#] (id1 > num1value# and id2 >= num2value#)
eventually (id1 < num1value# and rise (id2 <= num2value#))
always (id1 >= num1value# or id2 == id3)
always ( rise (id1 < num1value#) -> id2 > num2value# )
always ( fall ((id1 == id2) since [0:num2temporal#] (id3 < num1value#)) -> always [0:num3temporal#] (eventually (not fall (id4 == id5))) )
always ( not (id1 < num1value#) and id2 < num2value# -> id3 < num3value# )
always ( id1 <= num1value# -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( rise (id1 == id2) -> id3 >= num1valuea# and id3 <= num1valueb# )
always ( rise (id1 < num1value#) -> id2 >= num2value# )
always (not (id1 > num1valuea# and id1 < num1valueb#))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 >= num2value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> (id3 >= num3valuea# and id3 <= num3valueb#) and id4 > num4value# )
always ( rise (id1 == id2) -> (id3 <= num1value#) until (id4 == id5) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [0:num3temporal#] (id3 <= num1value#)) )
always ( not (always [0:num1temporal#] (id1 == id2)) -> always [0:num3temporal#] (id3 > num2value#) )
always ( once [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#)) -> always [num4temporala#:num4temporalb#] (not (id2 >= num3value#)) )
eventually [0:num1temporal#] (id1 == id2 and not (id3 == id4))
always (id1 == id2 or id3 == id4)
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( not (historically [0:num2temporal#] (id1 > num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (id2 == num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 <= num2valueb#) -> historically [0:num4temporal#] (id3 == num3value#) )
always ( id1 == num1value# -> eventually (always [num3temporala#:num3temporalb#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 >= num1value#) -> (id2 > num2valuea# and id2 <= num2valueb#) until [0:num3temporal#] (fall (id3 == id4)) )
always ( rise (id1 < num1value#) -> not (id2 >= num2value#) )
always ( rise (id1 >= num1value#) -> fall (eventually [0:num3temporal#] (not (id2 == num2value#))) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( not rise ((id1 > num1valuea# and id1 < num1valueb#) since [num3temporala#:num3temporalb#] (id2 <= num2value#)) -> always [0:num5temporal#] (eventually [0:num6temporal#] (rise (id3 <= num4value#))) )
eventually [0:num2temporal#] (fall (id1 >= num1valuea# and id1 <= num1valueb#))
always ( id1 == id2 and id3 == num1value# -> not (always [0:num2temporal#] (id4 == id5)) )
always ((id1 > num1valuea# and id1 < num1valueb#) or id2 <= num2value#)
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num2temporal#] (eventually (fall (id2 == id3))) )
always ( eventually [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 <= num3value#))) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 < num2value#))) )
always ( historically [0:num1temporal#] (id1 == id2) -> rise (eventually (not (id3 == num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> historically [0:num3temporal#] (id2 <= num2value#) )
always ( once (id1 > num1valuea# and id1 < num1valueb#) -> (id2 == id3) until [0:num3temporal#] (id4 < num2value#) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( id1 < num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( historically [0:num1temporal#] (id1 == id2) -> (not rise (id3 == id4)) until [0:num3temporal#] (id5 >= num2value#) )
always ( id1 <= num1value# -> eventually [0:num2temporal#] (rise (id2 == id3)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( rise (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always (id3 > num1value#)) )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (not (id2 == num2value#))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 <= num2value#)) )
always ( rise (id1 > num1value#) -> eventually (always [num3temporala#:num3temporalb#] (id2 == num2value#)) )
always ( (id1 >= num1value#) since [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num5temporal#] (id3 < num4value#) )
eventually [0:num2temporal#] (id1 == num1value# or not (id2 == id3))
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 <= num1value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3 -> id4 == id5 or id6 == num2value# )
always ( fall (id1 == id2) -> rise (id3 == num1value#) and (id4 > num2valuea# and id4 < num2valueb#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 >= num1value#) -> id2 == id3 )
always ( rise (id1 <= num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 > num3value#))) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( (id1 > num1valuea# and id1 < num1valueb#) and id2 == num2value# -> not (id3 == num3value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value# -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) and not (id2 >= num2value#))
always [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( id1 == id2 -> historically [0:num2temporal#] (not (id3 <= num1value#)) )
always ( rise (id1 <= num1value#) -> (id2 < num2value#) until (rise (id3 == id4)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ( id1 < num1value# -> eventually [0:num3temporal#] (not (id2 < num2value#)) )
eventually [num3temporala#:num3temporalb#] (not (id1 >= num1value#) and id2 > num2value#)
always ( rise (id1 <= num1value#) -> (id2 < num2value#) since (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 < num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 == id4 )
always ( id1 > num1value# and not (id2 > num2value#) -> id3 < num3value# )
eventually [num2temporala#:num2temporalb#] (id1 > num1value#)
always ( rise (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (fall (id3 == id4))) )
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> not (eventually [0:num3temporal#] (id2 >= num2value#)) )
always ( rise (id1 <= num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) )
always [num2temporala#:num2temporalb#] (id1 <= num1value#)
always [0:num3temporal#] (id1 > num1value# or id2 > num2value#)
eventually [num1temporala#:num1temporalb#] (not (id1 == id2))
always ( rise (id1 >= num1value#) -> id2 < num2value# )
eventually [num2temporala#:num2temporalb#] (not (id1 >= num1valuea# and id1 <= num1valueb#) and id2 == id3)
eventually (id1 == num1value# and fall (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> rise (id2 == id3) )
always ( historically [num1temporala#:num1temporalb#] (id1 == id2) -> always [0:num3temporal#] (not (id3 >= num2value#)) )
always ( fall (id1 == id2) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id3 == num1value#)) )
always [0:num3temporal#] ((id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2value#)) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (rise (id2 > num2valuea# and id2 < num2valueb#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) and rise (id2 < num2value#) -> always (id3 == num3value#) )
always (id1 > num1value# or id2 <= num2value#)
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually (id1 < num1value# and rise (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (id2 == num2value#) )
eventually [0:num3temporal#] (id1 > num1value# and rise (id2 > num2value#))
always [0:num1temporal#] (id1 == id2)
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (id2 == id3) )
always ( rise (id1 == num1value#) -> id2 <= num2value# )
always ( id1 > num1value# and id2 == num2value# -> always [0:num3temporal#] (id3 == id4) )
always ( id1 <= num1value# -> rise (id2 == id3) )
always ( id1 == num1value# or rise (id2 == num2value#) -> always [0:num4temporal#] (id3 > num3value#) )
always ( id1 == id2 -> id3 >= num1valuea# and id3 < num1valueb# )
eventually [0:num2temporal#] (rise (id1 >= num1valuea# and id1 <= num1valueb#))
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2value#)) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (fall (id2 > num2valuea# and id2 <= num2valueb#))) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( id1 == id2 or id3 == id4 -> always [0:num2temporal#] (eventually [0:num3temporal#] (id5 > num1value#)) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always (id2 == num2value#)) )
always [0:num3temporal#] (not (id1 == num1value#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not fall ((not (id1 == id2)) since [0:num1temporal#] (fall (id3 == id4))) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id5 == id6)) )
always ( id1 >= num1value# and not (id2 >= num2value#) -> (id3 > num3valuea# and id3 < num3valueb#) and id4 >= num4value# )
always ( fall (id1 == id2) -> fall (always [0:num2temporal#] (id3 < num1value#)) )
always ( id1 >= num1value# and id2 == num2value# -> id3 < num3value# )
always ( not ((id1 == id2) since (rise (id3 <= num1value#))) -> (id4 >= num2valuea# and id4 < num2valueb#) until (fall (id5 >= num3valuea# and id5 <= num3valueb#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
eventually [num2temporala#:num2temporalb#] (id1 == id2 and id3 <= num1value#)
always ( id1 < num1value# or not rise (id2 > num2value#) -> eventually [0:num3temporal#] (rise (id3 == id4)) )
always ( rise (id1 == id2) -> always (eventually (rise (id3 == num1value#))) )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#))
always ( rise (id1 == id2) -> always [0:num2temporal#] (id3 < num1value#) )
always ( once [0:num2temporal#] (rise (id1 >= num1valuea# and id1 < num1valueb#)) -> (id2 <= num3value#) since [num5temporala#:num5temporalb#] (id3 <= num4value#) )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (historically [0:num1temporal#] (id1 == id2)) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 < num2value#)) )
always ( id1 == id2 and not (id3 < num1value#) -> eventually [num3temporala#:num3temporalb#] (always [num4temporala#:num4temporalb#] (id4 == num2value#)) )
always ( id1 > num1value# and id2 == id3 -> rise (id4 < num2value#) or not rise (id5 > num3value#) )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( historically [0:num2temporal#] (not fall (id1 >= num1value#)) -> rise (always [0:num3temporal#] (id2 == id3)) )
always (id1 > num1value#)
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id2 == num2value#)) )
always ( rise (id1 == id2) -> id3 == num1value# )
always ( rise (id1 == id2) -> historically [0:num2temporal#] (id3 == num1value#) )
always [0:num2temporal#] (id1 > num1valuea# and id1 < num1valueb#)
always ( rise (id1 == num1value#) -> id2 > num2value# )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( fall (id1 == id2) -> always (eventually (id3 > num1value#)) )
always ( id1 < num1value# and id2 == num2value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id3 == id4))) )
always ( rise (id1 > num1value#) -> eventually [num3temporala#:num3temporalb#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( id1 == num1value# and not (id2 >= num2valuea# and id2 < num2valueb#) -> id3 < num3value# )
always ( rise (id1 > num1value#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (not (id2 == id3))) )
always ( rise (id1 == num1value#) -> (id2 == id3) until (fall (id4 > num2valuea# and id4 < num2valueb#)) )
always (id1 < num1value#)
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (not (id2 >= num2value#)) )
always ( historically (id1 > num1valuea# and id1 < num1valueb#) -> once [0:num3temporal#] (not (id2 > num2value#)) )
always ( rise (id1 <= num1value#) -> always (eventually (rise (id2 < num2value#))) )
always ( rise (id1 >= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 <= num2value#)) )
always ( not (id1 >= num1valuea# and id1 < num1valueb#) and id2 < num2value# -> once [0:num4temporal#] (id3 <= num3value#) )
always ( rise (id1 >= num1value#) or not (id2 <= num2value#) -> id3 < num3value# )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> id2 == num2value# or fall (id3 == num3value#) )
eventually [num2temporala#:num2temporalb#] (not (id1 <= num1value#))
always (id1 <= num1value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (rise (id2 > num2value#))) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (rise (id2 >= num2valuea# and id2 <= num2valueb#)) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( fall (id1 == num1value#) -> id2 == num2value# )
eventually ((id1 > num1valuea# and id1 < num1valueb#) and not (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 == num1value#) -> id2 > num2valuea# and id2 < num2valueb# )
eventually [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( not (id1 == id2) -> always [0:num2temporal#] (eventually [0:num3temporal#] (id3 < num1value#)) )
always ( rise (id1 == num1value#) or id2 >= num2value# -> (id3 > num3valuea# and id3 < num3valueb#) until [0:num5temporal#] (not (id4 < num4value#)) )
always ( id1 == num1value# -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always [0:num2temporal#] (not rise (id1 >= num1value#) and id2 == id3)
always ( rise (id1 > num1value#) -> eventually [0:num3temporal#] (id2 < num2value#) )
always [0:num2temporal#] (id1 >= num1value#)
always ( id1 == num1value# -> not (id2 > num2value#) and id3 == id4 )
always ( rise (id1 <= num1value#) -> always [num3temporala#:num3temporalb#] (id2 <= num2value#) )
always ( fall (id1 == num1value#) -> eventually [0:num3temporal#] (id2 > num2value#) )
always [0:num3temporal#] (id1 >= num1value# and (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> always (eventually (rise (id2 == num2value#))) )
always ( fall (historically [0:num2temporal#] (id1 == num1value#)) -> always (eventually [num4temporala#:num4temporalb#] (rise (id2 == num3value#))) )
always ( id1 == id2 and not (id3 == id4) -> always [0:num2temporal#] (eventually [num3temporala#:num3temporalb#] (rise (id5 < num1value#))) )
always ( id1 == id2 -> always [0:num2temporal#] (id3 == num1value#) )
always [0:num3temporal#] (id1 == num1value# or id2 < num2value#)
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> always (id2 < num2value#) )
always ( id1 == num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( id1 < num1value# and id2 <= num2value# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id3 == id4)) )
always [num3temporala#:num3temporalb#] ((id1 > num1valuea# and id1 < num1valueb#) or id2 < num2value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always (eventually [0:num3temporal#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> always [0:num2temporal#] (eventually [0:num3temporal#] (rise (id2 == id3))) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 == id3 -> not ((not rise (id4 >= num2valuea# and id4 <= num2valueb#)) until (id5 >= num3value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 >= num2value#)) )
always [0:num2temporal#] (id1 > num1value#)
always ( rise (id1 > num1value#) -> always [num3temporala#:num3temporalb#] (id2 == num2value#) )
always ( rise (id1 <= num1value#) and id2 == id3 -> id4 > num2valuea# and id4 < num2valueb# )
always ( fall (once [0:num2temporal#] (id1 > num1value#)) -> (id2 <= num3value#) until [0:num4temporal#] (fall (id3 == id4)) )
always ( id1 >= num1value# or id2 > num2value# -> id3 == id4 )
always ( id1 > num1value# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (fall (id2 == num2value#))) )
always ( rise (id1 >= num1value#) -> rise (id2 <= num2value#) )
eventually [0:num2temporal#] (id1 > num1value#)
always ( eventually [num2temporala#:num2temporalb#] (id1 >= num1value#) -> not (eventually [0:num4temporal#] (id2 > num3valuea# and id2 < num3valueb#)) )
always ( historically [0:num2temporal#] (id1 == num1value#) -> (id2 == num3value#) until (not fall (id3 == id4)) )
always ( rise (id1 < num1value#) and id2 <= num2value# -> (id3 > num3value#) until [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 < num1value#) and id2 <= num2value# -> id3 < num3value# )
eventually [num2temporala#:num2temporalb#] (id1 < num1value#)
always (id1 == num1value#)
always [0:num1temporal#] (id1 == id2)
always ( historically [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 > num3value#))) )
always [0:num3temporal#] (id1 == num1value# or not (id2 >= num2value#))
always ( fall (id1 == num1value#) -> id2 >= num2valuea# and id2 < num2valueb# )
always ( fall (id1 == num1value#) -> always [num3temporala#:num3temporalb#] (eventually (rise (id2 == num2value#))) )
always ( rise (id1 < num1value#) and rise (id2 == num2value#) -> fall (id3 == num3value#) )
always ( once [0:num2temporal#] (rise (id1 == num1value#)) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id2 < num3value#))) )
always (id1 == id2 or id3 == num1value#)
always ( rise (id1 >= num1value#) or not fall (id2 >= num2valuea# and id2 <= num2valueb#) -> (id3 > num3valuea# and id3 < num3valueb#) until [num5temporala#:num5temporalb#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always [0:num2temporal#] (id1 == num1value#)
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num2temporala#:num2temporalb#] (eventually [num3temporala#:num3temporalb#] (fall (id2 == id3))) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 == num2value#))) )
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> not (always [0:num4temporal#] (id2 > num3value#)) )
always ( fall (id1 == num1value#) or id2 == id3 -> always (eventually [num2temporala#:num2temporalb#] (fall (id4 == id5))) )
always ( id1 == num1value# or rise (id2 < num2value#) -> eventually (not fall (id3 > num3value#)) )
always ( (id1 >= num1valuea# and id1 <= num1valueb#) or rise (id2 >= num2value#) -> (id3 > num3value#) until (id4 == id5) )
always ( id1 == num1value# and id2 == num2value# -> id3 < num3value# )
always ( rise (id1 == num1value#) or rise (id2 > num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 <= num3valueb#)) )
eventually (id1 == id2)
always ( rise (historically (id1 == id2)) -> eventually [0:num2temporal#] (id3 == num1value#) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or rise (id2 <= num2value#) -> not (id3 > num3valuea# and id3 < num3valueb#) )
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 > num2value#))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) or id2 <= num2value# -> rise (always [0:num4temporal#] (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> id2 == id3 )
always ( fall (id1 == num1value#) -> always (id2 == id3) )
always ( (id1 == id2) until [0:num2temporal#] (id3 >= num1valuea# and id3 <= num1valueb#) -> always (eventually [0:num4temporal#] (id4 > num3value#)) )
always ( not (historically (id1 >= num1value#)) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( always [0:num2temporal#] (not (id1 <= num1value#)) -> fall (always [num4temporala#:num4temporalb#] (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> not (id2 >= num2value#) )
eventually [0:num2temporal#] (rise (id1 >= num1value#) or id2 == id3)
always ( rise (id1 > num1value#) -> eventually (id2 > num2value#) )
always [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 < num2value#)
always ( fall (id1 == num1value#) -> (id2 == num2value#) until (id3 <= num3value#) )
always ( not ((not fall (id1 > num1valuea# and id1 < num1valueb#)) since (id2 == num2value#)) -> not (always [0:num4temporal#] (id3 > num3value#)) )
eventually [0:num2temporal#] (id1 < num1value#)
always ( rise (id1 > num1value#) -> always [0:num3temporal#] (not (id2 >= num2value#)) )
eventually (id1 <= num1value#)
eventually [0:num2temporal#] (rise (id1 <= num1value#) or id2 == id3)
always ( fall (id1 == id2) -> not rise (eventually [0:num1temporal#] (rise (id3 == id4))) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> id2 <= num2value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 == num1value#)) )
always ( id1 == num1value# -> rise (id2 <= num2value#) )
always ( historically [num2temporala#:num2temporalb#] (id1 == num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (id2 == id3)) )
always (id1 == num1value# and id2 == num2value#)
eventually [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#))
always ( rise (id1 > num1value#) -> id2 == id3 )
eventually [num2temporala#:num2temporalb#] (id1 == num1value#)
always ( rise (id1 <= num1value#) -> id2 < num2value# and id3 == num3value# )
always ( id1 < num1value# or id2 < num2value# -> id3 == id4 )
always ( id1 == num1value# -> eventually (always (id2 < num2value#)) )
always ( rise (id1 == num1value#) -> always [0:num3temporal#] (id2 == num2value#) )
always ( fall (id1 >= num1valuea# and id1 < num1valueb#) -> not (id2 < num2value#) )
always ( fall (id1 == id2) -> always [0:num1temporal#] (eventually [0:num2temporal#] (id3 == id4)) )
always ( id1 < num1value# -> id2 >= num2value# )
always ( rise (id1 <= num1value#) -> always [0:num3temporal#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2valuea# and id2 <= num2valueb#))) )
eventually [num3temporala#:num3temporalb#] (id1 <= num1value# or not (id2 == num2value#))
always ( (id1 > num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#) -> id3 == num3value# )
always ( fall (id1 == num1value#) or id2 == id3 -> id4 > num2value# and id5 == id6 )
always ( id1 >= num1value# or not (id2 <= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (rise (id3 < num3value#))) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (eventually (fall (id2 > num2valuea# and id2 < num2valueb#))) )
eventually [0:num2temporal#] (rise (id1 <= num1value#))
always ( id1 == num1value# and not rise (id2 == id3) -> (id4 <= num2value#) until [0:num4temporal#] (id5 <= num3value#) )
always ( id1 >= num1value# or not (id2 > num2valuea# and id2 < num2valueb#) -> id3 >= num3value# )
always ( rise (id1 == id2) -> id3 > num1valuea# and id3 < num1valueb# )
always [0:num3temporal#] (not fall (id1 >= num1value#) or id2 == num2value#)
always ( rise (id1 <= num1value#) -> always (eventually (fall (id2 == id3))) )
always ( always [0:num2temporal#] (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == id3)) )
always ( not (once [0:num1temporal#] (id1 == id2)) -> not (eventually [0:num3temporal#] (id3 > num2value#)) )
always ( id1 >= num1value# -> eventually [0:num3temporal#] (always (id2 > num2valuea# and id2 < num2valueb#)) )
always ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 == num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
always ( rise (id1 >= num1value#) -> id2 >= num2value# )
always ( rise (id1 > num1value#) -> always [num2temporala#:num2temporalb#] (id2 == id3) )
eventually (id1 == num1value#)
always ( id1 >= num1valuea# and id1 <= num1valueb# -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 > num2value#))) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) -> rise (id2 < num2value#) )
always ( id1 == id2 -> eventually [0:num1temporal#] (always (id3 == id4)) )
eventually [0:num3temporal#] (id1 == num1value# or id2 == num2value#)
always ( id1 == num1value# and rise (id2 == num2value#) -> eventually [0:num4temporal#] (always (id3 < num3value#)) )
always [num2temporala#:num2temporalb#] (id1 == id2 and (id3 >= num1valuea# and id3 <= num1valueb#))
always (not (id1 > num1value#))
always [num3temporala#:num3temporalb#] (id1 > num1value# and (id2 >= num2valuea# and id2 <= num2valueb#))
always ( not (id1 == num1value#) -> id2 >= num2value# )
always [0:num3temporal#] (not (id1 < num1value#) and id2 > num2value#)
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (not (id2 == num2value#)) )
always ( id1 > num1valuea# and id1 < num1valueb# -> id2 >= num2value# )
always ( (id1 <= num1value#) since [0:num3temporal#] (id2 >= num2value#) -> always (eventually [0:num4temporal#] (id3 == id4)) )
always ( rise (id1 >= num1valuea# and id1 <= num1valueb#) -> (not fall (id2 == id3)) until [0:num2temporal#] (fall (id4 == id5)) )
always ( id1 > num1value# -> id2 <= num2value# and id3 > num3value# )
eventually [0:num2temporal#] (id1 == num1value#)
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> eventually [num2temporala#:num2temporalb#] (always [num3temporala#:num3temporalb#] (id2 == id3)) )
always ( id1 == id2 and id3 == num1value# -> eventually [0:num3temporal#] (always [num4temporala#:num4temporalb#] (id4 > num2value#)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and id2 >= num2value# -> once [0:num4temporal#] (id3 == num3value#) )
always ( once [0:num2temporal#] (id1 > num1value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id2 == num3value#)) )
always ( rise (id1 > num1value#) -> id2 <= num2value# )
always ( id1 < num1value# and not (id2 > num2valuea# and id2 < num2valueb#) -> id3 > num3value# and fall (id4 == num4value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1valuea# and id1 <= num1valueb#)
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#))
always ( rise (id1 >= num1value#) -> (not fall (id2 == id3)) until [num3temporala#:num3temporalb#] (id4 == num2value#) )
always [num2temporala#:num2temporalb#] (id1 >= num1value# and not fall (id2 == id3))
always ( id1 == num1value# and (id2 >= num2valuea# and id2 <= num2valueb#) -> id3 < num3value# )
always ( id1 == id2 or (id3 > num1valuea# and id3 < num1valueb#) -> not (id4 >= num2value#) or id5 == num3value# )
eventually (id1 >= num1valuea# and id1 <= num1valueb#)
always ( rise (id1 == num1value#) -> (id2 <= num2value#) until [num4temporala#:num4temporalb#] (id3 < num3value#) )
always ( rise (id1 == id2) -> always [num1temporala#:num1temporalb#] (eventually (fall (id3 == id4))) )
always ( id1 < num1value# or id2 <= num2value# -> (id3 == num3value#) until [0:num5temporal#] (id4 > num4valuea# and id4 <= num4valueb#) )
eventually [num1temporala#:num1temporalb#] (not fall (id1 == id2) and id3 == id4)
always ( rise (id1 > num1value#) -> id2 == num2value# )
always ( rise (id1 < num1value#) -> always [0:num3temporal#] (eventually [0:num4temporal#] (rise (id2 <= num2value#))) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> (id2 >= num2valuea# and id2 < num2valueb#) and id3 == num3value# )
always [0:num3temporal#] (id1 <= num1value# or id2 <= num2value#)
always ( historically [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#) -> always [num4temporala#:num4temporalb#] (eventually [num5temporala#:num5temporalb#] (id2 == num3value#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 == num2value#)) )
always ( not (id1 > num1valuea# and id1 < num1valueb#) and fall (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 == num3value#)) )
always ( rise (id1 <= num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( fall (id1 == num1value#) -> historically [0:num3temporal#] (id2 > num2value#) )
always ( fall (id1 >= num1valuea# and id1 <= num1valueb#) or (id2 >= num2valuea# and id2 <= num2valueb#) -> once [0:num4temporal#] (id3 >= num3valuea# and id3 <= num3valueb#) )
always (not rise (id1 == id2))
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (id2 > num2value#) )
always ( id1 >= num1value# -> not (id2 == num2value#) )
always ( rise (id1 < num1value#) -> id2 == num2value# )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id3 < num1value#)) )
eventually [num2temporala#:num2temporalb#] (rise (id1 < num1value#))
always ( rise (id1 == id2) -> id3 >= num1value# )
always [0:num2temporal#] (id1 >= num1valuea# and id1 <= num1valueb#)
always ( id1 == id2 and id3 > num1value# -> (id4 >= num2value#) until [0:num4temporal#] (rise (id5 > num3valuea# and id5 < num3valueb#)) )
always ( rise (id1 <= num1value#) -> eventually (not fall (id2 == id3)) )
always ( rise (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num3temporal#] (not (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> eventually [0:num2temporal#] (always [0:num3temporal#] (id2 == id3)) )
always ( id1 > num1value# -> fall (id2 == num2value#) )
eventually [num2temporala#:num2temporalb#] (id1 <= num1value#)
always ( not (always [0:num1temporal#] (id1 == id2)) -> always [0:num2temporal#] (not rise (id3 == id4)) )
always ( rise (id1 == id2) -> id3 == id4 )
always ( rise (id1 >= num1value#) and (id2 > num2valuea# and id2 < num2valueb#) -> id3 <= num3value# and id4 < num4value# )
always [num1temporala#:num1temporalb#] (id1 == id2)
always ( fall (id1 == id2) -> not (always [0:num2temporal#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 > num1valuea# and id1 < num1valueb#) -> always (eventually (id2 == num2value#)) )
always ( not ((id1 == id2) until [0:num2temporal#] (id3 <= num1value#)) -> always (eventually (rise (id4 >= num3value#))) )
always ( rise (id1 < num1value#) -> always (eventually [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 < num2valueb#)) )
always ( fall (id1 > num1valuea# and id1 < num1valueb#) -> always [num3temporala#:num3temporalb#] (eventually [num4temporala#:num4temporalb#] (rise (id2 >= num2value#))) )
always ( rise (id1 > num1value#) -> id2 == id3 )
always ( rise (id1 >= num1valuea# and id1 < num1valueb#) -> not (eventually (rise (id2 <= num2value#))) )
eventually ((id1 >= num1valuea# and id1 <= num1valueb#) or id2 == num2value#)
always ( fall (id1 == num1value#) -> id2 < num2value# )
always ( not (id1 <= num1value#) -> once (fall (id2 == num2value#)) )
always [0:num3temporal#] (id1 == num1value# and id2 > num2value#)
eventually [0:num3temporal#] (rise (id1 > num1valuea# and id1 < num1valueb#) or (id2 > num2valuea# and id2 < num2valueb#))
always ( rise (id1 < num1value#) and not (id2 <= num2value#) -> eventually [0:num4temporal#] (always [num5temporala#:num5temporalb#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 == id2 and id3 >= num1value# -> always [0:num2temporal#] (not rise (id4 == id5)) )
always ( id1 == num1value# -> not fall (always [0:num3temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( id1 >= num1value# or (id2 >= num2valuea# and id2 <= num2valueb#) -> once [0:num3temporal#] (id3 == id4) )
always ( id1 > num1valuea# and id1 <= num1valueb# -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2value#)) )
always ( (id1 > num1valuea# and id1 < num1valueb#) or id2 >= num2value# -> (id3 == num3value#) until [0:num5temporal#] (id4 >= num4valuea# and id4 <= num4valueb#) )
always ( rise (id1 >= num1value#) -> id2 <= num2value# and fall (id3 == num3value#) )
always [0:num2temporal#] (id1 == id2 and id3 >= num1value#)
always ( fall (id1 == num1value#) -> eventually [num3temporala#:num3temporalb#] (always (not rise (id2 >= num2value#))) )
always ( id1 <= num1value# -> always [0:num3temporal#] (eventually [0:num4temporal#] (id2 == num2value#)) )
always ( fall (id1 == num1value#) -> eventually (always (id2 == num2value#)) )
always ( rise (id1 >= num1value#) -> id2 >= num2valuea# and id2 <= num2valueb# )
always ( rise (id1 == num1value#) and not (id2 >= num2value#) -> always [0:num4temporal#] (eventually [0:num5temporal#] (not (id3 < num3value#))) )
always ( not (id1 == id2) or id3 == num1value# -> always (id4 >= num2valuea# and id4 <= num2valueb#) )
always ( rise (id1 < num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 >= num2valuea# and id2 <= num2valueb#)) )
always ( rise (id1 < num1value#) -> not (always (id2 <= num2value#)) )
always ( once [0:num2temporal#] (id1 > num1valuea# and id1 <= num1valueb#) -> always [0:num4temporal#] (id2 < num3value#) )
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2valuea# and id2 <= num2valueb#) )
always ( once [0:num1temporal#] (id1 == id2) -> always [num3temporala#:num3temporalb#] (eventually (fall (id3 == num2value#))) )
always ( id1 <= num1value# -> eventually (always [0:num3temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 == id2) -> eventually [0:num2temporal#] (always [num3temporala#:num3temporalb#] (id3 > num1valuea# and id3 < num1valueb#)) )
always ( rise (id1 == num1value#) -> eventually [0:num3temporal#] (always [0:num4temporal#] (id2 > num2valuea# and id2 < num2valueb#)) )
always ( rise (id1 < num1value#) -> (id2 == id3) until [0:num2temporal#] (rise (id4 == id5)) )
always ( not (historically [0:num2temporal#] (id1 == num1value#)) -> eventually (always [0:num4temporal#] (id2 == num3value#)) )
always ( rise (id1 < num1value#) -> not (once (id2 < num2value#)) )
always ( not rise (id1 == id2) -> rise (once [num2temporala#:num2temporalb#] (id3 >= num1valuea# and id3 <= num1valueb#)) )
always ( id1 < num1value# or rise (id2 == num2value#) -> eventually [0:num4temporal#] (always [0:num5temporal#] (id3 > num3valuea# and id3 < num3valueb#)) )
always ( id1 <= num1value# -> always [num3temporala#:num3temporalb#] (eventually (not (id2 >= num2value#))) )
always ( rise (id1 >= num1value#) -> id2 > num2value# or fall (id3 == num3value#) )
always ( rise (id1 >= num1value#) -> eventually [num3temporala#:num3temporalb#] (id2 <= num2value#) )
eventually [0:num3temporal#] ((id1 >= num1valuea# and id1 <= num1valueb#) and (id2 > num2valuea# and id2 < num2valueb#))
eventually [0:num1temporal#] (id1 == id2)
always ( rise (id1 >= num1value#) -> always [num3temporala#:num3temporalb#] (id2 >= num2value#) )
eventually [0:num1temporal#] (id1 == id2)
